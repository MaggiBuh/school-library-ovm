{"version":3,"file":"angular-l10n.js","sources":["../../index.ts","../../public_api.ts","../../src/modules/locale-validation.module.ts","../../src/modules/localization.module.ts","../../src/modules/translation.module.ts","../../src/directives/locale-number-validator.directive.ts","../../src/directives/locale-number.directive.ts","../../src/directives/locale-date.directive.ts","../../src/directives/translate.directive.ts","../../src/models/base-directive.ts","../../src/models/bfs.ts","../../src/pipes/locale-number.pipe.ts","../../src/pipes/locale-date.pipe.ts","../../src/pipes/translate.pipe.ts","../../src/decorators/currency.decorator.ts","../../src/decorators/default-locale.decorator.ts","../../src/decorators/language.decorator.ts","../../src/services/collator.ts","../../src/services/locale-validation.ts","../../src/models/validation/decimal-code.ts","../../src/models/validation/number-code.ts","../../src/services/localization.ts","../../src/services/translation.ts","../../src/services/translation.service.ts","../../src/models/types.ts","../../src/services/translation-handler.ts","../../src/services/translation-provider.ts","../../src/models/translation/translation-config-api.ts","../../src/services/intl-api.ts","../../src/models/translation/translation-config.ts","../../src/services/locale.service.ts","../../src/models/localization/default-locale.ts","../../src/services/locale-storage.ts","../../src/models/localization/locale-config-api.ts","../../src/models/localization/locale-config.ts","../../src/models/injector-ref.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {InjectorRef,ILocaleConfig,LocaleConfig,ILocaleService,LocaleService,LocaleStorage,BrowserStorage,ITranslationConfig,TranslationConfig,ITranslationService,TranslationService,TranslationProvider,HttpTranslationProvider,TranslationHandler,DefaultTranslationHandler,Translation,Localization,NumberCode,DecimalCode,ILocaleValidation,LocaleValidation,ICollator,Collator,IntlAPI,Language,DefaultLocale,Currency,TranslatePipe,LocaleDatePipe,LocaleDecimalPipe,LocalePercentPipe,LocaleCurrencyPipe,BaseDirective,TranslateDirective,LocaleDateDirective,LocaleDecimalDirective,LocalePercentDirective,LocaleCurrencyDirective,LocaleNumberValidatorDirective,validateLocaleNumber,TranslationModule,LocalizationModule,LocaleValidationModule} from './public_api';\n","/**\r\n * Angular l10n.\r\n * An Angular library to translate messages, dates and numbers.\r\n * Written by Roberto Simonetti.\r\n * MIT license.\r\n * https://github.com/robisim74/angular-l10n\r\n */\r\n\r\n/**\r\n * Entry point for all public APIs of the package.\r\n */\r\nexport {InjectorRef,ILocaleConfig,LocaleConfig,ILocaleService,LocaleService,LocaleStorage,BrowserStorage,ITranslationConfig,TranslationConfig,ITranslationService,TranslationService,TranslationProvider,HttpTranslationProvider,TranslationHandler,DefaultTranslationHandler,Translation,Localization,NumberCode,DecimalCode,ILocaleValidation,LocaleValidation,ICollator,Collator,IntlAPI,Language,DefaultLocale,Currency,TranslatePipe,LocaleDatePipe,LocaleDecimalPipe,LocalePercentPipe,LocaleCurrencyPipe,BaseDirective,TranslateDirective,LocaleDateDirective,LocaleDecimalDirective,LocalePercentDirective,LocaleCurrencyDirective,LocaleNumberValidatorDirective,validateLocaleNumber,TranslationModule,LocalizationModule,LocaleValidationModule} from './src/angular-l10n';\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { DecimalCode } from '../models/validation/decimal-code';\r\nimport { LocaleValidation } from '../services/locale-validation';\r\nimport { LocaleNumberValidatorDirective } from '../directives/locale-number-validator.directive';\n/**\n * Provides dependencies & directives for locale validation.\n */\nexport class LocaleValidationModule {\n/**\n * Use in AppModule: new instance of LocaleValidation.\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: LocaleValidationModule,\r\n            providers: [DecimalCode, LocaleValidation]\r\n        };\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [\r\n        LocaleNumberValidatorDirective\r\n    ],\r\n    exports: [\r\n        LocaleNumberValidatorDirective\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleValidationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleValidationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleValidationModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { TranslationModule } from './translation.module';\r\nimport { LocaleConfig } from '../models/localization/locale-config';\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleStorage, BrowserStorage } from '../services/locale-storage';\r\nimport { TranslationConfig } from '../models/translation/translation-config';\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { TranslationProvider, HttpTranslationProvider } from '../services/translation-provider';\r\nimport { TranslationHandler, DefaultTranslationHandler } from '../services/translation-handler';\r\nimport { LocaleDatePipe } from '../pipes/locale-date.pipe';\r\nimport { LocaleDecimalPipe, LocalePercentPipe, LocaleCurrencyPipe } from '../pipes/locale-number.pipe';\r\nimport { LocaleDateDirective } from '../directives/locale-date.directive';\r\nimport {\r\n    LocaleDecimalDirective,\r\n    LocalePercentDirective,\r\n    LocaleCurrencyDirective\r\n} from '../directives/locale-number.directive';\r\nimport { Token } from '../models/types';\n/**\n * Provides dependencies, pipes & directives for translating messages, dates & numbers.\n */\nexport class LocalizationModule {\n/**\n * Use in AppModule: new instances of LocaleService & TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: LocalizationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                LocaleConfig,\r\n                LocaleService,\r\n                {\r\n                    provide: LocaleStorage,\r\n                    useClass: token.localeStorage || BrowserStorage\r\n                },\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * Use in feature modules with lazy loading: new instance of TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forChild(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: LocalizationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * @param {?} injector\n */\nconstructor(private injector: InjectorRef) {\r\n        // Creates the instance of the InjectorRef, so that module dependencies are available.\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [\r\n        LocaleDatePipe,\r\n        LocaleDecimalPipe,\r\n        LocalePercentPipe,\r\n        LocaleCurrencyPipe,\r\n        LocaleDateDirective,\r\n        LocaleDecimalDirective,\r\n        LocalePercentDirective,\r\n        LocaleCurrencyDirective\r\n    ],\r\n    imports: [\r\n        TranslationModule\r\n    ],\r\n    exports: [\r\n        TranslationModule,\r\n        LocaleDatePipe,\r\n        LocaleDecimalPipe,\r\n        LocalePercentPipe,\r\n        LocaleCurrencyPipe,\r\n        LocaleDateDirective,\r\n        LocaleDecimalDirective,\r\n        LocalePercentDirective,\r\n        LocaleCurrencyDirective\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InjectorRef, },\n];\n}\n\nfunction LocalizationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalizationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalizationModule.ctorParameters;\n/** @type {?} */\nLocalizationModule.prototype.injector;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { LocaleConfig } from '../models/localization/locale-config';\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { LocaleStorage, BrowserStorage } from '../services/locale-storage';\r\nimport { TranslationConfig } from '../models/translation/translation-config';\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { TranslationProvider, HttpTranslationProvider } from '../services/translation-provider';\r\nimport { TranslationHandler, DefaultTranslationHandler } from '../services/translation-handler';\r\nimport { TranslatePipe } from '../pipes/translate.pipe';\r\nimport { TranslateDirective } from '../directives/translate.directive';\r\nimport { Token } from '../models/types';\n/**\n * Provides dependencies, pipes & directives for translating messages.\n */\nexport class TranslationModule {\n/**\n * Use in AppModule: new instances of LocaleService & TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: TranslationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                LocaleConfig,\r\n                LocaleService,\r\n                {\r\n                    provide: LocaleStorage,\r\n                    useClass: token.localeStorage || BrowserStorage\r\n                },\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * Use in feature modules with lazy loading: new instance of TranslationService.\n * @param {?=} token\n * @return {?}\n */\npublic static forChild(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: TranslationModule,\r\n            providers: [\r\n                InjectorRef,\r\n                TranslationConfig,\r\n                TranslationService,\r\n                {\r\n                    provide: TranslationProvider,\r\n                    useClass: token.translationProvider || HttpTranslationProvider\r\n                },\r\n                {\r\n                    provide: TranslationHandler,\r\n                    useClass: token.translationHandler || DefaultTranslationHandler\r\n                }\r\n            ]\r\n        };\r\n    }\n/**\n * @param {?} injector\n */\nconstructor(private injector: InjectorRef) {\r\n        // Creates the instance of the InjectorRef, so that module dependencies are available.\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [\r\n        TranslatePipe,\r\n        TranslateDirective\r\n    ],\r\n    exports: [\r\n        TranslatePipe,\r\n        TranslateDirective\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InjectorRef, },\n];\n}\n\nfunction TranslationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationModule.ctorParameters;\n/** @type {?} */\nTranslationModule.prototype.injector;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, FormControl, Validator } from '@angular/forms';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { DecimalCode } from '../models/validation/decimal-code';\r\nimport { InjectorRef } from '../models/injector-ref';\n/**\n * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.\r\\@param digits The format of the number\r\\@param MIN_VALUE The minimum value for the number\r\\@param MAX_VALUE The maximum value for the number\r\\@return An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid\n * @param {?} digits\n * @param {?=} MIN_VALUE\n * @param {?=} MAX_VALUE\n * @return {?}\n */\nexport function validateLocaleNumber(\r\n    digits: string,\r\n    MIN_VALUE: number = Number.MIN_VALUE,\r\n    MAX_VALUE: number = Number.MAX_VALUE\r\n): Function {\r\n\r\n    const /** @type {?} */ locale: LocaleService = InjectorRef.get(LocaleService);\r\n    const /** @type {?} */ decimalCode: DecimalCode = InjectorRef.get(DecimalCode);\r\n\r\n    let /** @type {?} */ defaultLocale: string;\r\n    let /** @type {?} */ NUMBER_REGEXP: RegExp;\r\n\r\n    return (formControl: FormControl): { [key: string]: any } | null => {\r\n        if (formControl.value == null || formControl.value == \"\") return null;\r\n\r\n        if (defaultLocale != locale.getDefaultLocale()) {\r\n            NUMBER_REGEXP = decimalCode.getRegExp(digits);\r\n            defaultLocale = locale.getDefaultLocale();\r\n        }\r\n\r\n        if (NUMBER_REGEXP.test(formControl.value)) {\r\n            const /** @type {?} */ parsedValue: number = decimalCode.parse(formControl.value);\r\n            if (parsedValue != null && parsedValue < MIN_VALUE) {\r\n                return {\r\n                    minValue: {\r\n                        valid: false\r\n                    }\r\n                };\r\n            } else if (parsedValue != null && parsedValue > MAX_VALUE) {\r\n                return {\r\n                    maxValue: {\r\n                        valid: false\r\n                    }\r\n                };\r\n            }\r\n            return null; // The number is valid.\r\n        } else {\r\n            return {\r\n                format: {\r\n                    valid: false\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n}\nexport class LocaleNumberValidatorDirective implements Validator, OnInit {\n/**\n * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.\n * @param {?} digits\n * @return {?}\n */\nset l10nValidateNumber(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset validateLocaleNumber(digits: string) {\r\n        this.digits = digits;\r\n    }\npublic minValue: number;\npublic maxValue: number;\nprivate digits: string;\nprivate readonly MIN_VALUE: number = Number.MIN_VALUE;\nprivate readonly MAX_VALUE: number = Number.MAX_VALUE;\nprivate validator: Function;\n/**\n * @return {?}\n */\npublic ngOnInit(): void {\r\n        this.validator = validateLocaleNumber(\r\n            this.digits,\r\n            this.minValue || this.MIN_VALUE,\r\n            this.maxValue || this.MAX_VALUE\r\n        );\r\n    }\n/**\n * @param {?} formControl\n * @return {?}\n */\npublic validate(formControl: FormControl): Function {\r\n        return this.validator(formControl);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nValidateNumber][ngModel],[l10nValidateNumber][formControl], \\\r\n        [validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]',\r\n    providers: [\r\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => LocaleNumberValidatorDirective), multi: true }\r\n    ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nValidateNumber': [{ type: Input },],\n'validateLocaleNumber': [{ type: Input },],\n'minValue': [{ type: Input },],\n'maxValue': [{ type: Input },],\n};\n}\n\nfunction LocaleNumberValidatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleNumberValidatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleNumberValidatorDirective.ctorParameters;\n/** @type {?} */\nLocaleNumberValidatorDirective.propDecorators;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.minValue;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.maxValue;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.digits;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.MIN_VALUE;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.MAX_VALUE;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.validator;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { BaseDirective } from '../models/base-directive';\r\nimport { LocaleDecimalPipe, LocalePercentPipe, LocaleCurrencyPipe } from '../pipes/locale-number.pipe';\nexport class LocaleDecimalDirective extends BaseDirective {\n/**\n * @param {?} digits\n * @return {?}\n */\nset l10nDecimal(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset localeDecimal(digits: string) {\r\n        this.digits = digits;\r\n    }\nprivate digits: string;\nprivate localeDecimalPipe: LocaleDecimalPipe = new LocaleDecimalPipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localeDecimalPipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.digits\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nDecimal],[localeDecimal]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nDecimal': [{ type: Input },],\n'localeDecimal': [{ type: Input },],\n};\n}\n\nfunction LocaleDecimalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDecimalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDecimalDirective.ctorParameters;\n/** @type {?} */\nLocaleDecimalDirective.propDecorators;\n/** @type {?} */\nLocaleDecimalDirective.prototype.digits;\n/** @type {?} */\nLocaleDecimalDirective.prototype.localeDecimalPipe;\n/** @type {?} */\nLocaleDecimalDirective.prototype.locale;\n/** @type {?} */\nLocaleDecimalDirective.prototype.el;\n/** @type {?} */\nLocaleDecimalDirective.prototype.renderer;\n}\n\nexport class LocalePercentDirective extends BaseDirective {\n/**\n * @param {?} digits\n * @return {?}\n */\nset l10nPercent(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset localePercent(digits: string) {\r\n        this.digits = digits;\r\n    }\nprivate digits: string;\nprivate localePercentPipe: LocalePercentPipe = new LocalePercentPipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localePercentPipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.digits\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nPercent],[localePercent]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nPercent': [{ type: Input },],\n'localePercent': [{ type: Input },],\n};\n}\n\nfunction LocalePercentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalePercentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalePercentDirective.ctorParameters;\n/** @type {?} */\nLocalePercentDirective.propDecorators;\n/** @type {?} */\nLocalePercentDirective.prototype.digits;\n/** @type {?} */\nLocalePercentDirective.prototype.localePercentPipe;\n/** @type {?} */\nLocalePercentDirective.prototype.locale;\n/** @type {?} */\nLocalePercentDirective.prototype.el;\n/** @type {?} */\nLocalePercentDirective.prototype.renderer;\n}\n\nexport class LocaleCurrencyDirective extends BaseDirective {\n/**\n * @param {?} digits\n * @return {?}\n */\nset l10nCurrency(digits: string) {\r\n        this.digits = digits;\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\nset localeCurrency(digits: string) {\r\n        this.digits = digits;\r\n    }\npublic symbol: boolean;\nprivate digits: string;\nprivate localeCurrencyPipe: LocaleCurrencyPipe = new LocaleCurrencyPipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n        this.subscriptions.push(this.locale.currencyCodeChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localeCurrencyPipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.locale.getCurrentCurrency(),\r\n            this.symbol,\r\n            this.digits\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nCurrency],[localeCurrency]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nCurrency': [{ type: Input },],\n'localeCurrency': [{ type: Input },],\n'symbol': [{ type: Input },],\n};\n}\n\nfunction LocaleCurrencyDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleCurrencyDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleCurrencyDirective.ctorParameters;\n/** @type {?} */\nLocaleCurrencyDirective.propDecorators;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.symbol;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.digits;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.localeCurrencyPipe;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.locale;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.el;\n/** @type {?} */\nLocaleCurrencyDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { BaseDirective } from '../models/base-directive';\r\nimport { LocaleDatePipe } from '../pipes/locale-date.pipe';\nexport class LocaleDateDirective extends BaseDirective {\n/**\n * @param {?} pattern\n * @return {?}\n */\nset l10nDate(pattern: string) {\r\n        this.pattern = pattern;\r\n    }\n/**\n * @param {?} pattern\n * @return {?}\n */\nset localeDate(pattern: string) {\r\n        this.pattern = pattern;\r\n    }\nprivate pattern: string;\nprivate defaultPattern: string = 'mediumDate';\nprivate localeDatePipe: LocaleDatePipe = new LocaleDatePipe();\n/**\n * @param {?} locale\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected locale: LocaleService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            this.setAttributes(this.getAttributesData());\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.localeDatePipe.transform(\r\n            keys,\r\n            this.locale.getDefaultLocale(),\r\n            this.pattern || this.defaultPattern\r\n        );\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nDate],[localeDate]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nDate': [{ type: Input },],\n'localeDate': [{ type: Input },],\n};\n}\n\nfunction LocaleDateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDateDirective.ctorParameters;\n/** @type {?} */\nLocaleDateDirective.propDecorators;\n/** @type {?} */\nLocaleDateDirective.prototype.pattern;\n/** @type {?} */\nLocaleDateDirective.prototype.defaultPattern;\n/** @type {?} */\nLocaleDateDirective.prototype.localeDatePipe;\n/** @type {?} */\nLocaleDateDirective.prototype.locale;\n/** @type {?} */\nLocaleDateDirective.prototype.el;\n/** @type {?} */\nLocaleDateDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { BaseDirective } from '../models/base-directive';\nexport class TranslateDirective extends BaseDirective {\n/**\n * @param {?} params\n * @return {?}\n */\nset l10nTranslate(params: string) {\r\n        this.params = params;\r\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nset translate(params: string) {\r\n        this.params = params;\r\n    }\nprivate params: string;\n/**\n * @param {?} translation\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected translation: TranslationService, protected el: ElementRef, protected renderer: Renderer2) {\r\n        super(el, renderer);\r\n    }\n/**\n * @return {?}\n */\nprotected setup(): void {\r\n        this.replace();\r\n        this.subscriptions.push(this.translation.translationChanged.subscribe(\r\n            () => { this.replace(); }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected replace(): void {\r\n        this.replaceText();\r\n        this.replaceAttributes();\r\n    }\n/**\n * @return {?}\n */\nprotected replaceText(): void {\r\n        if (!!this.key) {\r\n            this.setText(this.getValues(this.key));\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprotected replaceAttributes(): void {\r\n        if (this.attributes.length > 0) {\r\n            const /** @type {?} */ keys: string[] = this.getAttributesKeys();\r\n            this.setAttributes(this.getValues(keys));\r\n        }\r\n    }\n/**\n * @param {?} keys\n * @return {?}\n */\nprotected getValues(keys: string | string[]): string | any {\r\n        return this.translation.translate(keys, this.params);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[l10nTranslate],[translate]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'l10nTranslate': [{ type: Input },],\n'translate': [{ type: Input },],\n};\n}\n\nfunction TranslateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateDirective.ctorParameters;\n/** @type {?} */\nTranslateDirective.propDecorators;\n/** @type {?} */\nTranslateDirective.prototype.params;\n/** @type {?} */\nTranslateDirective.prototype.translation;\n/** @type {?} */\nTranslateDirective.prototype.el;\n/** @type {?} */\nTranslateDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\r\n    ElementRef,\r\n    Input,\r\n    Renderer2,\r\n    AfterViewInit,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { BFS } from './bfs';\n/**\n * @abstract\n */\nexport abstract class BaseDirective implements AfterViewInit, OnChanges, OnDestroy {\npublic valueAttribute: string;\npublic innerHTMLProperty: string;\r\n\r\n    protected key: string;\r\n    protected attributes: any[] = [];\r\n\r\n    protected subscriptions: ISubscription[] = [];\nprivate element: any;\nprivate renderNode: any;\nprivate nodeValue: string;\nprivate textObserver: MutationObserver;\nprivate readonly TEXT_MUTATION_CONFIG: any = { subtree: true, characterData: true };\nprivate readonly SELECTOR: RegExp = /^l10n-/;\n/**\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected el: ElementRef, protected renderer: Renderer2) { }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\r\n        if (this.el && this.el.nativeElement) {\r\n            this.element = this.el.nativeElement;\r\n            this.renderNode = BFS.getTargetNode(this.element);\r\n            this.getKey();\r\n            this.getAttributes();\r\n            this.addTextListener();\r\n            this.setup();\r\n        }\r\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges): void {\r\n        if (!!this.key) {\r\n            if (this.nodeValue == null || this.nodeValue == \"\") {\r\n                if (!!this.valueAttribute) {\r\n                    this.key = this.valueAttribute;\r\n                } else if (!!this.innerHTMLProperty) {\r\n                    this.key = this.innerHTMLProperty;\r\n                }\r\n            }\r\n            this.replaceText();\r\n        }\r\n        if (this.attributes.length > 0) {\r\n            this.replaceAttributes();\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\r\n        this.removeTextListener();\r\n        this.cancelSubscriptions();\r\n    }\n/**\n * @abstract\n * @return {?}\n */\nsetup() {}\n/**\n * @abstract\n * @return {?}\n */\nreplace() {}\n/**\n * @abstract\n * @return {?}\n */\nreplaceText() {}\n/**\n * @abstract\n * @return {?}\n */\nreplaceAttributes() {}\n/**\n * @return {?}\n */\nprotected getAttributesData(): any {\r\n        const /** @type {?} */ keys: string[] = this.getAttributesKeys();\r\n        const /** @type {?} */ data: any = {};\r\n        for (const /** @type {?} */ key of keys) {\r\n            data[key] = this.getValues(key);\r\n        }\r\n        return data;\r\n    }\n/**\n * @return {?}\n */\nprotected getAttributesKeys(): string[] {\r\n        return this.attributes.map((attr: any) => attr.key);\r\n    }\n/**\n * @abstract\n * @param {?} keys\n * @return {?}\n */\ngetValues(keys: string | string[]) {}\n/**\n * @param {?} value\n * @return {?}\n */\nprotected setText(value: string): void {\r\n        if (!!value) {\r\n            if (!!this.nodeValue && !!this.key) {\r\n                this.removeTextListener();\r\n                this.renderer.setValue(this.renderNode, this.nodeValue.replace(this.key, value));\r\n                this.addTextListener();\r\n            } else if (!!this.valueAttribute) {\r\n                this.renderer.setAttribute(this.element, \"value\", value);\r\n            } else if (!!this.innerHTMLProperty) {\r\n                this.renderer.setProperty(this.element, \"innerHTML\", value);\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprotected setAttributes(data: any): void {\r\n        for (const /** @type {?} */ attr of this.attributes) {\r\n            this.renderer.setAttribute(this.element, attr.name, data[attr.key]);\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate addTextListener(): void {\r\n        if (typeof MutationObserver !== \"undefined\") {\r\n            this.textObserver = new MutationObserver((mutations: MutationRecord[]) => {\r\n                this.renderNode = BFS.getTargetNode(this.element);\r\n                this.getKey();\r\n                this.replaceText();\r\n            });\r\n            this.textObserver.observe(this.renderNode, this.TEXT_MUTATION_CONFIG);\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate removeTextListener(): void {\r\n        if (typeof this.textObserver !== \"undefined\") {\r\n            this.textObserver.disconnect();\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate getText(): string {\r\n        this.nodeValue = this.renderNode != null ? /** @type {?} */(( this.renderNode.nodeValue as string)) : \"\";\r\n        return !!this.nodeValue ? this.nodeValue.trim() : \"\";\r\n    }\n/**\n * @return {?}\n */\nprivate getKey(): void {\r\n        if (this.element.childNodes.length > 0) {\r\n            this.key = this.getText();\r\n        } else if (!!this.valueAttribute) {\r\n            this.key = this.valueAttribute;\r\n        } else if (!!this.innerHTMLProperty) {\r\n            this.key = this.innerHTMLProperty;\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate getAttributes(): void {\r\n        if (this.element.attributes) {\r\n            for (const /** @type {?} */ attr of this.element.attributes) {\r\n                if (this.SELECTOR.test(attr.name)) {\r\n                    const /** @type {?} */ name: string = attr.name.substr(5);\r\n                    for (const /** @type {?} */ targetAttr of this.element.attributes) {\r\n                        if (new RegExp(\"^\" + name + \"$\").test(targetAttr.name)) {\r\n                            this.attributes.push({ name: name, key: targetAttr.value });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate cancelSubscriptions(): void {\r\n        this.subscriptions.forEach((subscription: ISubscription) => {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'valueAttribute': [{ type: Input, args: ['value', ] },],\n'innerHTMLProperty': [{ type: Input, args: ['innerHTML', ] },],\n};\n}\n\nfunction BaseDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseDirective.propDecorators;\n/** @type {?} */\nBaseDirective.prototype.valueAttribute;\n/** @type {?} */\nBaseDirective.prototype.innerHTMLProperty;\n/** @type {?} */\nBaseDirective.prototype.key;\n/** @type {?} */\nBaseDirective.prototype.attributes;\n/** @type {?} */\nBaseDirective.prototype.subscriptions;\n/** @type {?} */\nBaseDirective.prototype.element;\n/** @type {?} */\nBaseDirective.prototype.renderNode;\n/** @type {?} */\nBaseDirective.prototype.nodeValue;\n/** @type {?} */\nBaseDirective.prototype.textObserver;\n/** @type {?} */\nBaseDirective.prototype.TEXT_MUTATION_CONFIG;\n/** @type {?} */\nBaseDirective.prototype.SELECTOR;\n/** @type {?} */\nBaseDirective.prototype.el;\n/** @type {?} */\nBaseDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Breadth First Search (BFS) algorithm for traversing & searching tree data structure of DOM\rexplores the neighbor nodes first, before moving to the next level neighbors.\rTime complexity: between O(1) and O(|V|^2).\n */\nexport class BFS {\nprivate static readonly SELECTOR: RegExp = /^l10n|translate|locale/;\nprivate static readonly MAX_DEPTH: number = 10;\n/**\n * Target node is a non empty text node.\n * @param {?} rootNode\n * @return {?}\n */\npublic static getTargetNode(rootNode: any): any {\r\n        return this.walk(rootNode);\r\n    }\n/**\n * @param {?} rootNode\n * @return {?}\n */\nprivate static walk(rootNode: any): any {\r\n        const /** @type {?} */ queue: any[] = [];\r\n\r\n        let /** @type {?} */ iNode: any;\r\n        let /** @type {?} */ depth: number = 0;\r\n        let /** @type {?} */ nodeToDepthIncrease: number = 1;\r\n\r\n        queue.push(rootNode);\r\n        while (queue.length > 0 && depth <= this.MAX_DEPTH) {\r\n            iNode = queue.shift();\r\n            if (this.isTargetNode(iNode)) {\r\n                return iNode;\r\n            }\r\n            if (depth < this.MAX_DEPTH && iNode.childNodes != null) {\r\n                for (const /** @type {?} */ child of iNode.childNodes) {\r\n                    if (this.isValidNode(child)) {\r\n                        queue.push(child);\r\n                    }\r\n                }\r\n            }\r\n            if (--nodeToDepthIncrease == 0) {\r\n                depth++;\r\n                nodeToDepthIncrease = queue.length;\r\n            }\r\n        }\r\n        return rootNode;\r\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate static isTargetNode(node: any): boolean {\r\n        return typeof node !== \"undefined\" &&\r\n            node.nodeType == 3 &&\r\n            node.nodeValue != null &&\r\n            node.nodeValue.trim() != \"\";\r\n    }\n/**\n * A valid node is not marked for translation.\n * @param {?} node\n * @return {?}\n */\nprivate static isValidNode(node: any): boolean {\r\n        if (typeof node !== \"undefined\" && node.nodeType == 1 && node.attributes) {\r\n            for (const /** @type {?} */ attr of node.attributes) {\r\n                if (this.SELECTOR.test(attr.name)) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\n\nfunction BFS_tsickle_Closure_declarations() {\n/** @type {?} */\nBFS.SELECTOR;\n/** @type {?} */\nBFS.MAX_DEPTH;\n}\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';\r\n\r\nimport { IntlAPI } from '../services/intl-api';\nexport class LocaleDecimalPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits?: string): string | null {\r\n        if (typeof defaultLocale === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localeDecimal: DecimalPipe = new DecimalPipe(defaultLocale);\r\n            return localeDecimal.transform(value, digits);\r\n        }\r\n        // Returns the number without localization.\r\n        return value;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeDecimal',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDecimalPipe.ctorParameters;\n}\n\nexport class LocalePercentPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits?: string): string | null {\r\n        if (typeof defaultLocale === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localePercent: PercentPipe = new PercentPipe(defaultLocale);\r\n            return localePercent.transform(value, digits);\r\n        }\r\n        // Returns the number without localization.\r\n        return value;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localePercent',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalePercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalePercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalePercentPipe.ctorParameters;\n}\n\nexport class LocaleCurrencyPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?} currency\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\npublic transform(\r\n        value: any,\r\n        defaultLocale: string,\r\n        currency: string,\r\n        symbolDisplay: boolean = false,\r\n        digits?: string\r\n    ): string | null {\r\n        if (typeof defaultLocale === \"undefined\" || typeof currency === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localeCurrency: CurrencyPipe = new CurrencyPipe(defaultLocale);\r\n            return localeCurrency.transform(value, currency, symbolDisplay, digits);\r\n        }\r\n        // Returns the number & currency without localization.\r\n        return value + \" \" + currency;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeCurrency',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleCurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleCurrencyPipe.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\nimport { IntlAPI } from '../services/intl-api';\nexport class LocaleDatePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} pattern\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, pattern: string = 'mediumDate'): string | null {\r\n        if (typeof defaultLocale === \"undefined\") return null;\r\n\r\n        if (IntlAPI.hasDateTimeFormat()) {\r\n            const /** @type {?} */ localeDate: DatePipe = new DatePipe(defaultLocale);\r\n            return localeDate.transform(value, pattern);\r\n        }\r\n        // Returns the date without localization.\r\n        return value;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'localeDate',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDatePipe.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { TranslationService } from '../services/translation.service';\nexport class TranslatePipe implements PipeTransform {\n/**\n * @param {?} translation\n */\nconstructor(protected translation: TranslationService) { }\n/**\n * @param {?} key\n * @param {?} lang\n * @param {?=} args\n * @return {?}\n */\npublic transform(key: string, lang: string, args?: any): string {\r\n        return this.translation.translate(key, args, lang);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'translate',\r\n    pure: true\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n];\n}\n\nfunction TranslatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslatePipe.ctorParameters;\n/** @type {?} */\nTranslatePipe.prototype.translation;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { PropertyDecorator } from '../models/types';\n/**\n * Property decorator for components to provide the parameter to the localeCurrency pipe.\n * @return {?}\n */\nexport function Currency(): PropertyDecorator {\n/**\n * @param {?} target\n * @param {?=} propertyKey\n * @return {?}\n */\nfunction DecoratorFactory(target: any, propertyKey?: string): void {\r\n        let /** @type {?} */ subscription: ISubscription;\r\n\r\n        const /** @type {?} */ targetNgOnInit: Function = target.ngOnInit;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnInit(this: any): void {\r\n            const /** @type {?} */ locale: LocaleService = InjectorRef.get(LocaleService);\r\n\r\n            if (typeof propertyKey !== \"undefined\") {\r\n                this[propertyKey] = locale.getCurrentCurrency();\r\n                // When the currency changes, subscribes to the event & updates currency property.\r\n                subscription = locale.currencyCodeChanged.subscribe(\r\n                    (currency: string) => {\r\n                        this[propertyKey] = currency;\r\n                    });\r\n            }\r\n\r\n            if (targetNgOnInit) {\r\n                targetNgOnInit.apply(this);\r\n            }\r\n        }\r\n        target.ngOnInit = ngOnInit;\r\n\r\n        const /** @type {?} */ targetNgOnDestroy: Function = target.ngOnDestroy;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnDestroy(this: any): void {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n\r\n            if (targetNgOnDestroy) {\r\n                targetNgOnDestroy.apply(this);\r\n            }\r\n        }\r\n        target.ngOnDestroy = ngOnDestroy;\r\n\r\n        if (typeof propertyKey !== \"undefined\") {\r\n            Object.defineProperty(target, propertyKey, {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n        }\r\n    }\r\n\r\n    return DecoratorFactory;\r\n\r\n}\r\n","import { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { LocaleService } from '../services/locale.service';\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { PropertyDecorator } from '../models/types';\n/**\n * Property decorator for components to provide the parameter\rto localeDecimal, localePercent & localeCurrency pipes.\n * @return {?}\n */\nexport function DefaultLocale(): PropertyDecorator {\n/**\n * @param {?} target\n * @param {?=} propertyKey\n * @return {?}\n */\nfunction DecoratorFactory(target: any, propertyKey?: string): void {\r\n        let /** @type {?} */ subscription: ISubscription;\r\n\r\n        const /** @type {?} */ targetNgOnInit: Function = target.ngOnInit;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnInit(this: any): void {\r\n            const /** @type {?} */ locale: LocaleService = InjectorRef.get(LocaleService);\r\n\r\n            if (typeof propertyKey !== \"undefined\") {\r\n                this[propertyKey] = locale.getDefaultLocale();\r\n                // When the default locale changes, subscribes to the event & updates defaultLocale property.\r\n                subscription = locale.defaultLocaleChanged.subscribe(\r\n                    (defaultLocale: string) => {\r\n                        this[propertyKey] = defaultLocale;\r\n                    });\r\n            }\r\n\r\n            if (targetNgOnInit) {\r\n                targetNgOnInit.apply(this);\r\n            }\r\n        }\r\n        target.ngOnInit = ngOnInit;\r\n\r\n        const /** @type {?} */ targetNgOnDestroy: Function = target.ngOnDestroy;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnDestroy(this: any): void {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n\r\n            if (targetNgOnDestroy) {\r\n                targetNgOnDestroy.apply(this);\r\n            }\r\n        }\r\n        target.ngOnDestroy = ngOnDestroy;\r\n\r\n        if (typeof propertyKey !== \"undefined\") {\r\n            Object.defineProperty(target, propertyKey, {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n        }\r\n    }\r\n\r\n    return DecoratorFactory;\r\n\r\n}\r\n","import { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { TranslationService } from '../services/translation.service';\r\nimport { InjectorRef } from '../models/injector-ref';\r\nimport { PropertyDecorator } from '../models/types';\n/**\n * Property decorator for components to provide the parameter to the translate pipe.\n * @return {?}\n */\nexport function Language(): PropertyDecorator {\n/**\n * @param {?} target\n * @param {?=} propertyKey\n * @return {?}\n */\nfunction DecoratorFactory(target: any, propertyKey?: string): void {\r\n        let /** @type {?} */ subscription: ISubscription;\r\n\r\n        const /** @type {?} */ targetNgOnInit: Function = target.ngOnInit;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnInit(this: any): void {\r\n            const /** @type {?} */ translation: TranslationService = InjectorRef.get(TranslationService);\r\n\r\n            if (typeof propertyKey !== \"undefined\") {\r\n                this[propertyKey] = translation.getLanguage();\r\n                // When the language changes, subscribes to the event & updates language property.\r\n                subscription = translation.translationChanged.subscribe(\r\n                    (language: string) => {\r\n                        this[propertyKey] = language;\r\n                    });\r\n            }\r\n\r\n            if (targetNgOnInit) {\r\n                targetNgOnInit.apply(this);\r\n            }\r\n        }\r\n        target.ngOnInit = ngOnInit;\r\n\r\n        const /** @type {?} */ targetNgOnDestroy: Function = target.ngOnDestroy;\n/**\n * @this {?}\n * @return {?}\n */\nfunction ngOnDestroy(this: any): void {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n\r\n            if (targetNgOnDestroy) {\r\n                targetNgOnDestroy.apply(this);\r\n            }\r\n        }\r\n        target.ngOnDestroy = ngOnDestroy;\r\n\r\n        if (typeof propertyKey !== \"undefined\") {\r\n            Object.defineProperty(target, propertyKey, {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n        }\r\n    }\r\n\r\n    return DecoratorFactory;\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LocaleService } from './locale.service';\r\nimport { TranslationService } from './translation.service';\r\nimport { IntlAPI } from './intl-api';\r\n\r\n/**\r\n * Intl.Collator APIs.\r\n */\r\nexport interface ICollator {\r\n\r\n    /**\r\n     * Compares two keys by the value of translation according to the current language.\r\n     * @param key1, key2 The keys of the values to compare\r\n     * @param extension Unicode extension key, e.g. 'co-phonebk'\r\n     * @param options Default is { usage: 'sort', sensitivity: 'variant' }\r\n     * @return A negative value if the value of translation of key1 comes before the value of translation of key2;\r\n     *         a positive value if key1 comes after key2;\r\n     *         0 if they are considered equal or Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    compare(\r\n        key1: string,\r\n        key2: string,\r\n        extension?: string,\r\n        options?: any\r\n    ): number;\r\n\r\n    /**\r\n     * Sorts an array of objects or an array of arrays according to the current language.\r\n     * @param list The array to be sorted\r\n     * @param keyName The column that contains the keys of the values to be ordered\r\n     * @param order 'asc' or 'desc'. The default value is 'asc'\r\n     * @param extension Unicode extension key, e.g. 'co-phonebk'\r\n     * @param options Default is { usage: 'sort', sensitivity: 'variant' }\r\n     * @return The same sorted list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    sort(\r\n        list: any[],\r\n        keyName: any,\r\n        order?: string,\r\n        extension?: string,\r\n        options?: any\r\n    ): any[];\r\n\r\n    /**\r\n     * Sorts asynchronously an array of objects or an array of arrays according to the current language.\r\n     * @param list The array to be sorted\r\n     * @param keyName The column that contains the keys of the values to be ordered\r\n     * @param order 'asc' or 'desc'. The default value is 'asc'\r\n     * @param extension Unicode extension key, e.g. 'co-phonebk'\r\n     * @param options Default is { usage: 'sort', sensitivity: 'variant' }\r\n     * @return An observable of the sorted list or of the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    sortAsync(\r\n        list: any[],\r\n        keyName: any,\r\n        order?: string,\r\n        extension?: string,\r\n        options?: any\r\n    ): Observable<any[]>;\r\n\r\n    /**\r\n     * Matches a string into an array of objects or an array of arrays\r\n     * according to the current language.\r\n     * @param s The string to search\r\n     * @param list The array in which to search\r\n     * @param keyNames An array that contains the columns to look for\r\n     * @param options Default is { usage: 'search' }\r\n     * @return A filtered list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    search(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options?: any\r\n    ): any[];\r\n\r\n    /**\r\n     * Matches asynchronously a string into an array of objects or an array of arrays\r\n     * according to the current language.\r\n     * @param s The string to search\r\n     * @param list The array in which to search\r\n     * @param keyNames An array that contains the columns to look for\r\n     * @param options Default is { usage: 'search' }\r\n     * @return An observable of the filtered list or the same list if Intl.Collator is not supported\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\r\n     */\r\n    searchAsync(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options?: any\r\n    ): Observable<any[]>;\r\n\r\n}\nexport class Collator implements ICollator {\n/**\n * @param {?} locale\n * @param {?} translation\n */\nconstructor(private locale: LocaleService,\nprivate translation: TranslationService) { }\n/**\n * @param {?} key1\n * @param {?} key2\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic compare(\r\n        key1: string,\r\n        key2: string,\r\n        extension?: string,\r\n        options: any = { usage: 'sort', sensitivity: 'variant' }\r\n    ): number {\r\n        if (!IntlAPI.hasCollator()) {\r\n            return 0;\r\n        }\r\n\r\n        const /** @type {?} */ value1: string = this.translation.translate(key1);\r\n        const /** @type {?} */ value2: string = this.translation.translate(key2);\r\n\r\n        const /** @type {?} */ locale: string = this.addExtension(\r\n            this.locale.getCurrentLocale(),\r\n            extension\r\n        );\r\n        return new Intl.Collator(locale, options).compare(value1, value2);\r\n    }\n/**\n * @param {?} list\n * @param {?} keyName\n * @param {?=} order\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic sort(\r\n        list: any[],\r\n        keyName: any,\r\n        order: string = \"asc\",\r\n        extension?: string,\r\n        options: any = { usage: 'sort', sensitivity: 'variant' }\r\n    ): any[] {\r\n        if (!list || !keyName || !IntlAPI.hasCollator()) {\r\n            return list;\r\n        }\r\n\r\n        list.sort((key1: any, key2: any) => {\r\n            return this.compare(key1[keyName], key2[keyName], extension, options);\r\n        });\r\n\r\n        if (order == \"desc\") {\r\n            list.reverse();\r\n        }\r\n        return list;\r\n    }\n/**\n * @param {?} list\n * @param {?} keyName\n * @param {?=} order\n * @param {?=} extension\n * @param {?=} options\n * @return {?}\n */\npublic sortAsync(\r\n        list: any[],\r\n        keyName: any,\r\n        order?: string,\r\n        extension?: string,\r\n        options: any = { usage: 'sort', sensitivity: 'variant' }\r\n    ): Observable<any[]> {\r\n        return Observable.create((observer: Observer<any[]>) => {\r\n            observer.next(this.sort(list, keyName, order, extension, options));\r\n            observer.complete();\r\n        });\r\n    }\n/**\n * @param {?} s\n * @param {?} list\n * @param {?} keyNames\n * @param {?=} options\n * @return {?}\n */\npublic search(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options: any = { usage: 'search' }\r\n    ): any[] {\r\n        if (!list || !keyNames || s == \"\" || s == null || !IntlAPI.hasCollator()) {\r\n            return list;\r\n        }\r\n\r\n        const /** @type {?} */ locale: string = this.locale.getCurrentLocale();\r\n        const /** @type {?} */ collator: Intl.Collator = new Intl.Collator(locale, options);\r\n\r\n        const /** @type {?} */ matches: any[] = list.filter((key: any) => {\r\n            let /** @type {?} */ found: boolean = false;\r\n            for (let /** @type {?} */ i: number = 0; i < keyNames.length; i++) {\r\n                if (this.match(key[keyNames[i]], s, collator)) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            return found;\r\n        });\r\n        return matches;\r\n    }\n/**\n * @param {?} s\n * @param {?} list\n * @param {?} keyNames\n * @param {?=} options\n * @return {?}\n */\npublic searchAsync(\r\n        s: string,\r\n        list: any[],\r\n        keyNames: any[],\r\n        options: any = { usage: 'search' }\r\n    ): Observable<any[]> {\r\n        return Observable.create((observer: Observer<any[]>) => {\r\n            observer.next(this.search(s, list, keyNames, options));\r\n            observer.complete();\r\n        });\r\n    }\n/**\n * @param {?} locale\n * @param {?=} extension\n * @return {?}\n */\nprivate addExtension(locale: string, extension?: string): string {\r\n        if (!!extension) {\r\n            locale = locale + \"-u-\" + extension;\r\n        }\r\n        return locale;\r\n    }\n/**\n * @param {?} key\n * @param {?} s\n * @param {?} collator\n * @return {?}\n */\nprivate match(key: string, s: string, collator: Intl.Collator): boolean {\r\n        const /** @type {?} */ value: string = this.translation.translate(key);\r\n        const /** @type {?} */ valueLength: number = value.length;\r\n        const /** @type {?} */ sLength: number = s.length;\r\n\r\n        if (sLength > valueLength) {\r\n            return false;\r\n        }\r\n        if (sLength == valueLength) {\r\n            return collator.compare(value, s) == 0;\r\n        }\r\n\r\n        let /** @type {?} */ found: boolean = false;\r\n        for (let /** @type {?} */ i: number = 0; i < valueLength - (sLength - 1); i++) {\r\n            const /** @type {?} */ str: string = value.substr(i, sLength);\r\n            if (collator.compare(str, s) == 0) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: TranslationService, },\n];\n}\n\nfunction Collator_tsickle_Closure_declarations() {\n/** @type {?} */\nCollator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCollator.ctorParameters;\n/** @type {?} */\nCollator.prototype.locale;\n/** @type {?} */\nCollator.prototype.translation;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DecimalCode } from '../models/validation/decimal-code';\r\n\r\n/**\r\n * Provides the methods to convert strings according to default locale.\r\n */\r\nexport interface ILocaleValidation {\r\n\r\n    /**\r\n     * Converts a string to a number according to default locale.\r\n     * If the string cannot be converted to a number, returns NaN.\r\n     */\r\n    parseNumber(s: string): number | null;\r\n\r\n}\nexport class LocaleValidation implements ILocaleValidation {\n/**\n * @param {?} decimalCode\n */\nconstructor(private decimalCode: DecimalCode) { }\n/**\n * @param {?} s\n * @return {?}\n */\npublic parseNumber(s: string): number | null {\r\n        if (s == \"\") {\r\n            return null;\r\n        }\r\n        return this.decimalCode.parse(s);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DecimalCode, },\n];\n}\n\nfunction LocaleValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleValidation.ctorParameters;\n/** @type {?} */\nLocaleValidation.prototype.decimalCode;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NumberCode } from './number-code';\r\nimport { LocaleService } from '../../services/locale.service';\r\nimport { IntlAPI } from '../../services/intl-api';\r\nimport { Decimal } from '../types';\nexport class DecimalCode extends NumberCode {\n/**\n * @return {?}\n */\nprotected get decimalCodes(): Decimal {\r\n        let /** @type {?} */ decimalCodes: Decimal = {\r\n            minusSign: this.toUnicode(\"-\"),\r\n            decimalSeparator: this.toUnicode(\".\"),\r\n            thousandSeparator: this.toUnicode(\",\")\r\n        };\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ value: number = -1000.9; // Reference value.\r\n            const /** @type {?} */ localeValue: string = new Intl.NumberFormat(this.locale.getDefaultLocale()).format(value);\r\n\r\n            const /** @type {?} */ unicodeChars: string[] = [];\r\n            for (let /** @type {?} */ i: number = 0; i <= 7; i++) {\r\n                unicodeChars.push(this.toUnicode(localeValue.charAt(i)));\r\n            }\r\n\r\n            // Right to left:\r\n            // checks Unicode characters 'RIGHT-TO-LEFT MARK' (U+200F) & 'Arabic Letter Mark' (U+061C),\r\n            // or the reverse order.\r\n            // Left to right:\r\n            // checks Unicode character 'LEFT-TO-RIGHT MARK' (U+200E).\r\n            if (unicodeChars[0] == \"\\\\u200F\" || unicodeChars[0] == \"\\\\u061C\") {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[1],\r\n                    decimalSeparator: unicodeChars[7],\r\n                    thousandSeparator: unicodeChars[3]\r\n                };\r\n            } else if (unicodeChars[0] == this.toUnicode(\r\n                new Intl.NumberFormat(this.locale.getDefaultLocale()).format(1))\r\n            ) {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[7],\r\n                    decimalSeparator: unicodeChars[5],\r\n                    thousandSeparator: unicodeChars[1]\r\n                };\r\n            } else if (unicodeChars[0] == \"\\\\u200E\") {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[1],\r\n                    decimalSeparator: unicodeChars[7],\r\n                    thousandSeparator: unicodeChars[3]\r\n                };\r\n            } else {\r\n                decimalCodes = {\r\n                    minusSign: unicodeChars[0],\r\n                    decimalSeparator: unicodeChars[6],\r\n                    thousandSeparator: unicodeChars[2]\r\n                };\r\n            }\r\n        }\r\n        return decimalCodes;\r\n    }\n/**\n * @param {?} locale\n */\nconstructor(protected locale: LocaleService) {\r\n        super(locale);\r\n    }\n/**\n * @param {?} s\n * @return {?}\n */\npublic parse(s: string): number {\r\n        let /** @type {?} */ value: string = \"\";\r\n\r\n        const /** @type {?} */ decimalCodes: Decimal = this.decimalCodes;\r\n\r\n        const /** @type {?} */ characters: string[] = s.split(\"\");\r\n        for (const /** @type {?} */ char of characters) {\r\n            const /** @type {?} */ charCode: string = this.toUnicode(char);\r\n            const /** @type {?} */ index: number = this.numberCodes.indexOf(charCode);\r\n            if (index != -1) {\r\n                value += index;\r\n            } else if (charCode == decimalCodes.minusSign) {\r\n                value += \"-\";\r\n            } else if (charCode == decimalCodes.decimalSeparator) {\r\n                value += \".\";\r\n            } else if (charCode == decimalCodes.thousandSeparator) {\r\n                continue;\r\n            } else { return NaN; }\r\n        }\r\n        return parseFloat(value);\r\n    }\n/**\n * @param {?} digits\n * @return {?}\n */\npublic getRegExp(digits: string): RegExp {\r\n        let /** @type {?} */ minInt: number = 1;\r\n        let /** @type {?} */ minFraction: number = 0;\r\n        let /** @type {?} */ maxFraction: number = 3;\r\n\r\n        if (!!digits) {\r\n            const /** @type {?} */ NUMBER_FORMAT_REGEXP: RegExp = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/;\r\n            const /** @type {?} */ parts: RegExpMatchArray | null = digits.match(NUMBER_FORMAT_REGEXP);\r\n            if (parts != null) {\r\n                if (parts[1] != null) {  // Min integer digits.\r\n                    minInt = parseInt(parts[1]);\r\n                }\r\n                if (parts[3] != null) {  // Min fraction digits.\r\n                    minFraction = parseInt(parts[3]);\r\n                }\r\n                if (parts[5] != null) {  // Max fraction digits.\r\n                    maxFraction = parseInt(parts[5]);\r\n                }\r\n            }\r\n        }\r\n\r\n        const /** @type {?} */ minusSign: string = this.decimalCodes.minusSign;\r\n        const /** @type {?} */ zero: string = this.numberCodes[0];\r\n        const /** @type {?} */ decimalSeparator: string = this.decimalCodes.decimalSeparator;\r\n        const /** @type {?} */ thousandSeparator: string = this.decimalCodes.thousandSeparator;\r\n        const /** @type {?} */ nine: string = this.numberCodes[9];\r\n\r\n        // Pattern for 1.2-2 digits: /^-?[0-9,]{1,}\\.[0-9]{2,2}$/\r\n        // Unicode pattern = \"^\\u002d?[\\u0030-\\u0039,\\u002c]{1,}\\\\u002e[\\u0030-\\u0039]{2,2}$\"\r\n        let /** @type {?} */ pattern: string;\r\n        if (minFraction > 0 && maxFraction > 0) {\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine + thousandSeparator\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n        } else if (minFraction == 0 && maxFraction > 0) {\r\n            // Decimal separator is optional.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine + thousandSeparator\r\n                + \"]{\" + minInt + \",}\\\\\"\r\n                + decimalSeparator\r\n                + \"?[\" + zero + \"-\" + nine\r\n                + \"]{\" + minFraction + \",\" + maxFraction\r\n                + \"}$\";\r\n        } else {\r\n            // Integer number.\r\n            pattern = \"^\"\r\n                + minusSign\r\n                + \"?[\" + zero + \"-\" + nine + thousandSeparator\r\n                + \"]{\" + minInt + \",}$\";\r\n        }\r\n        pattern = this.toChar(pattern);\r\n        const /** @type {?} */ regExp: RegExp = new RegExp(pattern);\r\n        return regExp;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n];\n}\n\nfunction DecimalCode_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalCode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalCode.ctorParameters;\n/** @type {?} */\nDecimalCode.prototype.locale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { LocaleService } from '../../services/locale.service';\r\nimport { IntlAPI } from '../../services/intl-api';\n/**\n * @abstract\n */\nexport abstract class NumberCode {\n/**\n * @return {?}\n */\nprotected get numberCodes(): string[] {\r\n        const /** @type {?} */ numberCodes: string[] = [];\r\n\r\n        for (let /** @type {?} */ num: number = 0; num <= 9; num++) {\r\n            numberCodes.push(this.toUnicode(num.toString()));\r\n        }\r\n\r\n        if (IntlAPI.hasNumberFormat()) {\r\n            for (let /** @type {?} */ num: number = 0; num <= 9; num++) {\r\n                numberCodes[num] = this.toUnicode(\r\n                    new Intl.NumberFormat(this.locale.getDefaultLocale()).format(num)\r\n                );\r\n            }\r\n        }\r\n        return numberCodes;\r\n    }\n/**\n * @param {?} locale\n */\nconstructor(protected locale: LocaleService) { }\n/**\n * @abstract\n * @param {?} s\n * @return {?}\n */\nparse(s: string) {}\n/**\n * @abstract\n * @param {?} digits\n * @return {?}\n */\ngetRegExp(digits: string) {}\n/**\n * @param {?} pattern\n * @return {?}\n */\nprotected toChar(pattern: string): string {\r\n        return pattern.replace(/\\\\u[\\dA-F]{4}/gi, (match: string) => {\r\n            return String.fromCharCode(parseInt(match.replace(/\\\\u/g, \"\"), 16));\r\n        });\r\n    }\n/**\n * @param {?} c\n * @return {?}\n */\nprotected toUnicode(c: string): string {\r\n        return \"\\\\u\" + this.toHex(c.charCodeAt(0));\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate toHex(value: number): string {\r\n        let /** @type {?} */ hex: string = value.toString(16).toUpperCase();\r\n        // With padding.\r\n        hex = \"0000\".substr(0, 4 - hex.length) + hex;\r\n        return hex;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n];\n}\n\nfunction NumberCode_tsickle_Closure_declarations() {\n/** @type {?} */\nNumberCode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNumberCode.ctorParameters;\n/** @type {?} */\nNumberCode.prototype.locale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { Translation } from './translation';\r\nimport { LocaleService } from './locale.service';\r\nimport { TranslationService } from './translation.service';\r\nimport { InjectorRef } from '../models/injector-ref';\n/**\n * Provides 'lang' to the translate pipe,\r'defaultLocale' & 'currency' to localeDecimal, localePercent & localeCurrency pipes.\n */\nexport class Localization extends Translation {\npublic defaultLocale: string;\npublic currency: string;\n/**\n * @param {?=} locale\n * @param {?=} translation\n * @param {?=} changeDetectorRef\n */\nconstructor(\r\n        protected locale: LocaleService = InjectorRef.get(LocaleService),\r\n        protected translation: TranslationService = InjectorRef.get(TranslationService),\r\n        protected changeDetectorRef?: ChangeDetectorRef\r\n    ) {\r\n        super(translation, changeDetectorRef);\r\n\r\n        this.defaultLocale = this.locale.getDefaultLocale();\r\n        // When the default locale changes, subscribes to the event & updates defaultLocale property.\r\n        this.paramSubscriptions.push(this.locale.defaultLocaleChanged.subscribe(\r\n            (defaultLocale: string) => {\r\n                this.defaultLocale = defaultLocale;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); }\r\n            }\r\n        ));\r\n\r\n        this.currency = this.locale.getCurrentCurrency();\r\n        // When the currency changes, subscribes to the event & updates currency property.\r\n        this.paramSubscriptions.push(this.locale.currencyCodeChanged.subscribe(\r\n            (currency: string) => {\r\n                this.currency = currency;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); }\r\n            }\r\n        ));\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: TranslationService, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction Localization_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalization.ctorParameters;\n/** @type {?} */\nLocalization.prototype.defaultLocale;\n/** @type {?} */\nLocalization.prototype.currency;\n/** @type {?} */\nLocalization.prototype.locale;\n/** @type {?} */\nLocalization.prototype.translation;\n/** @type {?} */\nLocalization.prototype.changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ChangeDetectorRef } from '@angular/core';\r\nimport { ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { TranslationService } from './translation.service';\r\nimport { InjectorRef } from '../models/injector-ref';\n/**\n * Provides 'lang' to the translate pipe.\n */\nexport class Translation {\npublic lang: string;\r\n\r\n    protected paramSubscriptions: ISubscription[] = [];\n/**\n * @param {?=} translation\n * @param {?=} changeDetectorRef\n */\nconstructor(\r\n        protected translation: TranslationService = InjectorRef.get(TranslationService),\r\n        protected changeDetectorRef?: ChangeDetectorRef\r\n    ) {\r\n        this.lang = this.translation.getLanguage();\r\n        // When the language changes, subscribes to the event & updates lang property.\r\n        this.paramSubscriptions.push(this.translation.translationChanged.subscribe(\r\n            (language: string) => {\r\n                this.lang = language;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); }\r\n            }\r\n        ));\r\n    }\n/**\n * @return {?}\n */\nprotected cancelParamSubscriptions(): void {\r\n        this.paramSubscriptions.forEach((subscription: ISubscription) => {\r\n            if (typeof subscription !== \"undefined\") {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction Translation_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslation.ctorParameters;\n/** @type {?} */\nTranslation.prototype.lang;\n/** @type {?} */\nTranslation.prototype.paramSubscriptions;\n/** @type {?} */\nTranslation.prototype.translation;\n/** @type {?} */\nTranslation.prototype.changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/operator/toPromise';\r\nimport'rxjs/add/observable/merge';\r\n\r\nimport { LocaleService } from './locale.service';\r\nimport { IntlAPI } from './intl-api';\r\nimport { ITranslationConfig, TranslationConfig } from '../models/translation/translation-config';\r\nimport { ITranslationConfigAPI, TranslationConfigAPI } from '../models/translation/translation-config-api';\r\nimport { TranslationProvider } from './translation-provider';\r\nimport { TranslationHandler } from './translation-handler';\r\nimport { LoadingMode, ServiceState } from '../models/types';\r\n\r\n/**\r\n * Manages the translation data.\r\n */\r\nexport interface ITranslationService {\r\n\r\n    translationChanged: EventEmitter<string>;\r\n    translationError: EventEmitter<any>;\r\n\r\n    /**\r\n     * Configure the service in the application root module or in a feature module with lazy loading.\r\n     */\r\n    addConfiguration(): ITranslationConfigAPI;\r\n\r\n    getConfiguration(): ITranslationConfig;\r\n\r\n    /**\r\n     * Call this method after the configuration to initialize the service.\r\n     */\r\n    init(): Promise<void>;\r\n\r\n    /**\r\n     * Gets the current language of the service.\r\n     */\r\n    getLanguage(): string;\r\n\r\n    /**\r\n     * Translates a key or an array of keys.\r\n     * @param keys The key or an array of keys to be translated\r\n     * @param args Optional parameters contained in the key\r\n     * @param lang The current language of the service is used by default\r\n     * @return The translated value or an object: {key: value}\r\n     */\r\n    translate(keys: string | string[], args?: any, lang?: string): string | any;\r\n\r\n    translateAsync(keys: string | string[], args?: any, lang?: string): Observable<string | any>;\r\n\r\n}\nexport class TranslationService implements ITranslationService {\npublic translationChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic translationError: EventEmitter<any> = new EventEmitter<any>(true);\nprivate serviceState: ServiceState;\nprivate loadingMode: LoadingMode;\nprivate language: string;\n/**\n * The translation data: {language: {key: value}}.\n */\nprivate translationData: any = {};\n/**\n * @param {?} locale\n * @param {?} configuration\n * @param {?} translationProvider\n * @param {?} translationHandler\n */\nconstructor(\nprivate locale: LocaleService,\nprivate configuration: TranslationConfig,\nprivate translationProvider: TranslationProvider,\nprivate translationHandler: TranslationHandler\r\n    ) {\r\n        this.serviceState = ServiceState.isWaiting;\r\n    }\n/**\n * @return {?}\n */\npublic addConfiguration(): ITranslationConfigAPI {\r\n        return new TranslationConfigAPI(this.configuration);\r\n    }\n/**\n * @return {?}\n */\npublic getConfiguration(): ITranslationConfig {\r\n        return this.configuration;\r\n    }\n/**\n * @return {?}\n */\npublic async init(): Promise<void> {\r\n        // Waiting for LocaleService initialization.\r\n        await this.locale.init();\r\n\r\n        if (this.configuration.providers.length > 0) {\r\n            this.loadingMode = LoadingMode.Async;\r\n        } else {\r\n            this.loadingMode = LoadingMode.Direct;\r\n        }\r\n\r\n        // When the language changes, loads translation data.\r\n        this.locale.loadTranslation.subscribe(\r\n            () => { this.loadTranslation(); }\r\n        );\r\n\r\n        await this.loadTranslation();\r\n    }\n/**\n * @return {?}\n */\npublic getLanguage(): string {\r\n        return this.language;\r\n    }\n/**\n * @param {?} keys\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translate(keys: string | string[], args: any = null, lang: string = this.language): string | any {\r\n        // If the service is not ready, returns the keys.\r\n        if (this.serviceState != ServiceState.isReady) return keys;\r\n\r\n        if (Array.isArray(keys)) {\r\n            const /** @type {?} */ data: any = {};\r\n            for (const /** @type {?} */ key of keys) {\r\n                data[key] = this.translateKey(key, args, lang);\r\n            }\r\n            return data;\r\n        }\r\n\r\n        return this.translateKey(keys, args, lang);\r\n    }\n/**\n * @param {?} keys\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translateAsync(\r\n        keys: string | string[],\r\n        args?: any,\r\n        lang: string = this.language\r\n    ): Observable<string | any> {\r\n        return Observable.create((observer: Observer<string | any>) => {\r\n            const /** @type {?} */ values: string | any = this.translate(keys, args, lang);\r\n            observer.next(values);\r\n            observer.complete();\r\n        });\r\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate translateKey(key: string, args: any, lang: string): string | null {\r\n        if (key == null || key == \"\") return null;\r\n        // I18n plural.\r\n        if (this.configuration.i18nPlural && /^\\d+\\b/.exec(key)) {\r\n            return this.translateI18nPlural(key, args, lang);\r\n        }\r\n        return this.getValue(key, args, lang);\r\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate getValue(key: string, args: any, lang: string): string {\r\n        const /** @type {?} */ path: string = key;\r\n        let /** @type {?} */ value: string | null = null;\r\n        if (this.translationData[lang]) {\r\n            let /** @type {?} */ translation: any = this.translationData[lang];\r\n\r\n            // Composed key.\r\n            const /** @type {?} */ sequences: string[] = key.split(this.configuration.keySeparator);\r\n            do {\r\n                key = /** @type {?} */(( sequences.shift()));\r\n                if (translation[key] && typeof translation[key] === \"object\") {\r\n                    translation = translation[key];\r\n                }\r\n            } while (sequences.length > 0);\r\n\r\n            value = translation[key] || translation[this.configuration.missingKey];\r\n        }\r\n        return this.translationHandler.parseValue(path, key, value, args, lang);\r\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate translateI18nPlural(key: string, args: any, lang: string): string {\r\n        let /** @type {?} */ keyText: string = key.replace(/^\\d+\\b/, \"\");\r\n        keyText = keyText.trim();\r\n\r\n        const /** @type {?} */ keyNumber: number = parseFloat(key);\r\n        key = key.replace(/^\\d+/, this.translateNumber(keyNumber));\r\n\r\n        return key.replace(keyText, this.getValue(keyText, args, lang));\r\n    }\n/**\n * @param {?} keyNumber\n * @return {?}\n */\nprivate translateNumber(keyNumber: number): string {\r\n        if (!isNaN(keyNumber) && IntlAPI.hasNumberFormat()) {\r\n            const /** @type {?} */ localeNumber: string = new Intl.NumberFormat(this.language).format(keyNumber);\r\n            return localeNumber;\r\n        }\r\n        return keyNumber.toString();\r\n    }\n/**\n * @return {?}\n */\nprivate async loadTranslation(): Promise<void> {\r\n        const /** @type {?} */ language: string = !this.configuration.localeAsLanguage\r\n            ? this.locale.getCurrentLanguage()\r\n            : this.locale.getCurrentLocale();\r\n\r\n        if (language != null && language != this.language) {\r\n            if (this.loadingMode == LoadingMode.Async) {\r\n                await this.getTranslation(language).toPromise();\r\n            } else {\r\n                this.translationData = {};\r\n                this.translationData[language] = this.configuration.translationData[language];\r\n                this.releaseTranslation(language);\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate getTranslation(language: string): Observable<any> {\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.translationData = {};\r\n            this.serviceState = ServiceState.isLoading;\r\n\r\n            const /** @type {?} */ sequencesOfTranslationData: Array<Observable<any>> = [];\r\n\r\n            for (const /** @type {?} */ provider of this.configuration.providers) {\r\n                sequencesOfTranslationData.push(\r\n                    this.translationProvider.getTranslation(language, provider.args)\r\n                );\r\n            }\r\n\r\n            // Merges all the sequences into a single observable sequence.\r\n            Observable.merge(...sequencesOfTranslationData).subscribe(\r\n                (data: any) => {\r\n                    this.addData(data, language);\r\n                },\r\n                (error: any) => {\r\n                    // Sends an event for custom actions.\r\n                    this.translationError.emit(error);\r\n                    this.releaseTranslation(language);\r\n                    observer.next(null);\r\n                    observer.complete();\r\n                },\r\n                () => {\r\n                    this.releaseTranslation(language);\r\n                    observer.next(null);\r\n                    observer.complete();\r\n                }\r\n            );\r\n        });\r\n    }\n/**\n * @param {?} data\n * @param {?} language\n * @return {?}\n */\nprivate addData(data: any, language: string): void {\r\n        this.translationData[language] = typeof this.translationData[language] !== \"undefined\"\r\n            ? { ...this.translationData[language], ...data } // Object spread.\r\n            : data;\r\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate releaseTranslation(language: string): void {\r\n        this.serviceState = ServiceState.isReady;\r\n        this.language = language;\r\n        this.sendEvents();\r\n    }\n/**\n * @return {?}\n */\nprivate sendEvents(): void {\r\n        // Sends an event for the components.\r\n        this.translationChanged.emit(this.language);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: TranslationConfig, },\n{type: TranslationProvider, },\n{type: TranslationHandler, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'translationChanged': [{ type: Output },],\n'translationError': [{ type: Output },],\n};\n}\n\nfunction TranslationService_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationService.ctorParameters;\n/** @type {?} */\nTranslationService.propDecorators;\n/** @type {?} */\nTranslationService.prototype.translationChanged;\n/** @type {?} */\nTranslationService.prototype.translationError;\n/** @type {?} */\nTranslationService.prototype.serviceState;\n/** @type {?} */\nTranslationService.prototype.loadingMode;\n/** @type {?} */\nTranslationService.prototype.language;\n/**\n * The translation data: {language: {key: value}}.\n * @type {?}\n */\nTranslationService.prototype.translationData;\n/** @type {?} */\nTranslationService.prototype.locale;\n/** @type {?} */\nTranslationService.prototype.configuration;\n/** @type {?} */\nTranslationService.prototype.translationProvider;\n/** @type {?} */\nTranslationService.prototype.translationHandler;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export type Language = {\r\n\r\n    code: string;\r\n    direction: string;\r\n\r\n};\r\n\r\nexport type Provider = {\r\n\r\n    args: any;\r\n\r\n};\r\n\r\nexport type Decimal = {\r\n\r\n    minusSign: string;\r\n    decimalSeparator: string;\r\n    thousandSeparator: string;\r\n\r\n};\nexport type LoadingMode = number;\nexport let LoadingMode: any = {};\nLoadingMode.Direct = 0;\nLoadingMode.Async = 1;\nLoadingMode[LoadingMode.Direct] = \"Direct\";\nLoadingMode[LoadingMode.Async] = \"Async\";\n\nexport type ServiceState = number;\nexport let ServiceState: any = {};\nServiceState.isReady = 0;\nServiceState.isLoading = 1;\nServiceState.isWaiting = 2;\nServiceState[ServiceState.isReady] = \"isReady\";\nServiceState[ServiceState.isLoading] = \"isLoading\";\nServiceState[ServiceState.isWaiting] = \"isWaiting\";\n\r\n\r\nexport interface PropertyDecorator {\r\n\r\n    <T extends Function>(type: T): T;\r\n\r\n    (target: Object, propertyKey?: string | symbol): void;\r\n\r\n}\r\n\r\nexport interface Type<T> extends Function {\r\n\r\n    new (...args: any[]): T;\r\n\r\n}\r\n\r\nexport interface Token {\r\n\r\n    localeStorage?: Type<any>;\r\n    translationProvider?: Type<any>;\r\n    translationHandler?: Type<any>;\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { TranslationConfig } from '../models/translation/translation-config';\n/**\n * Implement this class-interface to create a custom handler for translated values.\n * @abstract\n */\nexport abstract class TranslationHandler {\n/**\n * This method must contain the logic to parse the translated value.\r\\@param path The path of the key\r\\@param key The key that has been requested\r\\@param value The translated value\r\\@param args The parameters passed along with the key\r\\@param lang The current language\r\\@return The parsed value\n * @abstract\n * @param {?} path\n * @param {?} key\n * @param {?} value\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nparseValue(path: string, key: string, value: string | null, args: any, lang: string) {}\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslationHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationHandler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationHandler.ctorParameters;\n}\n\nexport class DefaultTranslationHandler implements TranslationHandler {\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: TranslationConfig) { }\n/**\n * @param {?} path\n * @param {?} key\n * @param {?} value\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\npublic parseValue(path: string, key: string, value: string | null, args: any, lang: string): string {\r\n        if (value == null) {\r\n            return this.handleMissingValue(path);\r\n        } else if (args) {\r\n            return this.handleArgs(value, args);\r\n        }\r\n        return value;\r\n    }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate handleMissingValue(path: string): string {\r\n        if (this.configuration.missingValue != null) {\r\n            return this.configuration.missingValue;\r\n        }\r\n        // The same path is returned.\r\n        return path;\r\n    }\n/**\n * @param {?} value\n * @param {?} args\n * @return {?}\n */\nprivate handleArgs(value: string, args: any): string {\r\n        const /** @type {?} */ TEMPLATE_REGEXP: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n        return value.replace(TEMPLATE_REGEXP, (substring: string, parsedKey: string) => {\r\n            const /** @type {?} */ replacer: string = /** @type {?} */(( args[parsedKey] as string));\r\n            return typeof replacer !== \"undefined\" ? replacer : substring;\r\n        });\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationConfig, },\n];\n}\n\nfunction DefaultTranslationHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultTranslationHandler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDefaultTranslationHandler.ctorParameters;\n/** @type {?} */\nDefaultTranslationHandler.prototype.configuration;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/operator/map';\n/**\n * Implement this class-interface to create a custom provider for translation data.\n * @abstract\n */\nexport abstract class TranslationProvider {\n/**\n * This method must contain the logic of data access.\r\\@param language The current language\r\\@param args The parameter of addCustomProvider method\r\\@return An observable of an object of translation data: {key: value}\n * @abstract\n * @param {?} language\n * @param {?} args\n * @return {?}\n */\ngetTranslation(language: string, args: any) {}\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslationProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationProvider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationProvider.ctorParameters;\n}\n\nexport class HttpTranslationProvider implements TranslationProvider {\n/**\n * @param {?} http\n */\nconstructor(private http: Http) { }\n/**\n * @param {?} language\n * @param {?} args\n * @return {?}\n */\npublic getTranslation(language: string, args: any): Observable<any> {\r\n        let /** @type {?} */ url: string = \"\";\r\n\r\n        switch (args.type) {\r\n            case \"WebAPI\":\r\n                url += args.path + language;\r\n                break;\r\n            default:\r\n                url += args.prefix + language + \".\" + args.dataFormat;\r\n        }\r\n\r\n        return this.http.get(url)\r\n            .map((res: Response) => res.json());\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction HttpTranslationProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpTranslationProvider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpTranslationProvider.ctorParameters;\n/** @type {?} */\nHttpTranslationProvider.prototype.http;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { TranslationConfig } from './translation-config';\r\n\r\nexport interface ITranslationConfigAPI {\r\n\r\n    /**\r\n     * Direct loading: adds translation data.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     * @param translation Translation data of the language\r\n     */\r\n    addTranslation(languageCode: string, translation: any): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Asynchronous loading: adds a translation provider.\r\n     * @param prefix The path prefix of the json files\r\n     * @param dataFormat Data format: default & supported value is 'json'\r\n     */\r\n    addProvider(prefix: string, dataFormat?: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Asynchronous loading: adds a Web API provider.\r\n     * @param path [path]{languageCode} will be the URL used by the Http GET requests\r\n     * @param dataFormat Data format: default & supported value is 'json'\r\n     */\r\n    addWebAPIProvider(path: string, dataFormat?: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Asynchronous loading: adds a custom provider.\r\n     */\r\n    addCustomProvider(args: any): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets the use of locale (languageCode-countryCode) as language.\r\n     */\r\n    useLocaleAsLanguage(): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets the value to use for missing keys.\r\n     */\r\n    setMissingValue(value: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets the key to use for missing keys.\r\n     */\r\n    setMissingKey(key: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Sets composed key separator. Default is the point '.'.\r\n     */\r\n    setComposedKeySeparator(keySeparator: string): ITranslationConfigAPI;\r\n\r\n    /**\r\n     * Disables the translation of numbers that are contained at the beginning of the keys.\r\n     */\r\n    disableI18nPlural(): ITranslationConfigAPI;\r\n\r\n}\nexport class TranslationConfigAPI {\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: TranslationConfig) { }\n/**\n * @param {?} languageCode\n * @param {?} translation\n * @return {?}\n */\npublic addTranslation(languageCode: string, translation: any): ITranslationConfigAPI {\r\n        this.configuration.translationData[languageCode] =\r\n            typeof this.configuration.translationData[languageCode] !== \"undefined\"\r\n                ? { ...this.configuration.translationData[languageCode], ...translation } // Object spread.\r\n                : translation;\r\n        return this;\r\n    }\n/**\n * @param {?} prefix\n * @param {?=} dataFormat\n * @return {?}\n */\npublic addProvider(prefix: string, dataFormat: string = \"json\"): ITranslationConfigAPI {\r\n        this.configuration.providers.push({ args: { type: \"Static\", prefix: prefix, dataFormat: dataFormat } });\r\n        return this;\r\n    }\n/**\n * @param {?} path\n * @param {?=} dataFormat\n * @return {?}\n */\npublic addWebAPIProvider(path: string, dataFormat: string = \"json\"): ITranslationConfigAPI {\r\n        this.configuration.providers.push({ args: { type: \"WebAPI\", path: path, dataFormat: dataFormat } });\r\n        return this;\r\n    }\n/**\n * @param {?=} args\n * @return {?}\n */\npublic addCustomProvider(args?: any): ITranslationConfigAPI {\r\n        this.configuration.providers.push({ args: args });\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic useLocaleAsLanguage(): ITranslationConfigAPI {\r\n        this.configuration.localeAsLanguage = true;\r\n        return this;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic setMissingValue(value: string): ITranslationConfigAPI {\r\n        this.configuration.missingValue = value;\r\n        return this;\r\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic setMissingKey(key: string): ITranslationConfigAPI {\r\n        this.configuration.missingKey = key;\r\n        return this;\r\n    }\n/**\n * @param {?} keySeparator\n * @return {?}\n */\npublic setComposedKeySeparator(keySeparator: string): ITranslationConfigAPI {\r\n        this.configuration.keySeparator = keySeparator;\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic disableI18nPlural(): ITranslationConfigAPI {\r\n        this.configuration.i18nPlural = false;\r\n        return this;\r\n    }\r\n\r\n}\n\nfunction TranslationConfigAPI_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationConfigAPI.prototype.configuration;\n}\n\r\n","\n/**\n * Provides the methods to check if Intl APIs are supported.\n */\nexport class IntlAPI {\nprivate static readonly hasIntl: boolean = typeof Intl === \"object\" && !!Intl;\n/**\n * @return {?}\n */\npublic static hasDateTimeFormat(): boolean {\r\n        return this.hasIntl && Intl​.hasOwnProperty​(\"DateTimeFormat\");\r\n    }\n/**\n * @return {?}\n */\npublic static hasNumberFormat(): boolean {\r\n        return this.hasIntl && Intl.hasOwnProperty​(\"NumberFormat\");\r\n    }\n/**\n * @return {?}\n */\npublic static hasCollator(): boolean {\r\n        return this.hasIntl && Intl.hasOwnProperty​(\"Collator\");\r\n    }\r\n\r\n}\n\nfunction IntlAPI_tsickle_Closure_declarations() {\n/** @type {?} */\nIntlAPI.hasIntl;\n}\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Provider } from '../types';\r\n\r\nexport interface ITranslationConfig {\r\n\r\n    translationData: any;\r\n\r\n    providers: Provider[];\r\n    localeAsLanguage: boolean;\r\n    missingValue: string;\r\n    missingKey: string;\r\n    keySeparator: string;\r\n    i18nPlural: boolean;\r\n\r\n}\nexport class TranslationConfig implements ITranslationConfig {\npublic translationData: any = {};\npublic providers: Provider[] = [];\npublic localeAsLanguage: boolean = false;\npublic missingValue: string;\npublic missingKey: string;\npublic keySeparator: string = \".\";\npublic i18nPlural: boolean = true;\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslationConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationConfig.ctorParameters;\n/** @type {?} */\nTranslationConfig.prototype.translationData;\n/** @type {?} */\nTranslationConfig.prototype.providers;\n/** @type {?} */\nTranslationConfig.prototype.localeAsLanguage;\n/** @type {?} */\nTranslationConfig.prototype.missingValue;\n/** @type {?} */\nTranslationConfig.prototype.missingKey;\n/** @type {?} */\nTranslationConfig.prototype.keySeparator;\n/** @type {?} */\nTranslationConfig.prototype.i18nPlural;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nimport { ILocaleConfig, LocaleConfig } from '../models/localization/locale-config';\r\nimport { ILocaleConfigAPI, LocaleConfigAPI } from '../models/localization/locale-config-api';\r\nimport { LocaleStorage } from './locale-storage';\r\nimport { DefaultLocale } from '../models/localization/default-locale';\r\nimport { Language } from '../models/types';\r\n\r\n/**\r\n * Manages language, default locale & currency.\r\n */\r\nexport interface ILocaleService {\r\n\r\n    languageCodeChanged: EventEmitter<string>;\r\n    defaultLocaleChanged: EventEmitter<string>;\r\n    currencyCodeChanged: EventEmitter<string>;\r\n\r\n    loadTranslation: Subject<any>;\r\n\r\n    /**\r\n     * Configure the service in the application root module or in a feature module with lazy loading.\r\n     */\r\n    addConfiguration(): ILocaleConfigAPI;\r\n\r\n    getConfiguration(): ILocaleConfig;\r\n\r\n    init(): Promise<void>;\r\n\r\n    getAvailableLanguages(): string[];\r\n\r\n    getLanguageDirection(languageCode?: string): string;\r\n\r\n    getCurrentLanguage(): string;\r\n\r\n    getCurrentCountry(): string;\r\n\r\n    getCurrentLocale(): string;\r\n\r\n    getCurrentScript(): string;\r\n\r\n    getCurrentNumberingSystem(): string;\r\n\r\n    getCurrentCalendar(): string;\r\n\r\n    getDefaultLocale(): string;\r\n\r\n    getCurrentCurrency(): string;\r\n\r\n    setCurrentLanguage(languageCode: string): void;\r\n\r\n    setDefaultLocale(\r\n        languageCode: string,\r\n        countryCode: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): void;\r\n\r\n    setCurrentCurrency(currencyCode: string): void;\r\n\r\n}\nexport class LocaleService implements ILocaleService {\npublic languageCodeChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic defaultLocaleChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic currencyCodeChanged: EventEmitter<string> = new EventEmitter<string>(true);\npublic loadTranslation: Subject<any> = new Subject();\nprivate defaultLocale: DefaultLocale = new DefaultLocale();\nprivate currencyCode: string;\n/**\n * @param {?} configuration\n * @param {?} storage\n */\nconstructor(private configuration: LocaleConfig,\nprivate storage: LocaleStorage) { }\n/**\n * @return {?}\n */\npublic addConfiguration(): ILocaleConfigAPI {\r\n        return new LocaleConfigAPI(this.configuration);\r\n    }\n/**\n * @return {?}\n */\npublic getConfiguration(): ILocaleConfig {\r\n        return this.configuration;\r\n    }\n/**\n * @return {?}\n */\npublic async init(): Promise<void> {\r\n        await this.initStorage();\r\n\r\n        if (!!this.configuration.languageCode && !!this.configuration.countryCode) {\r\n            this.initDefaultLocale();\r\n        } else if (!!this.configuration.languageCode) {\r\n            this.initLanguage();\r\n        }\r\n\r\n        if (!!this.configuration.currencyCode) {\r\n            this.initCurrency();\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic getAvailableLanguages(): string[] {\r\n        return this.configuration.languageCodes.map((language: Language) => language.code);\r\n    }\n/**\n * @param {?=} languageCode\n * @return {?}\n */\npublic getLanguageDirection(languageCode: string = this.defaultLocale.languageCode): string {\r\n        const /** @type {?} */ matchedLanguages: Language[] = this.matchLanguage(languageCode);\r\n        return matchedLanguages[0].direction;\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentLanguage(): string {\r\n        return this.defaultLocale.languageCode;\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentCountry(): string {\r\n        if (!!this.defaultLocale.countryCode) {\r\n            return this.defaultLocale.countryCode;\r\n        }\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentScript(): string {\r\n        if (!!this.defaultLocale.scriptCode) {\r\n            return this.defaultLocale.scriptCode;\r\n        }\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentLocale(): string {\r\n        const /** @type {?} */ locale: string = !!this.defaultLocale.countryCode\r\n            ? this.defaultLocale.languageCode + \"-\" + this.defaultLocale.countryCode\r\n            : this.defaultLocale.languageCode;\r\n        return locale;\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentNumberingSystem(): string {\r\n        if (!!this.defaultLocale.numberingSystem) {\r\n            return this.defaultLocale.numberingSystem;\r\n        }\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentCalendar(): string {\r\n        if (!!this.defaultLocale.calendar) {\r\n            return this.defaultLocale.calendar;\r\n        }\r\n        return \"\";\r\n    }\n/**\n * @return {?}\n */\npublic getDefaultLocale(): string {\r\n        return this.defaultLocale.value;\r\n    }\n/**\n * @return {?}\n */\npublic getCurrentCurrency(): string {\r\n        return this.currencyCode;\r\n    }\n/**\n * @param {?} languageCode\n * @return {?}\n */\npublic setCurrentLanguage(languageCode: string): void {\r\n        if (this.defaultLocale.languageCode != languageCode) {\r\n            this.defaultLocale.build(languageCode);\r\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\r\n            this.sendLanguageEvents();\r\n            this.sendTranslationEvents();\r\n        }\r\n    }\n/**\n * @param {?} languageCode\n * @param {?} countryCode\n * @param {?=} scriptCode\n * @param {?=} numberingSystem\n * @param {?=} calendar\n * @return {?}\n */\npublic setDefaultLocale(\r\n        languageCode: string,\r\n        countryCode: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): void {\r\n        if (this.defaultLocale.languageCode != languageCode ||\r\n            this.defaultLocale.countryCode != countryCode ||\r\n            this.defaultLocale.scriptCode != scriptCode ||\r\n            this.defaultLocale.numberingSystem != numberingSystem ||\r\n            this.defaultLocale.calendar != calendar) {\r\n\r\n            this.defaultLocale.build(\r\n                languageCode,\r\n                countryCode,\r\n                scriptCode,\r\n                numberingSystem,\r\n                calendar\r\n            );\r\n\r\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\r\n            this.sendDefaultLocaleEvents();\r\n            this.sendTranslationEvents();\r\n        }\r\n    }\n/**\n * @param {?} currencyCode\n * @return {?}\n */\npublic setCurrentCurrency(currencyCode: string): void {\r\n        if (this.currencyCode != currencyCode) {\r\n            this.currencyCode = currencyCode;\r\n            this.storage.write(\"currency\", this.currencyCode);\r\n            this.sendCurrencyEvents();\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate async initStorage(): Promise<void> {\r\n        // Tries to retrieve default locale & currency from the browser storage.\r\n        if (!this.defaultLocale.value) {\r\n            const /** @type {?} */ defaultLocale: string | null = await this.storage.read(\"defaultLocale\");\r\n            if (!!defaultLocale) {\r\n                this.defaultLocale.value = defaultLocale;\r\n            }\r\n        }\r\n        if (this.currencyCode == null) {\r\n            const /** @type {?} */ currencyCode: string | null = await this.storage.read(\"currency\");\r\n            if (!!currencyCode) {\r\n                this.currencyCode = currencyCode;\r\n            }\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate initLanguage(): void {\r\n        if (!this.defaultLocale.languageCode) {\r\n            const /** @type {?} */ browserLanguage: string | null = this.getBrowserLanguage();\r\n            let /** @type {?} */ matchedLanguages: Language[] = [];\r\n            if (!!browserLanguage) {\r\n                matchedLanguages = this.matchLanguage(browserLanguage);\r\n            }\r\n            if (!!browserLanguage && matchedLanguages.length > 0) {\r\n                this.defaultLocale.build(browserLanguage);\r\n            } else {\r\n                this.defaultLocale.build(this.configuration.languageCode);\r\n            }\r\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\r\n        }\r\n        this.sendLanguageEvents();\r\n    }\n/**\n * @return {?}\n */\nprivate initDefaultLocale(): void {\r\n        if (!this.defaultLocale.value) {\r\n            this.defaultLocale.build(\r\n                this.configuration.languageCode,\r\n                this.configuration.countryCode,\r\n                this.configuration.scriptCode,\r\n                this.configuration.numberingSystem,\r\n                this.configuration.calendar\r\n            );\r\n            this.storage.write(\"defaultLocale\", this.defaultLocale.value);\r\n        }\r\n        this.sendDefaultLocaleEvents();\r\n    }\n/**\n * @return {?}\n */\nprivate initCurrency(): void {\r\n        if (this.currencyCode == null) {\r\n            this.currencyCode = this.configuration.currencyCode;\r\n            this.storage.write(\"currency\", this.currencyCode);\r\n        }\r\n        this.sendCurrencyEvents();\r\n    }\n/**\n * @return {?}\n */\nprivate getBrowserLanguage(): string | null {\r\n        let /** @type {?} */ browserLanguage: string | null = null;\r\n        if (typeof navigator !== \"undefined\" && navigator.language) {\r\n            browserLanguage = navigator.language;\r\n        }\r\n        if (browserLanguage != null) {\r\n            const /** @type {?} */ index: number = browserLanguage.indexOf(\"-\");\r\n            if (index != -1) {\r\n                browserLanguage = browserLanguage.substring(0, index);\r\n            }\r\n        }\r\n        return browserLanguage;\r\n    }\n/**\n * @param {?} languageCode\n * @return {?}\n */\nprivate matchLanguage(languageCode: string): Language[] {\r\n        const /** @type {?} */ matchedLanguages: Language[] = this.configuration.languageCodes.filter(\r\n            (language: Language) => {\r\n                return language.code == languageCode;\r\n            });\r\n        return matchedLanguages;\r\n    }\n/**\n * @return {?}\n */\nprivate sendLanguageEvents(): void {\r\n        this.languageCodeChanged.emit(this.defaultLocale.languageCode);\r\n    }\n/**\n * @return {?}\n */\nprivate sendDefaultLocaleEvents(): void {\r\n        this.defaultLocaleChanged.emit(this.defaultLocale.value);\r\n    }\n/**\n * @return {?}\n */\nprivate sendCurrencyEvents(): void {\r\n        this.currencyCodeChanged.emit(this.currencyCode);\r\n    }\n/**\n * @return {?}\n */\nprivate sendTranslationEvents(): void {\r\n        // This event is subscribed by TranslationService to load the translation data.\r\n        this.loadTranslation.next();\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleConfig, },\n{type: LocaleStorage, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'languageCodeChanged': [{ type: Output },],\n'defaultLocaleChanged': [{ type: Output },],\n'currencyCodeChanged': [{ type: Output },],\n};\n}\n\nfunction LocaleService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleService.ctorParameters;\n/** @type {?} */\nLocaleService.propDecorators;\n/** @type {?} */\nLocaleService.prototype.languageCodeChanged;\n/** @type {?} */\nLocaleService.prototype.defaultLocaleChanged;\n/** @type {?} */\nLocaleService.prototype.currencyCodeChanged;\n/** @type {?} */\nLocaleService.prototype.loadTranslation;\n/** @type {?} */\nLocaleService.prototype.defaultLocale;\n/** @type {?} */\nLocaleService.prototype.currencyCode;\n/** @type {?} */\nLocaleService.prototype.configuration;\n/** @type {?} */\nLocaleService.prototype.storage;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { DefaultLocaleCodes } from './locale-codes';\nexport class DefaultLocale implements DefaultLocaleCodes {\npublic languageCode: string;\npublic scriptCode?: string;\npublic countryCode?: string;\npublic numberingSystem?: string;\npublic calendar?: string;\n/**\n * @return {?}\n */\npublic get value(): string {\r\n        return this._value;\r\n    }\n/**\n * @param {?} defaultLocale\n * @return {?}\n */\npublic set value(defaultLocale: string) {\r\n        this._value = defaultLocale;\r\n        this.parseValue();\r\n    }\nprivate _value: string;\n/**\n * @param {?} languageCode\n * @param {?=} countryCode\n * @param {?=} scriptCode\n * @param {?=} numberingSystem\n * @param {?=} calendar\n * @return {?}\n */\npublic build(\r\n        languageCode: string,\r\n        countryCode?: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): void {\r\n        this.languageCode = languageCode;\r\n        this.scriptCode = scriptCode;\r\n        this.countryCode = countryCode;\r\n        this.numberingSystem = numberingSystem;\r\n        this.calendar = calendar;\r\n\r\n        const /** @type {?} */ value: string[] = [];\r\n        value.push(languageCode);\r\n        value.push(!!scriptCode ? \"-\" + scriptCode : \"\");\r\n        value.push(!!countryCode ? \"-\" + countryCode : \"\");\r\n        // Adds the 'u' (Unicode) extension.\r\n        value.push((!!numberingSystem || !!calendar) ? \"-u\" : \"\");\r\n        value.push(!!numberingSystem ? \"-nu-\" + numberingSystem : \"\");\r\n        value.push(!!calendar ? \"-ca-\" + calendar : \"\");\r\n        this._value = value.join(\"\");\r\n    }\n/**\n * @return {?}\n */\nprivate parseValue(): void {\r\n        if (!!this.value) {\r\n            let /** @type {?} */ value: string = this.value;\r\n            // Looks for the 'u' (Unicode) extension.\r\n            const /** @type {?} */ index: number = value.search(\"-u\");\r\n            if (index != -1) {\r\n                const /** @type {?} */ extensions: string[] = value.substring(index + 1).split(\"-\");\r\n                switch (extensions.length) {\r\n                    case 3:\r\n                        if (extensions[1] == \"nu\") {\r\n                            this.numberingSystem = extensions[2];\r\n                        } else if (extensions[1] == \"ca\") {\r\n                            this.calendar = extensions[2];\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this.numberingSystem = extensions[2];\r\n                        this.calendar = extensions[4];\r\n                        break;\r\n                }\r\n                // Extracts the codes.\r\n                value = value.substring(0, index);\r\n            }\r\n\r\n            const /** @type {?} */ codes: string[] = value.split(\"-\");\r\n            switch (codes.length) {\r\n                case 1:\r\n                    this.languageCode = codes[0];\r\n                    break;\r\n                case 2:\r\n                    this.languageCode = codes[0];\r\n                    this.countryCode = codes[1];\r\n                    break;\r\n                default:\r\n                    this.languageCode = codes[0];\r\n                    this.scriptCode = codes[1];\r\n                    this.countryCode = codes[2];\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\n\nfunction DefaultLocale_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultLocale.prototype.languageCode;\n/** @type {?} */\nDefaultLocale.prototype.scriptCode;\n/** @type {?} */\nDefaultLocale.prototype.countryCode;\n/** @type {?} */\nDefaultLocale.prototype.numberingSystem;\n/** @type {?} */\nDefaultLocale.prototype.calendar;\n/** @type {?} */\nDefaultLocale.prototype._value;\n}\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { LocaleConfig } from '../models/localization/locale-config';\n/**\n * Implement this class-interface to create a custom storage for default locale & currency.\n * @abstract\n */\nexport abstract class LocaleStorage {\n/**\n * This method must contain the logic to read the storage.\r\\@param name 'defaultLocale' or 'currency'\r\\@return A promise with the value of the given name\n * @abstract\n * @param {?} name\n * @return {?}\n */\nread(name: string) {}\n/**\n * This method must contain the logic to write the storage.\r\\@param name 'defaultLocale' or 'currency'\r\\@param value The value for the given name\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nwrite(name: string, value: string) {}\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleStorage.ctorParameters;\n}\n\nexport class BrowserStorage implements LocaleStorage {\nprivate hasCookie: boolean;\nprivate hasStorage: boolean;\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: LocaleConfig) {\r\n        this.hasCookie = typeof navigator !== \"undefined\" && navigator.cookieEnabled;\r\n        this.hasStorage = typeof Storage !== \"undefined\";\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\npublic async read(name: string): Promise<string | null> {\r\n        let /** @type {?} */ value: string | null = null;\r\n        if (!this.configuration.storageIsDisabled) {\r\n            if (this.configuration.localStorage && this.hasStorage) {\r\n                value = this.getLocalStorage(name);\r\n            } else if (this.configuration.sessionStorage && this.hasStorage) {\r\n                value = this.getSessionStorage(name);\r\n            } else if (this.hasCookie) {\r\n                value = this.getCookie(name);\r\n            }\r\n        }\r\n        return value;\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\npublic async write(name: string, value: string): Promise<void> {\r\n        if (!this.configuration.storageIsDisabled) {\r\n            if (this.configuration.localStorage && this.hasStorage) {\r\n                this.setLocalStorage(name, value);\r\n            } else if (this.configuration.sessionStorage && this.hasStorage) {\r\n                this.setSessionStorage(name, value);\r\n            } else if (this.hasCookie) {\r\n                this.setCookie(name, value);\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getLocalStorage(name: string): string | null {\r\n        return localStorage.getItem(name);\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getSessionStorage(name: string): string | null {\r\n        return sessionStorage.getItem(name);\r\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getCookie(name: string): string | null {\r\n        let /** @type {?} */ result: RegExpExecArray | null = null;\r\n        if (typeof document !== \"undefined\") {\r\n            result = new RegExp(\"(?:^|; )\" + encodeURIComponent(name) + \"=([^;]*)\").exec(document.cookie);\r\n        }\r\n        return result ? result[1] : null;\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setLocalStorage(name: string, value: string): void {\r\n        localStorage.setItem(name, value);\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setSessionStorage(name: string, value: string): void {\r\n        sessionStorage.setItem(name, value);\r\n    }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setCookie(name: string, value: string): void {\r\n        let /** @type {?} */ expires: string = \"\";\r\n        if (this.configuration.cookiesExpirationDays != null) {\r\n            const /** @type {?} */ expirationDate: Date = new Date();\r\n            expirationDate.setTime(\r\n                expirationDate.getTime() +\r\n                (this.configuration.cookiesExpirationDays * 24 * 60 * 60 * 1000)\r\n            );\r\n            expires = \"; expires=\" + expirationDate.toUTCString();\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            document.cookie = name + \"=\" + value + expires + \"; path=/\";\r\n        }\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleConfig, },\n];\n}\n\nfunction BrowserStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorage.ctorParameters;\n/** @type {?} */\nBrowserStorage.prototype.hasCookie;\n/** @type {?} */\nBrowserStorage.prototype.hasStorage;\n/** @type {?} */\nBrowserStorage.prototype.configuration;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { LocaleConfig } from './locale-config';\r\nimport { Language } from '../types';\r\n\r\nexport interface ILocaleConfigAPI {\r\n\r\n    /**\r\n     * Adds a language to use in the app, specifying the layout direction.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     * @param textDirection Default is ltr (left to right)\r\n     */\r\n    addLanguage(languageCode: string, textDirection?: string): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Adds the languages to use in the app.\r\n     * @param languageCodes Array of ISO 639 two-letter or three-letter codes of the languages\r\n     */\r\n    addLanguages(languageCodes: string[]): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Disables the browser storage for language, default locale & currency.\r\n     */\r\n    disableStorage(): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * If the cookie expiration is omitted, the cookie becomes a session cookie.\r\n     */\r\n    setCookieExpiration(days?: number): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Sets browser LocalStorage as default for language, default locale & currency.\r\n     */\r\n    useLocalStorage(): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Sets browser SessionStorage as default for language, default locale & currency.\r\n     */\r\n    useSessionStorage(): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Defines the language to be used:\r\n     *  - tries to get the language from the browser storage;\r\n     *  - tries to get the language of the browser if it has been added;\r\n     *  - otherwise gets the parameter language.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     */\r\n    defineLanguage(languageCode: string): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Defines the default locale to be used, regardless of the browser language.\r\n     * @param languageCode ISO 639 two-letter or three-letter code of the language\r\n     * @param countryCode ISO 3166 two-letter, uppercase code of the country\r\n     * @param scriptCode Optional ISO 15924 four-letter script code\r\n     * @param numberingSystem Optional numbering system\r\n     * @param calendar Optional calendar\r\n     */\r\n    defineDefaultLocale(\r\n        languageCode: string,\r\n        countryCode: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): ILocaleConfigAPI;\r\n\r\n    /**\r\n     * Defines the currency to be used.\r\n     * @param defaultCurrency ISO 4217 three-letter code of the currency\r\n     */\r\n    defineCurrency(currencyCode: string): ILocaleConfigAPI;\r\n\r\n}\nexport class LocaleConfigAPI implements ILocaleConfigAPI {\n/**\n * @param {?} configuration\n */\nconstructor(private configuration: LocaleConfig) { }\n/**\n * @param {?} languageCode\n * @param {?=} textDirection\n * @return {?}\n */\npublic addLanguage(languageCode: string, textDirection: string = \"LTR\"): ILocaleConfigAPI {\r\n        this.configuration.languageCodes.push({ code: languageCode, direction: textDirection });\r\n        return this;\r\n    }\n/**\n * @param {?} languageCodes\n * @return {?}\n */\npublic addLanguages(languageCodes: string[]): ILocaleConfigAPI {\r\n        for (const /** @type {?} */ languageCode of languageCodes) {\r\n            this.configuration.languageCodes.push({ code: languageCode, direction: \"ltr\" });\r\n        }\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic disableStorage(): ILocaleConfigAPI {\r\n        this.configuration.storageIsDisabled = true;\r\n        return this;\r\n    }\n/**\n * @param {?=} days\n * @return {?}\n */\npublic setCookieExpiration(days?: number): ILocaleConfigAPI {\r\n        this.configuration.cookiesExpirationDays = days;\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic useLocalStorage(): ILocaleConfigAPI {\r\n        this.configuration.localStorage = true;\r\n        return this;\r\n    }\n/**\n * @return {?}\n */\npublic useSessionStorage(): ILocaleConfigAPI {\r\n        this.configuration.sessionStorage = true;\r\n        return this;\r\n    }\n/**\n * @param {?} languageCode\n * @return {?}\n */\npublic defineLanguage(languageCode: string): ILocaleConfigAPI {\r\n        this.configuration.languageCode = languageCode;\r\n        return this;\r\n    }\n/**\n * @param {?} languageCode\n * @param {?} countryCode\n * @param {?=} scriptCode\n * @param {?=} numberingSystem\n * @param {?=} calendar\n * @return {?}\n */\npublic defineDefaultLocale(\r\n        languageCode: string,\r\n        countryCode: string,\r\n        scriptCode?: string,\r\n        numberingSystem?: string,\r\n        calendar?: string\r\n    ): ILocaleConfigAPI {\r\n        this.configuration.languageCode = languageCode;\r\n        this.configuration.countryCode = countryCode;\r\n        this.configuration.scriptCode = scriptCode;\r\n        this.configuration.numberingSystem = numberingSystem;\r\n        this.configuration.calendar = calendar;\r\n        return this;\r\n    }\n/**\n * @param {?} currencyCode\n * @return {?}\n */\npublic defineCurrency(currencyCode: string): ILocaleConfigAPI {\r\n        this.configuration.currencyCode = currencyCode;\r\n        return this;\r\n    }\r\n\r\n}\n\nfunction LocaleConfigAPI_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleConfigAPI.prototype.configuration;\n}\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { LocaleCodes } from './locale-codes';\r\nimport { Language } from '../types';\r\n\r\nexport interface ILocaleConfig extends LocaleCodes {\r\n\r\n    languageCodes: Language[];\r\n\r\n    storageIsDisabled: boolean;\r\n    localStorage: boolean;\r\n    sessionStorage: boolean;\r\n    cookiesExpirationDays?: number;\r\n\r\n}\nexport class LocaleConfig implements ILocaleConfig {\npublic languageCode: string;\npublic scriptCode?: string;\npublic countryCode?: string;\npublic numberingSystem?: string;\npublic calendar?: string;\npublic currencyCode: string;\npublic languageCodes: Language[] = [];\npublic storageIsDisabled: boolean = false;\npublic localStorage: boolean = false;\npublic sessionStorage: boolean = false;\npublic cookiesExpirationDays?: number;\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleConfig.ctorParameters;\n/** @type {?} */\nLocaleConfig.prototype.languageCode;\n/** @type {?} */\nLocaleConfig.prototype.scriptCode;\n/** @type {?} */\nLocaleConfig.prototype.countryCode;\n/** @type {?} */\nLocaleConfig.prototype.numberingSystem;\n/** @type {?} */\nLocaleConfig.prototype.calendar;\n/** @type {?} */\nLocaleConfig.prototype.currencyCode;\n/** @type {?} */\nLocaleConfig.prototype.languageCodes;\n/** @type {?} */\nLocaleConfig.prototype.storageIsDisabled;\n/** @type {?} */\nLocaleConfig.prototype.localStorage;\n/** @type {?} */\nLocaleConfig.prototype.sessionStorage;\n/** @type {?} */\nLocaleConfig.prototype.cookiesExpirationDays;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { Type } from './types';\n/**\n * Allows to get the dependencies at the module level or component.\n */\nexport class InjectorRef {\nprivate static injector: Injector;\n/**\n * @template T\n * @param {?} token\n * @return {?}\n */\npublic static get<T>(token: Type<T>): T {\r\n        return this.injector.get(token);\r\n    }\n/**\n * @param {?} injector\n */\nconstructor(private injector: Injector) {\r\n        InjectorRef.injector = this.injector;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction InjectorRef_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectorRef.injector;\n/** @type {?} */\nInjectorRef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInjectorRef.ctorParameters;\n/** @type {?} */\nInjectorRef.prototype.injector;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["DefaultLocale"],"mappings":"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"}