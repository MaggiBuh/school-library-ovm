"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/map");
var rxjs_1 = require("rxjs");
var util_1 = require("util");
var _1 = require("../../");
/**
 * @author mfrank
 */
var TerraBaseService = /** @class */ (function () {
    function TerraBaseService(_terraLoadingSpinnerService, _baseHttp, _baseUrl, _isPlugin) {
        this._terraLoadingSpinnerService = _terraLoadingSpinnerService;
        this._baseHttp = _baseHttp;
        this._baseUrl = _baseUrl;
        this._isPlugin = _isPlugin;
        this._alert = _1.TerraAlertComponent.getInstance();
        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        this.setAuthorization();
        this.url = _baseUrl;
        if (util_1.isNullOrUndefined(this._isPlugin)) {
            this._isPlugin = false;
        }
    }
    Object.defineProperty(TerraBaseService.prototype, "http", {
        get: function () {
            return this._baseHttp;
        },
        enumerable: true,
        configurable: true
    });
    TerraBaseService.prototype.setToHeader = function (key, value) {
        this.headers.set(key, value);
    };
    TerraBaseService.prototype.deleteFromHeader = function (key) {
        this.headers.delete(key);
    };
    TerraBaseService.prototype.setAuthorization = function () {
        if (localStorage.getItem('accessToken')) {
            this.setToHeader('Authorization', 'Bearer ' + localStorage.getItem('accessToken'));
        }
    };
    TerraBaseService.prototype.mapRequest = function (request, err, isRaw) {
        var _this = this;
        this._terraLoadingSpinnerService.start();
        var req = request.map(function (response) {
            if (response.status == 204) {
                return response.text();
            }
            else if (isRaw) {
                return response;
            }
            else {
                return response.text() === '' ? {} : response.json();
            }
        }).catch(function (error) {
            if (err) {
                err(error);
            }
            else {
                _this.handleException(error);
            }
            // START Very unclean workaround! Normally we should get a 403 status code as response
            // when user has no permission
            var errorMessage = _this.getErrorMessage(error);
            var missingUserPermissionAlertMessage = _this.getMissingUserPermissionAlertMessage();
            if (error.status === 403 && _this.getErrorClass(error) === 'UIHashExpiredException') {
                var routeToLoginEvent = new CustomEvent('CustomEvent');
                routeToLoginEvent.initCustomEvent('routeToLogin', true, true, {});
                _this.dispatchEvent(routeToLoginEvent);
            }
            else if (error.status == 401 && errorMessage === "This action is unauthorized.") {
                if (_this._isPlugin) {
                    _this._alert.addAlertForPlugin({
                        msg: missingUserPermissionAlertMessage,
                        type: 'danger',
                        dismissOnTimeout: 0
                    });
                }
                else {
                    _this._alert.addAlert({
                        msg: missingUserPermissionAlertMessage,
                        type: 'danger',
                        dismissOnTimeout: 0
                    });
                }
            }
            else if (error.status == 401) {
                var loginEvent = new CustomEvent('login');
                //Workaround for plugins in Angular (loaded via iFrame)
                _this.dispatchEvent(loginEvent);
            }
            return rxjs_1.Observable.throw(error);
        }).share();
        req.subscribe(function () {
            _this._terraLoadingSpinnerService.stop();
        }, function (error) {
            _this._terraLoadingSpinnerService.stop();
        });
        return req;
    };
    TerraBaseService.prototype.dispatchEvent = function (eventToDispatch) {
        if (!util_1.isNullOrUndefined(window.parent)) {
            //workaround for plugins in GWT (loaded via iFrame)
            if (!util_1.isNullOrUndefined(window.parent.window.parent)) {
                window.parent.window.parent.window.dispatchEvent(eventToDispatch);
            }
            else {
                window.parent.window.dispatchEvent(eventToDispatch);
            }
        }
        else {
            window.dispatchEvent(eventToDispatch);
        }
    };
    TerraBaseService.prototype.getErrorMessage = function (error) {
        try {
            var errorMessage = void 0;
            if (!util_1.isNullOrUndefined(error.json().error)) {
                errorMessage = error.json().error.message;
            }
            return errorMessage;
        }
        catch (e) {
            return null;
        }
    };
    TerraBaseService.prototype.getErrorClass = function (error) {
        try {
            var errorClass = error.json().class;
            return errorClass;
        }
        catch (e) {
            return null;
        }
    };
    /**
     * Workaround to prevent the injection of the TranslationService in every Service, that extends TerraBaseService
     * @returns {string}
     */
    TerraBaseService.prototype.getErrorString = function () {
        // get language from localStorage
        var langInLocalStorage = localStorage.getItem('plentymarkets_lang_');
        // translate error string
        switch (langInLocalStorage) {
            case 'de':
                return 'Fehler';
            case 'en':
                return 'Error';
            default:
                return 'Error';
        }
    };
    /**
     * Handles exceptions that are returned from the server on a failed rest call
     * @param exception
     */
    TerraBaseService.prototype.handleException = function (exception) {
        // parse response object
        var response = JSON.parse(exception._body);
        // check which exception type has been received
        if (!util_1.isNullOrUndefined(response.error) && !util_1.isNullOrUndefined(response.message)) {
            if (this._isPlugin) {
                this._alert.addAlertForPlugin({
                    msg: this.getErrorString() + ': ' + response.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
            else {
                this._alert.addAlert({
                    msg: this.getErrorString() + ': ' + response.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
        }
        else if (util_1.isNullOrUndefined(response.error) || util_1.isNull(response.error.code)) {
            return;
        }
        else {
            // parse exception string
            var error = response.error;
            // get error code
            var errorCode = error.code ? ' ' + error.code : '';
            if (this._isPlugin) {
                this._alert.addAlertForPlugin({
                    msg: this.getErrorString() + errorCode + ': ' + error.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
            else {
                this._alert.addAlert({
                    msg: this.getErrorString() + errorCode + ': ' + error.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
        }
    };
    /**
     * @param {TerraBaseParameterInterface} params
     * @returns {URLSearchParams}
     */
    TerraBaseService.prototype.createUrlSearchParams = function (params) {
        var searchParams = new http_1.URLSearchParams();
        if (!util_1.isNullOrUndefined(params)) {
            Object.keys(params).map(function (key) {
                if (!util_1.isNullOrUndefined(params[key]) && params[key] !== '') {
                    searchParams.set(key, params[key]);
                }
            });
        }
        return searchParams;
    };
    TerraBaseService.prototype.getMissingUserPermissionAlertMessage = function () {
        //START workaround because we do not have a real translation solution in terra components
        var langInLocalStorage = localStorage.getItem('plentymarkets_lang_');
        if (langInLocalStorage === "de") {
            return "Fehlende Berechtigungen";
        }
        else {
            return "Missing permissions";
        }
        //END workaround
    };
    TerraBaseService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [_1.TerraLoadingSpinnerService,
            http_1.Http, String, Boolean])
    ], TerraBaseService);
    return TerraBaseService;
}());
exports.TerraBaseService = TerraBaseService;

//# sourceMappingURL=terra-base.service.js.map
