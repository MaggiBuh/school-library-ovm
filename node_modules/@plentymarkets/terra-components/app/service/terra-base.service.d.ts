import { Headers, Http, Response, URLSearchParams } from '@angular/http';
import 'rxjs/add/operator/map';
import { Observable } from 'rxjs';
import { TerraBaseParameterInterface, TerraLoadingSpinnerService } from '../../';
/**
 * @author mfrank
 */
export declare class TerraBaseService {
    private _terraLoadingSpinnerService;
    private _baseHttp;
    private _baseUrl;
    private _isPlugin;
    private _alert;
    headers: Headers;
    url: string;
    constructor(_terraLoadingSpinnerService: TerraLoadingSpinnerService, _baseHttp: Http, _baseUrl: string, _isPlugin?: boolean);
    readonly http: Http;
    protected setToHeader(key: string, value: string): void;
    protected deleteFromHeader(key: string): void;
    protected setAuthorization(): void;
    protected mapRequest(request: Observable<Response>, err?: (error: any) => void, isRaw?: boolean): Observable<any>;
    private dispatchEvent(eventToDispatch);
    private getErrorMessage(error);
    private getErrorClass(error);
    /**
     * Workaround to prevent the injection of the TranslationService in every Service, that extends TerraBaseService
     * @returns {string}
     */
    protected getErrorString(): string;
    /**
     * Handles exceptions that are returned from the server on a failed rest call
     * @param exception
     */
    private handleException(exception);
    /**
     * @param {TerraBaseParameterInterface} params
     * @returns {URLSearchParams}
     */
    protected createUrlSearchParams(params: TerraBaseParameterInterface): URLSearchParams;
    private getMissingUserPermissionAlertMessage();
}
