{"version":3,"sources":["app/components/buttons/toggle/terra-toggle.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAMuB;AACvB,wCAGwB;AAEX,QAAA,6BAA6B,GAAO;IAC7C,OAAO,EAAM,yBAAiB;IAC9B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,oBAAoB,EAApB,CAAoB,CAAC;IACnD,KAAK,EAAQ,IAAI;CACpB,CAAC;AAQF;IAyBI;QAdU,gBAAW,GAAG,IAAI,mBAAY,EAAO,CAAC;QACtC,cAAS,GAAG,IAAI,mBAAY,EAAO,CAAC;QACpC,YAAO,GAAG,IAAI,mBAAY,EAAW,CAAC;QAExC,cAAS,GAAW,KAAK,CAAC;QAE1B,sBAAiB,GAAc;QAEvC,CAAC,CAAC;QAEM,qBAAgB,GAAmB;QAE3C,CAAC,CAAC;QAIE,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IACvC,CAAC;IAEO,qCAAM,GAAd;QAEI,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CACzB,CAAC;YACG,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAClC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAClB,CAAC;gBACG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YAC1B,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YAC5B,CAAC;QACL,CAAC;IACL,CAAC;IAED,qCAAqC;IACrC,yCAAU,GAAV,UAAW,KAAa;QAEpB,EAAE,CAAA,CAAC,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC,CAC5B,CAAC;YACG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC;IACL,CAAC;IAED,qCAAqC;IACrC,+CAAgB,GAAhB,UAAiB,EAAM;QAEnB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC/B,CAAC;IAED,qCAAqC;IACrC,gDAAiB,GAAjB,UAAkB,EAAM;QAEpB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;IAjEQ;QAAR,YAAK,EAAE;;8DAAsB;IACrB;QAAR,YAAK,EAAE;;8DAAsB;IACrB;QAAR,YAAK,EAAE;;iEAAyB;IACxB;QAAR,YAAK,EAAE;;2DAAkB;IACjB;QAAR,YAAK,EAAE;;mEAA2B;IAC1B;QAAR,YAAK,EAAE;;+DAAuB;IACtB;QAAR,YAAK,EAAE;;kEAAyB;IACxB;QAAR,YAAK,EAAE;;uEAA8B;IAE5B;QAAT,aAAM,EAAE;;6DAAuC;IACtC;QAAT,aAAM,EAAE;;2DAAqC;IACpC;QAAT,aAAM,EAAE;;yDAAuC;IAbvC,oBAAoB;QANhC,gBAAS,CAAC;YACP,QAAQ,EAAG,cAAc;YACzB,MAAM,EAAK,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;YACrD,QAAQ,EAAG,OAAO,CAAC,+BAA+B,CAAC;YACnD,SAAS,EAAE,CAAC,qCAA6B,CAAC;SAC7C,CAAC;;OACW,oBAAoB,CAoEhC;IAAD,2BAAC;CApED,AAoEC,IAAA;AApEY,oDAAoB","file":"app/components/buttons/toggle/terra-toggle.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nexport const TOGGLE_CONTROL_VALUE_ACCESSOR:any = {\n    provide:     NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TerraToggleComponent),\n    multi:       true\n};\n\n@Component({\n    selector:  'terra-toggle',\n    styles:    [require('./terra-toggle.component.scss')],\n    template:  require('./terra-toggle.component.html'),\n    providers: [TOGGLE_CONTROL_VALUE_ACCESSOR]\n})\nexport class TerraToggleComponent implements ControlValueAccessor\n{\n    @Input() inputIsSmall:boolean;\n    @Input() inputIsLarge:boolean;\n    @Input() inputIsDisabled:boolean;\n    @Input() inputIcon:string;\n    @Input() inputIsAlignRight:boolean;\n    @Input() inputIsHidden:boolean;\n    @Input() inputTooltipText:string;\n    @Input() inputTooltipPlacement:string; //top, bottom, left, right\n\n    @Output() deactivated = new EventEmitter<any>();\n    @Output() activated = new EventEmitter<any>();\n    @Output() toggled = new EventEmitter<boolean>();\n\n    private _isActive:boolean = false;\n\n    private onTouchedCallback:() => void = () =>\n    {\n    };\n\n    private onChangeCallback:(_:any) => void = () =>\n    {\n    };\n\n    constructor()\n    {\n        this.inputTooltipPlacement = 'top';\n    }\n\n    private toggle():void\n    {\n        if(!this.inputIsDisabled)\n        {\n            this._isActive = !this._isActive;\n            this.toggled.emit(this._isActive);\n            this.onChangeCallback(this._isActive);\n            if(this._isActive)\n            {\n                this.activated.emit();\n            }\n            else\n            {\n                this.deactivated.emit();\n            }\n        }\n    }\n\n    //From ControlValueAccessor interface\n    writeValue(value:boolean)\n    {\n        if(value !== this._isActive)\n        {\n            this._isActive = value;\n        }\n    }\n\n    //From ControlValueAccessor interface\n    registerOnChange(fn:any)\n    {\n        this.onChangeCallback = fn;\n    }\n\n    //From ControlValueAccessor interface\n    registerOnTouched(fn:any)\n    {\n        this.onTouchedCallback = fn;\n    }\n}\n"],"sourceRoot":"/source/"}