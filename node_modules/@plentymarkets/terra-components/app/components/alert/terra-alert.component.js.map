{"version":3,"sources":["app/components/alert/terra-alert.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAE3C,6BAAyC;AAEzC;;GAEG;AAEH;IAMI;QAJO,WAAM,GAA8B,EAAE,CAAC;QAM1C,EAAE,CAAA,CAAC,CAAC,qBAAmB,CAAC,WAAW,CAAC,CACpC,CAAC;YACG,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;QAClH,CAAC;IACL,CAAC;4BAZQ,mBAAmB;IAcd,+BAAW,GAAzB;QAEI,EAAE,CAAA,CAAC,qBAAmB,CAAC,SAAS,IAAI,IAAI,CAAC,CACzC,CAAC;YACG,qBAAmB,CAAC,WAAW,GAAG,IAAI,CAAC;YACvC,qBAAmB,CAAC,SAAS,GAAG,IAAI,qBAAmB,EAAE,CAAC;YAC1D,qBAAmB,CAAC,WAAW,GAAG,KAAK,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,qBAAmB,CAAC,SAAS,CAAC;IACzC,CAAC;IAEM,wCAAU,GAAjB,UAAkB,CAAQ;QAEtB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,CAAC;IAEM,+CAAiB,GAAxB,UAAyB,KAAyB;QAE9C,EAAE,CAAA,CAAC,wBAAiB,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAC7C,CAAC;YACG,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAClC,CAAC;QAED,IAAI,KAAK,GAAe,IAAI,WAAW,CAAC,QAAQ,EAAE;YAC9C,MAAM,EAAE;gBACJ,OAAO,EAAW,KAAK,CAAC,GAAG;gBAC3B,IAAI,EAAc,KAAK,CAAC,IAAI;gBAC5B,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;gBACxC,UAAU,EAAQ,KAAK,CAAC,UAAU;aACrC;SACJ,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IACD,0CAA0C;IACnC,sCAAQ,GAAf,UAAgB,KAAyB;QAErC,EAAE,CAAA,CAAC,wBAAiB,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAC7C,CAAC;YACG,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,GAAG,EAAe,KAAK,CAAC,GAAG;YAC3B,IAAI,EAAc,KAAK,CAAC,IAAI;YAC5B,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;YACxC,UAAU,EAAQ,KAAK,CAAC,UAAU;SACrC,CAAC,CAAC;IACP,CAAC;IAEM,oDAAsB,GAA7B,UAA8B,UAAiB;QAE3C,GAAG,CAAA,CAAc,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW;YAAxB,IAAI,OAAK,SAAA;YAET,EAAE,CAAA,CAAC,OAAK,CAAC,UAAU,IAAI,UAAU,CAAC,CAClC,CAAC;gBACG,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAK,CAAC,CAAC;gBAEvC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;SACJ;IACL,CAAC;IAzEc,6BAAS,GAAuB,IAAI,CAAC;IACrC,+BAAW,GAAW,KAAK,CAAC;IAJlC,mBAAmB;QAD/B,iBAAU,EAAE;;OACA,mBAAmB,CA6E/B;IAAD,0BAAC;;CA7ED,AA6EC,IAAA;AA7EY,kDAAmB","file":"app/components/alert/terra-alert.component.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TerraAlertInterface } from './data/terra-alert.interface';\nimport { isNullOrUndefined } from 'util';\n\n/**\n * @author mkunze\n */\n@Injectable()\nexport class TerraAlertComponent\n{\n    public alerts:Array<TerraAlertInterface> = [];\n    private static _instance:TerraAlertComponent = null;\n    private static _isCreating:boolean = false;\n\n    constructor()\n    {\n        if(!TerraAlertComponent._isCreating)\n        {\n            throw new Error(\"You can't call new in Singleton instances! Call TerraAlertComponent.getInstance() instead.\");\n        }\n    }\n\n    public static getInstance():TerraAlertComponent\n    {\n        if(TerraAlertComponent._instance == null)\n        {\n            TerraAlertComponent._isCreating = true;\n            TerraAlertComponent._instance = new TerraAlertComponent();\n            TerraAlertComponent._isCreating = false;\n        }\n\n        return TerraAlertComponent._instance;\n    }\n\n    public closeAlert(i:number):void\n    {\n        this.alerts.splice(i, 1);\n    }\n\n    public addAlertForPlugin(alert:TerraAlertInterface):void\n    {\n        if(isNullOrUndefined(alert.dismissOnTimeout))\n        {\n            alert.dismissOnTimeout = 5000;\n        }\n\n        let event:CustomEvent = new CustomEvent('status', {\n            detail: {\n                message:          alert.msg,\n                type:             alert.type,\n                dismissOnTimeout: alert.dismissOnTimeout,\n                identifier:       alert.identifier\n            }\n        });\n\n        window.parent.window.dispatchEvent(event);\n    }\n    /** @description is used to add an alert*/\n    public addAlert(alert:TerraAlertInterface):void\n    {\n        if(isNullOrUndefined(alert.dismissOnTimeout))\n        {\n            alert.dismissOnTimeout = 5000;\n        }\n\n        this.alerts.push({\n            msg:              alert.msg,\n            type:             alert.type,\n            dismissOnTimeout: alert.dismissOnTimeout,\n            identifier:       alert.identifier\n        });\n    }\n\n    public closeAlertByIdentifier(identifier:string)\n    {\n        for(let alert of this.alerts)\n        {\n            if(alert.identifier == identifier)\n            {\n                let index = this.alerts.indexOf(alert);\n\n                this.closeAlert(index);\n            }\n        }\n    }\n}\n"],"sourceRoot":"/source/"}