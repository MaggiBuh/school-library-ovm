{"version":3,"sources":["app/components/interactables/resizable.directive.ts"],"names":[],"mappings":"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","file":"app/components/interactables/resizable.directive.js","sourcesContent":["import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport { ResizeOptions } from './resizeOptions.interface';\nimport { InertiaOptions } from './inertiaOptions.interface';\nimport { RestrictOptions } from './restrictOptions.interface';\nimport { GridOptions } from './gridOptions.interface';\nimport * as Interact from 'interactjs';\n\n@Directive({\n    selector: '[terraResizable]'\n})\nexport class TerraResizableDirective implements OnChanges\n{\n    @Input('terra-resizable')\n    public options:ResizeOptions = null;\n\n    @Input('terra-resizable-disabled')\n    public disabled:boolean = false;\n\n    @Input('terra-resizable-grid')\n    public grid:false | GridOptions = false;\n\n    @Input('terra-resizable-restrict')\n    public restrict:RestrictOptions = null;\n\n    @Input('terra-resizable-inertia')\n    public inertia:boolean | InertiaOptions = false;\n\n    @Output('terra-resizable-onStart')\n    public onStart:EventEmitter<Interact.InteractEvent> = new EventEmitter<Interact.InteractEvent>();\n\n    @Output('terra-resizable-onMove')\n    public onMove:EventEmitter<Interact.InteractEvent> = new EventEmitter<Interact.InteractEvent>();\n\n    @Output('terra-resizable-onEnd')\n    public onEnd:EventEmitter<Interact.InteractEvent> = new EventEmitter<Interact.InteractEvent>();\n\n    private interactable:Interact.Interactable;\n\n    constructor(private el:ElementRef)\n    {\n        this.init();\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        Object.keys(changes).forEach((changedProperty:string) =>\n        {\n            if(typeof changes[changedProperty].currentValue === 'object')\n            {\n                this.prepareImmutableInput(changedProperty);\n            }\n        });\n\n        this.init();\n    }\n\n    private prepareImmutableInput(input:string):void\n    {\n        if(this[input] && typeof this[input] === 'object')\n        {\n            Object.keys(this[input])\n                  .filter((property:string) =>\n                  {\n                      return this[input].propertyIsEnumerable(property);\n                  })\n                  .forEach((property:string) =>\n                  {\n                      // this[input][\"_\" + property] = this[input][property];\n                      Object.defineProperty(\n                          this[input],\n                          '_' + property,\n                          {\n                              configurable: false,\n                              enumerable:   false,\n                              writable:     true,\n                              value:        this[input][property]\n                          }\n                      );\n\n                      Object.defineProperty(\n                          this[input],\n                          property,\n                          {\n                              configurable: true,\n                              enumerable:   true,\n                              get:          ():any  =>\n                                            {\n                                                return this[input]['_' + property];\n                                            },\n                              set:          (value:any):void =>\n                                            {\n                                                this[input]['_' + property] = value;\n                                                this.init();\n                                            }\n                          }\n                      );\n\n                  });\n        }\n    }\n\n    private init():void\n    {\n        let resizableConfig:any = {\n            edges:               this.options.edges,\n            invert:              this.options.invert || 'none',\n            squareResize:        !!this.options.squareResize,\n            preserveAspectRatio: !!this.options.preserveAspectRatio,\n            inertia:             this.inertia,\n            enabled:             !this.disabled,\n            onstart:             (event:Interact.InteractEvent):void =>\n                                 {\n                                     this.onStart.emit(event);\n                                 },\n            onmove:              (event:Interact.InteractEvent):void =>\n                                 {\n                                     this.onMove.emit(event);\n                                 },\n            onend:               (event:Interact.InteractEvent):void =>\n                                 {\n                                     this.onEnd.emit(event);\n                                 },\n        };\n\n        if(this.grid)\n        {\n            resizableConfig.snap = {\n                targets:        [\n                    (x:number, y:number):{ x:number, y:number, range:number } =>\n                    {\n                        return this.handleSnap(x, y);\n                    }\n                ],\n                endOnly:        this.grid && this.grid.endOnly,\n                relativePoints: this.grid.relativePoints\n            };\n        }\n\n        if(this.restrict)\n        {\n            resizableConfig.restrict = this.restrict;\n        }\n\n        if(!this.interactable)\n        {\n            this.interactable = Interact(this.el.nativeElement);\n        }\n\n        this.interactable.resizable(resizableConfig);\n    }\n\n    private handleSnap(x:number, y:number):{ x:number, y:number, range:number }\n    {\n        if(this.grid)\n        {\n            let offset:Interact.Point = {\n                x: 0,\n                y: 0\n            };\n\n            if(this.grid.offset)\n            {\n                offset = this.grid.offset;\n            }\n\n            return {\n                x:     Math.round((x - offset.x) / this.grid.x) * this.grid.x,\n                y:     Math.round((y - offset.y) / this.grid.y) * this.grid.y,\n                range: (this.grid.range || Infinity)\n            };\n        }\n        else\n        {\n            // Snap is disabled\n            return {\n                x:     x,\n                y:     y,\n                range: 0\n            };\n        }\n    }\n}\n"],"sourceRoot":"/source/"}