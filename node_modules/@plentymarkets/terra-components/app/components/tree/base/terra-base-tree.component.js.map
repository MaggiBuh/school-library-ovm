{"version":3,"sources":["app/components/tree/base/terra-base-tree.component.ts"],"names":[],"mappings":"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","file":"app/components/tree/base/terra-base-tree.component.js","sourcesContent":["import {\n    Input,\n    OnInit\n} from '@angular/core';\nimport { TerraLeafInterface } from '../leaf/terra-leaf.interface';\n\n/**\n * @author mkunze\n */\nexport class TerraBaseTreeComponent implements OnInit\n{\n    /**\n     * current level leaf list\n     */\n    @Input() inputLeafList:Array<TerraLeafInterface>;\n\n    /**\n     * leafs one level higher than current leaf\n     */\n    @Input() inputParentLeafList:Array<TerraLeafInterface>;\n\n    /**\n     * complete leaf list for better and faster searching\n     */\n    @Input() inputCompleteLeafList:Array<TerraLeafInterface>;\n\n    constructor()\n    {\n    }\n\n    ngOnInit():void\n    {\n        if(!this.inputCompleteLeafList)\n        {\n            this.inputCompleteLeafList = this.inputLeafList;\n        }\n\n        if(this.inputParentLeafList)\n        {\n            for(let parentLeaf of this.inputParentLeafList)\n            {\n                if(parentLeaf.subLeafList)\n                {\n                    for(let subLeaf of parentLeaf.subLeafList)\n                    {\n                        for(let leaf of this.inputLeafList)\n                        {\n                            if(leaf == subLeaf)\n                            {\n                                leaf.parentLeafList = this.inputParentLeafList;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    private onLeafClick(clickedLeaf:TerraLeafInterface):void\n    {\n        if(clickedLeaf.subLeafList != null && !clickedLeaf.avoidOpenOnClick)\n        {\n            this.toggleOpen(clickedLeaf);\n        }\n\n        if(clickedLeaf.clickFunction != null && !clickedLeaf.isActive)\n        {\n            clickedLeaf.clickFunction();\n        }\n\n        if(!clickedLeaf.isActive)\n        {\n            this.recursiveLeafListInactive(this.inputCompleteLeafList);\n            clickedLeaf.isActive = true;\n        }\n    }\n\n    private recursiveLeafListInactive(list:Array<TerraLeafInterface>):boolean\n    {\n        let foundActive:boolean = false;\n\n        for(let leaf of list)\n        {\n            if(leaf.isActive)\n            {\n                leaf.isActive = false;\n                return true;\n            }\n            else if(leaf.subLeafList)\n            {\n                foundActive = this.recursiveLeafListInactive(leaf.subLeafList);\n            }\n\n            if(foundActive)\n            {\n                return foundActive;\n            }\n        }\n\n        return false;\n    }\n\n    private toggleOpen(clickedLeaf:TerraLeafInterface):void\n    {\n        clickedLeaf.isOpen = !clickedLeaf.isOpen;\n    }\n\n    private onArrowClick(clickedLeaf:TerraLeafInterface):void\n    {\n        if(clickedLeaf.onOpenFunction != null && !clickedLeaf.isOnOpenFunctionCalled)\n        {\n            clickedLeaf.onOpenFunction();\n            clickedLeaf.isOnOpenFunctionCalled = true;\n        }\n\n        this.toggleOpen(clickedLeaf);\n    }\n\n    private recursiveSearchActiveLeaf(leafListToSearch:Array<TerraLeafInterface>):TerraLeafInterface\n    {\n        let foundLeaf:TerraLeafInterface;\n\n        for(let leaf of leafListToSearch)\n        {\n            if(leaf.isActive)\n            {\n                foundLeaf = leaf;\n\n                return foundLeaf\n            }\n            else if(leaf.subLeafList)\n            {\n                foundLeaf = this.recursiveSearchActiveLeaf(leaf.subLeafList);\n\n                if(foundLeaf != null)\n                {\n                    break;\n                }\n            }\n        }\n\n        return foundLeaf;\n    }\n\n    public getSelectedLeaf():TerraLeafInterface\n    {\n        return this.recursiveSearchActiveLeaf(this.inputLeafList);\n    }\n\n    private checkIfArrowNeeded(clickedLeaf:TerraLeafInterface):boolean\n    {\n        return clickedLeaf.subLeafList != null || clickedLeaf.onOpenFunction != null;\n    }\n}\n"],"sourceRoot":"/source/"}