"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_node_tree_config_1 = require("./data/terra-node-tree.config");
var util_1 = require("util");
var angular_l10n_1 = require("angular-l10n");
var TerraNodeTreeComponent = /** @class */ (function () {
    function TerraNodeTreeComponent(_translation) {
        this._translation = _translation;
    }
    TerraNodeTreeComponent.prototype.ngOnInit = function () {
        this.handleVisibility(this.inputConfig.list);
    };
    TerraNodeTreeComponent.prototype.handleVisibility = function (nodeList) {
        var _this = this;
        nodeList.forEach(function (node) {
            if (node.isVisible) {
                node.defaultVisibility = true;
            }
            else {
                node.defaultVisibility = false;
            }
            if (!util_1.isNullOrUndefined(node.children)) {
                _this.handleVisibility(node.children);
            }
        });
    };
    TerraNodeTreeComponent.prototype.handleDefaultVisibility = function (nodeList) {
        var _this = this;
        nodeList.forEach(function (node) {
            if (node.defaultVisibility) {
                node.isVisible = true;
            }
            else {
                node.isVisible = false;
            }
            if (!util_1.isNullOrUndefined(node.children)) {
                _this.handleDefaultVisibility(node.children);
            }
        });
    };
    TerraNodeTreeComponent.prototype.ngOnDestroy = function () {
        this.inputConfig.reset();
    };
    TerraNodeTreeComponent.prototype.onChange = function () {
        if (this._searchValue.length >= 3) {
            this.inputConfig.toggleVisiblityForAllChildren(this.inputConfig.list, false);
            this.recursiveCheckList(this.inputConfig.list);
        }
        else {
            this.handleDefaultVisibility(this.inputConfig.list);
            this.inputConfig.closeAllNodes();
        }
    };
    TerraNodeTreeComponent.prototype.recursiveCheckList = function (list) {
        var _this = this;
        list.forEach(function (node) {
            if (_this._searchValue.includes(' ')) {
                _this._searchValue.split(' ').forEach(function (word) {
                    _this.handleSearch(node, word);
                });
            }
            else {
                _this.handleSearch(node, _this._searchValue);
            }
            if (!util_1.isNullOrUndefined(node.children)) {
                _this.recursiveCheckList(node.children);
            }
        });
    };
    TerraNodeTreeComponent.prototype.handleSearch = function (node, value) {
        var tags = node.tags;
        if (!util_1.isNullOrUndefined(tags)) {
            var tagMatchFound_1 = false;
            tags.forEach(function (tag) {
                if (tag.toUpperCase().includes(value.toUpperCase())) {
                    tagMatchFound_1 = true;
                    return;
                }
            });
            if (tagMatchFound_1) {
                this.handleNodeVisibility(node);
            }
        }
        var name = this._translation.translate(node.name);
        var suggestion = name.toUpperCase();
        // check if search string is included in the given suggestion
        if (suggestion.includes(value.toUpperCase())) {
            this.handleNodeVisibility(node);
        }
    };
    TerraNodeTreeComponent.prototype.handleNodeVisibility = function (node) {
        if (!node.defaultVisibility) {
            return;
        }
        node.isVisible = true;
        this.inputConfig.toggleOpenParent(node, true);
        if (!node.hasLoaded && !util_1.isNullOrUndefined(node.onLazyLoad)) {
            this.inputConfig.handleLazyLoading(node);
        }
        if (!util_1.isNullOrUndefined(node.children)) {
            this.inputConfig.toggleVisiblityForAllChildren(node.children, true);
        }
        if (!util_1.isNullOrUndefined(node.parent)) {
            if (!node.parent.hasLoaded && !util_1.isNullOrUndefined(node.parent.onLazyLoad)) {
                this.inputConfig.handleLazyLoading(node.parent);
            }
            this.inputConfig.toggleVisibilityForAllParents(node.parent, true);
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", terra_node_tree_config_1.TerraNodeTreeConfig)
    ], TerraNodeTreeComponent.prototype, "inputConfig", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNodeTreeComponent.prototype, "inputShowSearch", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNodeTreeComponent.prototype, "isTreeDisabled", void 0);
    TerraNodeTreeComponent = __decorate([
        core_1.Component({
            selector: 'terra-node-tree',
            styles: [require('./terra-node-tree.component.scss')],
            template: require('./terra-node-tree.component.html')
        }),
        __metadata("design:paramtypes", [angular_l10n_1.TranslationService])
    ], TerraNodeTreeComponent);
    return TerraNodeTreeComponent;
}());
exports.TerraNodeTreeComponent = TerraNodeTreeComponent;

//# sourceMappingURL=terra-node-tree.component.js.map
