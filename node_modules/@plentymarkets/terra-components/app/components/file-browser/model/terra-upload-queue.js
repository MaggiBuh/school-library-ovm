"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var util_1 = require("util");
var TerraUploadQueue = /** @class */ (function () {
    function TerraUploadQueue(_uploadUrl, _uploadMethod) {
        if (_uploadMethod === void 0) { _uploadMethod = 'POST'; }
        var _this = this;
        this._uploadUrl = _uploadUrl;
        this._uploadMethod = _uploadMethod;
        this.items = [];
        this.size = 0;
        this._progressListeners = [];
        this._progressValue = -1;
        this.progress = new Observable_1.Observable(function (observer) {
            _this._progressListeners.push(observer);
            observer.next(_this._progressValue);
            return function () {
                var idx = _this._progressListeners.indexOf(observer);
                if (idx >= 0) {
                    _this._progressListeners.splice(idx, 1);
                }
            };
        });
    }
    TerraUploadQueue.prototype.add = function (item) {
        this.items.push(item);
        this.size += item.file.size;
        if (this.inProgress) {
            this.onProgress();
        }
        return this;
    };
    TerraUploadQueue.prototype.remove = function (item) {
        var idx = this.items.indexOf(item);
        this.items.splice(idx, 1);
        this.size -= item.file.size;
        if (this.inProgress) {
            this.onProgress();
        }
        return this;
    };
    TerraUploadQueue.prototype.startUpload = function () {
        var _this = this;
        if (this.items.length <= 0) {
            return Promise.resolve();
        }
        if (this.inProgress) {
            return this.inProgress;
        }
        this.inProgress = this.uploadAllItems()
            .then(function () {
            _this.inProgress = null;
            _this.items = [];
            _this.size = 0;
        });
    };
    TerraUploadQueue.prototype.uploadAllItems = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var nextItem = _this.items.shift();
            if (util_1.isNullOrUndefined(nextItem)) {
                resolve(null);
            }
            else {
                _this.uploadItem(nextItem).then(function () {
                    _this.uploadAllItems().then(resolve).catch(reject);
                }).catch(reject);
            }
        });
    };
    TerraUploadQueue.prototype.uploadItem = function (item) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var xhr = item._xhr = new XMLHttpRequest();
            item.emit('beforeUpload', item.file);
            xhr.upload.onprogress = function (event) {
                var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
                item.emit('onProgress', progress);
                _this.onProgress();
            };
            xhr.onload = function () {
                item.emit('onSuccess', xhr.response, xhr.status, _this.parseHeaders(xhr.getAllResponseHeaders()));
                item.uploaded = true;
                _this.onProgress();
                resolve(null);
            };
            xhr.onerror = function () {
                item.emit('onError', xhr.response, xhr.status, _this.parseHeaders(xhr.getAllResponseHeaders()));
                item.uploaded = true;
                _this.onProgress();
                reject(xhr.response);
            };
            xhr.onabort = function () {
                item.emit('onCancel', xhr.response, xhr.status, _this.parseHeaders(xhr.getAllResponseHeaders()));
                item.uploaded = true;
                _this.onProgress();
                reject(xhr.response);
            };
            xhr.open(_this._uploadMethod, _this.getUploadUrl(item.pathname), true);
            if (localStorage.getItem('accessToken')) {
                xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem('accessToken'));
            }
            xhr.send(item.file);
        });
    };
    TerraUploadQueue.prototype.onProgress = function () {
        var notLoaded = this.items
            .map(function (item) {
            return item.file.size;
        })
            .reduce(function (prev, current) {
            return prev + current;
        }, 0);
        var progress = 100 - Math.round((notLoaded / this.size) * 100);
        this._progressListeners.forEach(function (listener) {
            listener.next(progress || 0);
        });
    };
    TerraUploadQueue.prototype.parseHeaders = function (headers) {
        var parsed = {};
        headers.split('\n').forEach(function (header) {
            var pivot = header.indexOf(':');
            var key = header.substr(0, pivot).trim().toLowerCase();
            var value = header.substr(pivot + 1).trim();
            if (!util_1.isNullOrUndefined(key)) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + value : value;
            }
        });
        return parsed;
    };
    TerraUploadQueue.prototype.getUploadUrl = function (storageKey) {
        if (typeof this._uploadUrl === 'function') {
            return this._uploadUrl(storageKey);
        }
        else {
            return this._uploadUrl + '?key=' + storageKey;
        }
    };
    return TerraUploadQueue;
}());
exports.TerraUploadQueue = TerraUploadQueue;

//# sourceMappingURL=terra-upload-queue.js.map
