{"version":3,"sources":["app/components/file-browser/model/terra-upload-queue.ts"],"names":[],"mappings":"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","file":"app/components/file-browser/model/terra-upload-queue.js","sourcesContent":["import { TerraUploadItem } from './terra-upload-item';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { isNullOrUndefined } from 'util';\n\nexport type UploadQueueUrlFactory = (storageKey:string) => string;\n\nexport class TerraUploadQueue\n{\n    public progress:Observable<number>;\n    public inProgress:Promise<void>;\n\n    private items:Array<TerraUploadItem> = [];\n    private size:number = 0;\n\n    private _progressListeners:Array<Observer<number>> = [];\n    private _progressValue:number = -1;\n\n\n    constructor(private _uploadUrl:string | UploadQueueUrlFactory, private _uploadMethod:'GET' | 'POST' | 'DELETE' | 'PUT' = 'POST')\n    {\n        this.progress = new Observable((observer:Observer<number>):Function =>\n        {\n            this._progressListeners.push(observer);\n            observer.next(this._progressValue);\n\n            return ():void =>\n            {\n                let idx:number = this._progressListeners.indexOf(observer);\n                if(idx >= 0)\n                {\n                    this._progressListeners.splice(idx, 1);\n                }\n            };\n        });\n    }\n\n    public add(item:TerraUploadItem):TerraUploadQueue\n    {\n        this.items.push(item);\n        this.size += item.file.size;\n        if(this.inProgress)\n        {\n            this.onProgress();\n        }\n        return this;\n    }\n\n    public remove(item:TerraUploadItem):TerraUploadQueue\n    {\n        let idx:number = this.items.indexOf(item);\n        this.items.splice(idx, 1);\n        this.size -= item.file.size;\n        if(this.inProgress)\n        {\n            this.onProgress();\n        }\n        return this;\n    }\n\n    public startUpload():Promise<void>\n    {\n        if(this.items.length <= 0)\n        {\n            return Promise.resolve();\n        }\n\n        if(this.inProgress)\n        {\n            return this.inProgress;\n        }\n\n        this.inProgress = this.uploadAllItems()\n                              .then(() =>\n                              {\n                                  this.inProgress = null;\n                                  this.items = [];\n                                  this.size = 0;\n                              });\n    }\n\n    private uploadAllItems():Promise<void>\n    {\n        return new Promise((resolve:(resp:void) => void, reject:(err:any) => void):void =>\n        {\n            let nextItem:TerraUploadItem = this.items.shift();\n\n            if(isNullOrUndefined(nextItem))\n            {\n                resolve(null);\n            }\n            else\n            {\n                this.uploadItem(nextItem).then(() =>\n                {\n                    this.uploadAllItems().then(resolve).catch(reject);\n                }).catch(reject);\n            }\n        });\n    }\n\n    private uploadItem(item:TerraUploadItem):Promise<void>\n    {\n        return new Promise((resolve:(resp:void) => void, reject:(err:any) => void):void =>\n        {\n            let xhr:XMLHttpRequest = item._xhr = new XMLHttpRequest();\n\n            item.emit('beforeUpload', item.file);\n\n            xhr.upload.onprogress = (event:ProgressEvent):void =>\n            {\n                let progress:number = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n                item.emit('onProgress', progress);\n                this.onProgress();\n            };\n\n            xhr.onload = ():void =>\n            {\n                item.emit('onSuccess', xhr.response, xhr.status, this.parseHeaders(xhr.getAllResponseHeaders()));\n                item.uploaded = true;\n                this.onProgress();\n                resolve(null);\n            };\n\n            xhr.onerror = ():void =>\n            {\n                item.emit('onError', xhr.response, xhr.status, this.parseHeaders(xhr.getAllResponseHeaders()));\n                item.uploaded = true;\n                this.onProgress();\n                reject(xhr.response);\n            };\n\n            xhr.onabort = ():void =>\n            {\n                item.emit(\n                    'onCancel',\n                    xhr.response,\n                    xhr.status,\n                    this.parseHeaders(xhr.getAllResponseHeaders())\n                );\n                item.uploaded = true;\n                this.onProgress();\n                reject(xhr.response);\n            };\n\n            xhr.open(\n                this._uploadMethod,\n                this.getUploadUrl(item.pathname),\n                true\n            );\n\n            if(localStorage.getItem('accessToken'))\n            {\n                xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem('accessToken'));\n            }\n\n            xhr.send(item.file);\n        });\n\n    }\n\n    private onProgress():void\n    {\n        let notLoaded:number = this.items\n                                   .map((item:TerraUploadItem) =>\n                                   {\n                                       return item.file.size;\n                                   })\n                                   .reduce((prev:number, current:number) =>\n                                   {\n                                       return prev + current;\n                                   }, 0);\n\n        let progress:number = 100 - Math.round((notLoaded / this.size) * 100);\n        this._progressListeners.forEach((listener:Observer<number>) =>\n        {\n            listener.next(progress || 0);\n        });\n    }\n\n    private parseHeaders(headers:string):{ [key:string]:string }\n    {\n        let parsed:{ [key:string]:string } = {};\n        headers.split('\\n').forEach((header:string) =>\n        {\n            let pivot:number = header.indexOf(':');\n            let key:string = header.substr(0, pivot).trim().toLowerCase();\n            let value:string = header.substr(pivot + 1).trim();\n            if(!isNullOrUndefined(key))\n            {\n                parsed[key] = parsed[key] ? parsed[key] + ', ' + value : value;\n            }\n        });\n        return parsed;\n    }\n\n    private getUploadUrl(storageKey:string):string\n    {\n        if(typeof this._uploadUrl === 'function')\n        {\n            return this._uploadUrl(storageKey);\n        }\n        else\n        {\n            return this._uploadUrl + '?key=' + storageKey;\n        }\n    }\n}\n"],"sourceRoot":"/source/"}