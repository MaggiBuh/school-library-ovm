"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_helper_1 = require("../helper/path.helper");
var util_1 = require("util");
var TerraUploadItem = /** @class */ (function () {
    function TerraUploadItem(file, _path, _uploadService) {
        this.file = file;
        this._path = _path;
        this._uploadService = _uploadService;
        this.uploaded = false;
        this._beforeUpload = [];
        this._onSuccess = [];
        this._onCancel = [];
        this._onError = [];
        this._onProgress = [];
        if (util_1.isNullOrUndefined(file)) {
            this.uploaded = true;
        }
        if (!util_1.isNullOrUndefined(this._path) && this._path.charAt(0) === '/') {
            this._path = this._path.substr(1);
        }
    }
    Object.defineProperty(TerraUploadItem.prototype, "filename", {
        get: function () {
            var filenames = this.file.name.split('.');
            var extname = filenames.pop();
            return this._uploadService.prepareKey(this.file.name, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraUploadItem.prototype, "pathname", {
        get: function () {
            var pathname = this._uploadService.prepareKey(path_helper_1.PathHelper.join(this._path, this.filename));
            if (pathname.charAt(0) === '/') {
                pathname = pathname.substr(1);
            }
            return pathname;
        },
        enumerable: true,
        configurable: true
    });
    TerraUploadItem.prototype.beforeUpload = function (callback) {
        this._beforeUpload.push(callback);
        return this;
    };
    TerraUploadItem.prototype.onSuccess = function (callback) {
        this._onSuccess.push(callback);
        return this;
    };
    TerraUploadItem.prototype.onError = function (callback) {
        this._onError.push(callback);
        return this;
    };
    TerraUploadItem.prototype.onCancel = function (callback) {
        this._onCancel.push(callback);
        return this;
    };
    TerraUploadItem.prototype.onProgress = function (callback) {
        this._onProgress.push(callback);
        return this;
    };
    TerraUploadItem.prototype.cancelUpload = function () {
        this._uploadService.queue.remove(this);
        if (!util_1.isNullOrUndefined(this._xhr)) {
            this._xhr.abort();
        }
    };
    TerraUploadItem.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (['beforeUpload',
            'onSuccess',
            'onError',
            'onCancel',
            'onProgress'].indexOf(event) >= 0) {
            this['_' + event].forEach(function (callback) {
                callback.apply(void 0, args);
            });
            if (['onSuccess',
                'onError',
                'onCancel'].indexOf(event) >= 0) {
                this.uploaded = true;
            }
        }
    };
    TerraUploadItem.DONE = new TerraUploadItem(null, null, null);
    return TerraUploadItem;
}());
exports.TerraUploadItem = TerraUploadItem;

//# sourceMappingURL=terra-upload-item.js.map
