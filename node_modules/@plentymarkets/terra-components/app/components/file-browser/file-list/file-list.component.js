"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var moment = require("moment");
var terra_base_storage_interface_1 = require("../terra-base-storage.interface");
var path_helper_1 = require("../helper/path.helper");
var terra_file_browser_component_1 = require("../terra-file-browser.component");
var fileType_helper_1 = require("../helper/fileType.helper");
var terra_simple_table_component_1 = require("../../tables/simple/terra-simple-table.component");
var terra_file_browser_service_1 = require("../terra-file-browser.service");
var clipboard_helper_1 = require("../helper/clipboard.helper");
var angular_l10n_1 = require("angular-l10n");
var util_1 = require("util");
var TerraFileListComponent = /** @class */ (function () {
    function TerraFileListComponent(_changeDetector, _fileBrowserService, _translationService, _parentFileBrowser) {
        this._changeDetector = _changeDetector;
        this._fileBrowserService = _fileBrowserService;
        this._translationService = _translationService;
        this._parentFileBrowser = _parentFileBrowser;
        this._translationPrefix = 'terraFileBrowser';
        this.inputStorageServices = null;
        this._isDragActive = false;
        this._uploadStatus = {};
        this._showNewDirectoryPrompt = false;
        this._newDirectoryName = '';
        this._objectsToDelete = [];
        this._selectedStorageObjects = [];
        this._fileTableHeaderList = [];
        this._fileTableRowList = [];
    }
    Object.defineProperty(TerraFileListComponent.prototype, "activeStorageService", {
        get: function () {
            if (!util_1.isNullOrUndefined(this._activeStorageService)) {
                return this._activeStorageService;
            }
            if (!util_1.isNullOrUndefined(this.inputStorageServices)) {
                return this.inputStorageServices[0];
            }
            return null;
        },
        set: function (service) {
            var _this = this;
            if (service !== this._activeStorageService) {
                if (!util_1.isNullOrUndefined(this._storageSubscription)) {
                    this._storageSubscription.unsubscribe();
                }
                this._storageList = null;
                this._currentStorageRoot = null;
                this._activeStorageService = service;
                if (this._imagePreviewObject) {
                    this._imagePreviewObject = null;
                    this._parentFileBrowser.splitConfig.hideImagePreview();
                }
                this.renderFileList();
                this._storageSubscription = this.activeStorageService.getStorageList().subscribe(function (storageList) {
                    _this._storageList = storageList;
                    _this.renderFileList();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraFileListComponent.prototype, "currentStorageRoot", {
        get: function () {
            if (!util_1.isNullOrUndefined(this._currentStorageRoot)) {
                return this._currentStorageRoot;
            }
            if (!util_1.isNullOrUndefined(this._storageList)) {
                return this._storageList.root;
            }
            return null;
        },
        set: function (storageObject) {
            if ((util_1.isNullOrUndefined(storageObject) || storageObject.isDirectory) && this._currentStorageRoot !== storageObject) {
                if (this._imagePreviewObject && storageObject !== this._imagePreviewObject) {
                    this._imagePreviewObject = null;
                    this._parentFileBrowser.splitConfig.hideImagePreview();
                }
                this._currentStorageRoot = storageObject;
                this.renderFileList();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraFileListComponent.prototype, "parentStorageObjects", {
        get: function () {
            var current = this.currentStorageRoot;
            var parents = [];
            if (!util_1.isNullOrUndefined(this._imagePreviewObject)) {
                parents.push(this._imagePreviewObject);
            }
            while (!util_1.isNullOrUndefined(current)) {
                parents.push(current);
                current = current.parent;
            }
            return parents.reverse();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraFileListComponent.prototype, "newDirectoryName", {
        get: function () {
            return this._newDirectoryName;
        },
        set: function (name) {
            this._newDirectoryName = this.activeStorageService.prepareKey(name, true, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraFileListComponent.prototype, "_deleteCount", {
        get: function () {
            if (util_1.isNullOrUndefined(this._objectsToDelete)) {
                return 0;
            }
            return this._objectsToDelete
                .map(function (object) {
                return object.fileCount;
            })
                .reduce(function (sum, current) {
                return sum + current;
            }, 0);
        },
        enumerable: true,
        configurable: true
    });
    TerraFileListComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!util_1.isNullOrUndefined(this.inputStorageServices) && this.inputStorageServices.length > 0) {
            this.activeStorageService = this.inputStorageServices[0];
        }
        else {
            console.error('At least one instance of TerraBaseStorageService is required');
        }
        this._dragSubscription = this._fileBrowserService.isDragActive.subscribe(function (isDragActive) {
            _this._isDragActive = isDragActive;
            _this._changeDetector.detectChanges();
        });
        this._parentFileBrowser.onSelectedUrlChange.subscribe(function (selectedUrl) {
            if (selectedUrl && _this._storageList) {
                var object_1 = _this._storageList.flatList.find(function (object) { return object.publicUrl === selectedUrl; });
                if (!util_1.isNullOrUndefined(object_1)) {
                    _this.currentStorageRoot = object_1.parent;
                    if (fileType_helper_1.FileType.isWebImage(object_1.key)) {
                        _this._imagePreviewObject = object_1;
                        _this._parentFileBrowser.splitConfig.showImagePreview(object_1, _this.activeStorageService);
                    }
                    var row = _this._fileTableRowList.find(function (r) { return r.value === object_1; });
                    _this._fileTableComponent.inputHighlightedRow = row;
                }
            }
        });
    };
    TerraFileListComponent.prototype.ngAfterViewInit = function () {
        this._fileBrowserService.addDropzone(this._fileDropzoneElement.nativeElement);
    };
    TerraFileListComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('inputStorageServices') && changes['inputStorageServices'].previousValue === null) {
            this.activeStorageService = this.inputStorageServices[0];
        }
    };
    TerraFileListComponent.prototype.ngOnDestroy = function () {
        if (!util_1.isNullOrUndefined(this._storageSubscription)) {
            this._storageSubscription.unsubscribe();
        }
        if (!util_1.isNullOrUndefined(this._dragSubscription)) {
            this._dragSubscription.unsubscribe();
        }
        this._fileBrowserService.removeDropzone(this._fileDropzoneElement.nativeElement);
    };
    TerraFileListComponent.prototype.createDirectory = function () {
        var path = path_helper_1.PathHelper.join(this.currentStorageRoot ? this.currentStorageRoot.key : '/', this.newDirectoryName);
        this._showNewDirectoryPrompt = false;
        this._newDirectoryName = null;
        this.activeStorageService.createDirectory(path);
    };
    TerraFileListComponent.prototype.deleteObjects = function () {
        var keyList = [];
        var extractKeys = function (objects) {
            objects.forEach(function (object) {
                keyList.push(object.key);
                if (object.isDirectory) {
                    extractKeys(object.children);
                }
            });
        };
        extractKeys(this._objectsToDelete);
        this.activeStorageService.deleteFiles(keyList);
        this._objectsToDelete = [];
        if (!util_1.isNullOrUndefined(this._imagePreviewObject) && keyList.indexOf(this._imagePreviewObject.key)) {
            this._imagePreviewObject = null;
            this._parentFileBrowser.splitConfig.hideImagePreview();
        }
    };
    TerraFileListComponent.prototype.renderFileList = function () {
        if (!util_1.isNullOrUndefined(this.activeStorageService)) {
            this.createHeaderListDependingOnAccessLevel();
        }
        if (!util_1.isNullOrUndefined(this.currentStorageRoot)) {
            this.fillTableRowList();
        }
        else {
            this._fileTableRowList = [];
        }
        this._selectedStorageObjects = [];
        this._parentFileBrowser.outputSelectedChange.emit(null);
        this._changeDetector.detectChanges();
    };
    TerraFileListComponent.prototype.fillTableRowList = function () {
        var _this = this;
        this._fileTableRowList = this.currentStorageRoot.children.filter(function (storageObject) {
            return storageObject.isFile || _this._parentFileBrowser.inputAllowFolders;
        }).sort(function (objectA, objectB) {
            return objectA.name.localeCompare(objectB.name);
        }).map(function (storageObject) {
            return _this.createTableRow(storageObject);
        });
    };
    TerraFileListComponent.prototype.createTableRow = function (storageObject) {
        var cellList = [];
        cellList.push({
            caption: storageObject.name,
            icon: this._uploadStatus[storageObject.key] ? 'icon-loading' : storageObject.icon
        });
        if (!(this.activeStorageService instanceof terra_base_storage_interface_1.TerraBasePrivateStorageService)) {
            cellList.push({
                caption: storageObject.isFile ? storageObject.publicUrl : ''
            });
            this.addClipboardButton(storageObject, cellList);
        }
        cellList.push({
            caption: storageObject.isFile ? storageObject.sizeString : ''
        }, {
            caption: storageObject.isFile ? moment(storageObject.lastModified).format('YYYY-MM-DD HH:mm') : ''
        });
        if (this.activeStorageService instanceof terra_base_storage_interface_1.TerraBasePrivateStorageService && storageObject.isFile) {
            this.addDownloadButton(storageObject, cellList);
        }
        this.addDeleteButton(storageObject, cellList);
        return {
            cellList: cellList,
            value: storageObject,
            disabled: !this.isAllowed(storageObject.key)
        };
    };
    TerraFileListComponent.prototype.addClipboardButton = function (storageObject, cellList) {
        var clipboardButton = {
            icon: 'icon-copy_clipboard',
            clickFunction: function (event) {
                clipboard_helper_1.ClipboardHelper.copyText(storageObject.publicUrl);
                event.stopPropagation();
            },
            tooltipText: this._translationService.translate(this._translationPrefix + '.copyToClipboard'),
            tooltipPlacement: 'left'
        };
        cellList.push({
            buttonList: storageObject.isFile ? [clipboardButton] : []
        });
    };
    TerraFileListComponent.prototype.addDownloadButton = function (storageObject, cellList) {
        var _this = this;
        cellList.push({
            buttonList: [{
                    icon: 'icon-download',
                    clickFunction: function (event) {
                        _this.activeStorageService.downloadFile(storageObject.key);
                        event.stopPropagation();
                    },
                    tooltipText: this._translationService.translate(this._translationPrefix + '.downloadFile'),
                    tooltipPlacement: 'left'
                }]
        });
    };
    TerraFileListComponent.prototype.addDeleteButton = function (storageObject, cellList) {
        var _this = this;
        cellList.push({
            buttonList: [{
                    icon: 'icon-delete',
                    clickFunction: function (event) {
                        _this._objectsToDelete = [storageObject];
                        event.stopPropagation();
                    },
                    isSecondary: true,
                    tooltipText: storageObject.isFile ?
                        this._translationService.translate(this._translationPrefix + '.deleteFile') :
                        this._translationService.translate(this._translationPrefix + '.deleteFolder'),
                    tooltipPlacement: 'left'
                }]
        });
    };
    TerraFileListComponent.prototype.createHeaderListDependingOnAccessLevel = function () {
        if (this.activeStorageService instanceof terra_base_storage_interface_1.TerraBasePrivateStorageService) {
            this.createPrivateHeaderList();
        }
        else {
            this.createPublicHeaderList();
        }
    };
    TerraFileListComponent.prototype.createPublicHeaderList = function () {
        this._fileTableHeaderList = [
            {
                caption: this._translationService.translate(this._translationPrefix + '.fileName'),
                width: '30%'
            },
            {
                caption: this._translationService.translate(this._translationPrefix + '.fileURL'),
                width: '50%'
            },
            {
                caption: '',
                width: '1'
            },
            {
                caption: this._translationService.translate(this._translationPrefix + '.fileSize'),
                width: '7.5%'
            },
            {
                caption: this._translationService.translate(this._translationPrefix + '.lastChange'),
                width: '12.5%'
            },
            {
                caption: '',
                width: '1'
            }
        ];
    };
    TerraFileListComponent.prototype.createPrivateHeaderList = function () {
        this._fileTableHeaderList = [
            {
                caption: this._translationService.translate(this._translationPrefix + '.fileName'),
                width: '80%'
            },
            {
                caption: this._translationService.translate(this._translationPrefix + '.fileSize'),
                width: '7.5%'
            },
            {
                caption: this._translationService.translate(this._translationPrefix + '.lastChange'),
                width: '12.5%'
            },
            {
                caption: '',
                width: '1'
            },
            {
                caption: '',
                width: '1'
            }
        ];
    };
    TerraFileListComponent.prototype.isAllowed = function (filename) {
        if (util_1.isNullOrUndefined(filename)) {
            return false;
        }
        return this._parentFileBrowser.inputAllowedExtensions.length <= 0
            || this._parentFileBrowser.inputAllowedExtensions.indexOf(path_helper_1.PathHelper.extName(filename)) >= 0
            || path_helper_1.PathHelper.isDirectory(filename);
    };
    TerraFileListComponent.prototype.onActiveRowChange = function (row) {
        var _this = this;
        if (util_1.isNullOrUndefined(this._imagePreviewTimeout)) {
            clearTimeout(this._imagePreviewTimeout);
        }
        var debounceFn = function () {
            var storageObject = row.value;
            if (!util_1.isNullOrUndefined(storageObject) && fileType_helper_1.FileType.isWebImage(storageObject.key)) {
                _this._imagePreviewObject = storageObject;
                _this._parentFileBrowser.splitConfig.showImagePreview(storageObject, _this.activeStorageService);
            }
            else {
                _this._imagePreviewObject = null;
                _this._parentFileBrowser.splitConfig.hideImagePreview();
            }
            _this._parentFileBrowser.outputSelectedChange.emit(storageObject);
        };
        this._imagePreviewTimeout = setTimeout(debounceFn.bind(this), 500);
    };
    TerraFileListComponent.prototype.onSelectionChange = function (rows) {
        this._selectedStorageObjects = rows.map(function (row) {
            return row.value;
        });
    };
    TerraFileListComponent.prototype.onFileSelect = function (event) {
        if (!util_1.isNullOrUndefined(event.srcElement)) {
            this.activeStorageService
                .uploadFiles(event.srcElement.files || [], this.currentStorageRoot ? this.currentStorageRoot.key : '/');
            // unset value of file input to allow selecting same file again
            event.target.value = '';
        }
    };
    TerraFileListComponent.prototype.onFileDrop = function (event) {
        if (!util_1.isNullOrUndefined(event.dataTransfer.files)) {
            this.activeStorageService.uploadFiles(event.dataTransfer.files, this.currentStorageRoot ? this.currentStorageRoot.key : '/');
        }
    };
    TerraFileListComponent.prototype.uploadFiles = function (fileList) {
        var _this = this;
        var uploadPrefix = this.currentStorageRoot ? this.currentStorageRoot.key : '/';
        this.activeStorageService
            .uploadFiles(event.srcElement.files || [], uploadPrefix)
            .forEach(function (uploadItem) {
            _this._uploadStatus[uploadPrefix + uploadItem.filename] = true;
            uploadItem.onSuccess(function () {
                _this._uploadStatus[uploadPrefix + uploadItem.filename] = false;
                _this.renderFileList();
            });
        });
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraFileListComponent.prototype, "inputStorageServices", void 0);
    __decorate([
        core_1.ViewChild('fileDropzone', { read: core_1.ElementRef }),
        __metadata("design:type", core_1.ElementRef)
    ], TerraFileListComponent.prototype, "_fileDropzoneElement", void 0);
    __decorate([
        core_1.ViewChild(terra_simple_table_component_1.TerraSimpleTableComponent),
        __metadata("design:type", terra_simple_table_component_1.TerraSimpleTableComponent)
    ], TerraFileListComponent.prototype, "_fileTableComponent", void 0);
    TerraFileListComponent = __decorate([
        core_1.Component({
            selector: 'terra-file-list',
            template: require('./file-list.component.html'),
            styles: [require('./file-list.component.scss')]
        }),
        __param(3, core_1.Inject(core_1.forwardRef(function () { return terra_file_browser_component_1.TerraFileBrowserComponent; }))),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef,
            terra_file_browser_service_1.TerraFileBrowserService,
            angular_l10n_1.TranslationService,
            terra_file_browser_component_1.TerraFileBrowserComponent])
    ], TerraFileListComponent);
    return TerraFileListComponent;
}());
exports.TerraFileListComponent = TerraFileListComponent;

//# sourceMappingURL=file-list.component.js.map
