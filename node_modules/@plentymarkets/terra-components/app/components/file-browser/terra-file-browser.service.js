"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var TerraFileBrowserService = /** @class */ (function () {
    function TerraFileBrowserService(zone) {
        this.zone = zone;
        this._dropzones = [];
        this._globalListenersDefined = false;
        this._dragenterTarget = null;
        this.isDragActive = new BehaviorSubject_1.BehaviorSubject(false);
    }
    TerraFileBrowserService.prototype.addDropzone = function (dropzone) {
        if (!this._globalListenersDefined) {
            this.setupGlobalListeners();
        }
        this._dropzones.push(dropzone);
    };
    TerraFileBrowserService.prototype.removeDropzone = function (dropzone) {
        var idx = this._dropzones.indexOf(dropzone);
        if (idx >= 0) {
            this._dropzones.splice(idx, 1);
        }
    };
    TerraFileBrowserService.prototype.isDropzone = function (element) {
        return this._dropzones.some(function (dropzone) {
            return dropzone.contains(element);
        });
    };
    TerraFileBrowserService.prototype.setupGlobalListeners = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            var setEffect = function (event) {
                if (_this.isDropzone(event.target)) {
                    event.dataTransfer.effectAllowed = 'copy';
                    event.dataTransfer.dropEffect = 'copy';
                }
                else {
                    event.dataTransfer.effectAllowed = 'none';
                    event.dataTransfer.dropEffect = 'none';
                }
            };
            window.addEventListener('dragenter', function (event) {
                _this._dragenterTarget = event.target;
                event.preventDefault();
                if (!_this.isDragActive.value) {
                    _this.isDragActive.next(true);
                }
            });
            window.addEventListener('dragover', function (event) {
                event.preventDefault();
                setEffect(event);
            });
            window.addEventListener('dragleave', function (event) {
                if (event.target === _this._dragenterTarget) {
                    _this._dragenterTarget = null;
                    _this.isDragActive.next(false);
                }
            });
            window.addEventListener('drop', function (event) {
                event.preventDefault();
                _this._dragenterTarget = null;
                if (_this.isDragActive.value) {
                    _this.isDragActive.next(false);
                }
            });
        });
        this._globalListenersDefined = true;
    };
    TerraFileBrowserService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [core_1.NgZone])
    ], TerraFileBrowserService);
    return TerraFileBrowserService;
}());
exports.TerraFileBrowserService = TerraFileBrowserService;

//# sourceMappingURL=terra-file-browser.service.js.map
