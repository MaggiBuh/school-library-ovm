{"version":3,"sources":["app/components/file-browser/terra-frontend-storage.service.ts"],"names":[],"mappings":"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","file":"app/components/file-browser/terra-frontend-storage.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TerraUploadItem } from './model/terra-upload-item';\nimport { TerraUploadQueue } from './model/terra-upload-queue';\nimport { Http } from '@angular/http';\nimport { TerraStorageObjectList } from './model/terra-storage-object-list';\nimport { Observable } from 'rxjs/Observable';\nimport { createS3StorageObject } from './model/s3-storage-object.interface';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TerraImageMetadata } from './model/terra-image-metadata.interface';\nimport { TranslationService } from 'angular-l10n';\nimport { isNullOrUndefined } from 'util';\nimport { TerraLoadingSpinnerService } from '../../../';\nimport { TerraBaseMetadataStorageService } from './terra-base-metadata-storage.interface';\n\n@Injectable()\nexport class TerraFrontendStorageService extends TerraBaseMetadataStorageService\n{\n    public isImagePreviewEnabled:boolean = true;\n\n    public name:string;\n\n    public queue:TerraUploadQueue = new TerraUploadQueue('/rest/storage/frontend/file');\n\n    private _storageInitialized:boolean = false;\n\n    private _storageListSubject:BehaviorSubject<TerraStorageObjectList> = new BehaviorSubject(null);\n\n    private get _storageList():TerraStorageObjectList\n    {\n        return this._storageListSubject.getValue();\n    }\n\n    public get uploadProgress():Observable<number>\n    {\n        return this.queue.progress;\n    }\n\n    private _metadataCache:{ [storageKey:string]:TerraImageMetadata } = {};\n\n    constructor(_terraLoadingSpinnerService:TerraLoadingSpinnerService, _http:Http, _translation:TranslationService)\n    {\n        super(_terraLoadingSpinnerService, _http, '/rest/storage/frontend/file');\n        this.name = _translation.translate('terraFileBrowser.myFiles');\n    }\n\n    public getStorageList():Observable<TerraStorageObjectList>\n    {\n        if(!this._storageInitialized)\n        {\n            this.initStorageList();\n        }\n\n        return this._storageListSubject;\n    }\n\n    public createDirectory(path:string):Observable<void>\n    {\n        if(path.charAt(0) === '/')\n        {\n            path = path.substr(1);\n        }\n\n        if(path.charAt(path.length - 1) !== '/')\n        {\n            path += '/';\n        }\n\n        path = this.prepareKey(path);\n\n        this.setAuthorization();\n        let request:Observable<void> = this.mapRequest(\n            this.http.post(\n                this.url + '?key=' + path,\n                null,\n                {\n                    headers: this.headers\n                }\n            )\n        );\n\n        request.subscribe(() =>\n        {\n            this._storageListSubject.next(\n                this._storageList.insertObject(createS3StorageObject(path))\n            );\n        });\n\n        return request;\n    }\n\n    public uploadFiles(files:FileList | File[], path:string = '/'):TerraUploadItem[]\n    {\n        if(isNullOrUndefined(files) || files.length <= 0)\n        {\n            return [];\n        }\n\n        let uploadItems:Array<TerraUploadItem> = [];\n\n        /* tslint:disable:prefer-for-of */\n        for(let i:number = 0; i < files.length; i++)\n        {\n            uploadItems.push(this.uploadFile(files[i], path));\n        }\n        /* tslint:enable:prefer-for-of */\n\n        return uploadItems;\n    }\n\n    private uploadFile(file:File, path:string = '/'):TerraUploadItem\n    {\n        if(isNullOrUndefined(file))\n        {\n            return TerraUploadItem.DONE;\n        }\n\n        let item:TerraUploadItem = new TerraUploadItem(file, path, this);\n        item.beforeUpload(() =>\n        {\n            this._storageListSubject.next(\n                this._storageList.insertObject(createS3StorageObject(item.pathname))\n            );\n        });\n\n        item.onSuccess((response:string) =>\n        {\n            let s3Data:any = JSON.parse(response);\n            this._storageListSubject.next(\n                this._storageList.insertObject({\n                    eTag:         s3Data.eTag,\n                    key:          s3Data.key,\n                    lastModified: (new Date()).toISOString(),\n                    size:         file.size,\n                    publicUrl:    s3Data.publicUrl,\n                    storageClass: 'STANDARD'\n                })\n            );\n        });\n\n        item.onError(() =>\n        {\n            this._storageList.root.removeChild(item.pathname);\n            this._storageListSubject.next(this._storageList);\n        });\n\n        item.onCancel(() =>\n        {\n            this._storageList.root.removeChild(item.pathname);\n            this._storageListSubject.next(this._storageList);\n        });\n\n        this.queue.add(item);\n\n        this.queue.startUpload();\n\n        return item;\n    }\n\n    public getMetadata(key:string):Observable<TerraImageMetadata>\n    {\n        if(this._metadataCache.hasOwnProperty(key))\n        {\n            return Observable.from([this._metadataCache[key]]);\n        }\n\n        this.setAuthorization();\n        let request:Observable<any> = this.mapRequest(\n            this.http.get(\n                this.url + '/metadata?key=' + key,\n                {\n                    headers: this.headers\n                }\n            )\n        );\n\n        request.subscribe((metadata:any) =>\n            {\n                this._metadataCache[key] = metadata;\n            },\n            () =>\n            {\n                delete this._metadataCache[key];\n            }\n        );\n\n        return request;\n    }\n\n    public updateMetadata(key:string, metadata:TerraImageMetadata):Observable<any>\n    {\n        this.setAuthorization();\n        let request:Observable<any> = this.mapRequest(\n            this.http.post(\n                this.url + '/metadata',\n                {\n                    key:      key,\n                    metadata: metadata\n                },\n                {\n                    headers: this.headers\n                }\n            )\n        );\n\n        request.subscribe(() =>\n            {\n                this._metadataCache[key] = metadata;\n            },\n            () =>\n            {\n                delete this._metadataCache[key];\n            }\n        );\n\n        return request;\n    }\n\n    public deleteFiles(keyList:string[]):Observable<void>\n    {\n        this.setAuthorization();\n        let request:Observable<any> = this.mapRequest(\n            this.http.delete(\n                '/rest/storage/frontend/files?' + keyList.map((key:string):string => 'keyList[]=' + key).join('&'),\n                {\n                    headers: this.headers\n                }\n            )\n        );\n\n        request.subscribe(():void =>\n            {\n                keyList.forEach((key:string):void => this._storageList.root.removeChild(key));\n                this._storageListSubject.next(this._storageList);\n            },\n            (err:any):void =>\n            {\n                this._storageInitialized = false;\n                this._storageListSubject.next(null);\n            }\n        );\n\n        return request;\n    }\n\n    private initStorageList(continuationToken?:string):void\n    {\n        this._storageInitialized = true;\n\n        let url:string = '/rest/storage/frontend/files';\n        if(!isNullOrUndefined(continuationToken))\n        {\n            url += '?continuationToken=' + continuationToken;\n        }\n\n        this.setAuthorization();\n        this.mapRequest(this.http.get(url, {headers: this.headers})).subscribe((results:any):void =>\n            {\n                let storageList:TerraStorageObjectList = this._storageListSubject.getValue() || new TerraStorageObjectList();\n                storageList.insertObjects(results.objects);\n                this._storageListSubject.next(storageList);\n\n                if(results.isTruncated && results.nextContinuationToken.length > 0)\n                {\n                    this.initStorageList(results.nextContinuationToken);\n                }\n            },\n            (err:any):void =>\n            {\n                console.error(err);\n                this._storageInitialized = false;\n                this._storageListSubject.next(null);\n            }\n        );\n    }\n}\n"],"sourceRoot":"/source/"}