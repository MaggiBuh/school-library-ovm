{"version":3,"sources":["app/components/category-picker/terra-category-picker.component.ts"],"names":[],"mappings":"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","file":"app/components/category-picker/terra-category-picker.component.js","sourcesContent":["import {\n    AfterContentChecked,\n    Component,\n    forwardRef,\n    Input,\n    OnInit\n} from '@angular/core';\nimport { TranslationService } from 'angular-l10n';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TerraCategoryPickerBaseService } from './service/terra-category-picker-base.service';\nimport { CategoryTreeConfig } from './config/category-tree.config';\nimport { TerraNodeInterface } from '../../../';\nimport { CategoryTreeData } from './data/category-tree.data';\nimport { CategoryDataInterface } from './data/category-data.interface';\nimport { CategoryDetailDataInterface } from './data/category-detail-data.interface';\nimport { isNullOrUndefined } from 'util';\nimport { CategoryPagerDataInterface } from './data/category-pager-data.interface';\nimport { CategoryValueInterface } from './data/category-value.interface';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector:  'terra-category-picker',\n    template:  require('./terra-category-picker.component.html'),\n    styles:    [require('./terra-category-picker.component.scss')],\n    providers: [{\n        provide:     NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => TerraCategoryPickerComponent),\n        multi:       true\n    },\n                CategoryTreeConfig]\n})\nexport class TerraCategoryPickerComponent implements OnInit, AfterContentChecked\n{\n\n    /**\n     * @description Service, that is used to request the category data from the server\n     */\n    @Input()\n    public inputCategoryService:TerraCategoryPickerBaseService;\n\n    @Input()\n    public inputIsDisabled:boolean;\n\n    @Input()\n    public inputName:string;\n\n    public toggleTree:boolean = false;\n\n    private _value:number = 0;\n    private _completeCategory:CategoryValueInterface = {\n        id:               null,\n        isActive:         null,\n        isOpen:           null,\n        isVisible:        null,\n        name:             '',\n        tooltip:          '',\n        tooltipPlacement: '',\n    };\n\n    private _categoryName:string = '';\n    private _list:Array<TerraNodeInterface<CategoryTreeData>> = [];\n\n    constructor(private translation:TranslationService,\n                public categoryTreeConfig:CategoryTreeConfig)\n    {\n    }\n\n    public ngAfterContentChecked():void\n    {\n        if(this.categoryTreeConfig.list.length === 0)\n        {\n            this.categoryTreeConfig.list = this._list;\n        }\n    }\n\n    public ngOnInit():void\n    {\n        if(isNullOrUndefined(this.inputName))\n        {\n            this.inputName = this.translation.translate('terraCategoryPicker.category');\n        }\n        this.categoryTreeConfig.list = this._list;\n        this.getCategoriesByParent(null);\n    }\n\n    public getCompleteCategoryObject():CategoryValueInterface\n    {\n        return this._completeCategory;\n    }\n\n    // From ControlValueAccessor interface\n    public writeValue(value:any):void\n    {\n        if(!isNullOrUndefined(value))\n        {\n            this.inputCategoryService.requestCategoryDataById(value).subscribe((data:any) =>\n            {\n                if(isNullOrUndefined(this.categoryTreeConfig.findNodeById(value)))\n                {\n                    this.addNodes(data, null);\n                }\n\n                let nodeToSelect:TerraNodeInterface<CategoryTreeData> = this.categoryTreeConfig.findNodeById(value);\n\n                if(!isNullOrUndefined(nodeToSelect))\n                {\n                    this.categoryTreeConfig.currentSelectedNode = nodeToSelect;\n                    this._categoryName = this.categoryTreeConfig.currentSelectedNode.name;\n                }\n\n                this._value = value;\n                this.updateCompleteCategory(nodeToSelect);\n                this.onTouchedCallback();\n                this.onChangeCallback(this._value);\n            });\n        }\n    }\n\n    // Set touched on blur\n    public onBlur():void\n    {\n        this.onTouchedCallback();\n    }\n\n    // From ControlValueAccessor interface\n    public registerOnChange(fn:any):void\n    {\n        this.onChangeCallback = fn;\n    }\n\n    // From ControlValueAccessor interface\n    public registerOnTouched(fn:any):void\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    public showTree():void\n    {\n        this.toggleTree = !this.toggleTree;\n    }\n\n    public onSelectNode():void\n    {\n        if(!isNullOrUndefined(this.categoryTreeConfig.currentSelectedNode))\n        {\n            this._categoryName = this.categoryTreeConfig.currentSelectedNode.name;\n            this.writeValue(this.categoryTreeConfig.currentSelectedNode.id);\n        }\n        this.toggleTree = !this.toggleTree;\n    }\n\n    public reset():void\n    {\n        this.categoryTreeConfig.currentSelectedNode = {\n            id:               null,\n            isActive:         null,\n            isOpen:           null,\n            isVisible:        null,\n            name:             '',\n            tooltip:          '',\n            tooltipPlacement: '',\n        };\n        this._categoryName = '';\n        this._value = 0;\n\n        this.onTouchedCallback();\n        this.onChangeCallback(this._value);\n    }\n\n    private updateCompleteCategory(category:TerraNodeInterface<CategoryTreeData>):void\n    {\n        this._completeCategory.id = +category.id;\n        this._completeCategory.isActive = category.isActive;\n        this._completeCategory.isOpen = category.isOpen;\n        this._completeCategory.isVisible = category.isVisible;\n        this._completeCategory.name = category.name;\n        this._completeCategory.tooltip = category.tooltip;\n        this._completeCategory.tooltipPlacement = category.tooltipPlacement;\n    }\n\n    private getCategoriesByParentId(parentId:number | string):() => Observable<any>\n    {\n        return ():Observable<CategoryPagerDataInterface> => this.getCategories(parentId);\n    }\n\n    private getCategories(parentId:number | string):Observable<CategoryPagerDataInterface>\n    {\n        let obs:Observable<CategoryPagerDataInterface> = this.inputCategoryService.requestCategoryData(parentId);\n\n        obs.subscribe((data:CategoryPagerDataInterface) =>\n        {\n            this.addNodes(data, parentId);\n        });\n\n        return obs;\n    }\n\n    private addNodes(data:any, parentNodeId:number | string):void\n    {\n        // List of Categories which will be turned into Nodes to add to the node tree\n        let entries:Array<CategoryDataInterface> = data.entries;\n\n        // Necessary for re-initializing of the Node Tree after data was loaded\n        if(this.categoryTreeConfig.list.length === 1 && this.categoryTreeConfig.list[0] === this.categoryTreeConfig.currentSelectedNode)\n        {\n            this.categoryTreeConfig.removeNodeById(this.categoryTreeConfig.currentSelectedNode.id);\n            this.categoryTreeConfig.list = [];\n        }\n\n        if(!isNullOrUndefined(entries))\n        {\n            entries.forEach((entry:any) =>\n            {\n                let categoryData:CategoryDataInterface = entry;\n                let categoryDetail:CategoryDetailDataInterface = null;\n\n                // If the node hasn't already been added the routine will be started\n                if(isNullOrUndefined(this.categoryTreeConfig.findNodeById(categoryData.id)))\n                {\n                    if(categoryData.type === 'container')\n                    {\n                        return;\n                    }\n                    else\n                    {\n                        categoryDetail = categoryData.details[0];\n                    }\n\n                    // Create Node to add to tree later\n                    let childNode:TerraNodeInterface<CategoryTreeData> = {\n                        id:               categoryData.id,\n                        name:             categoryDetail.name,\n                        isVisible:        true,\n                        tooltip:          'ID: ' + categoryData.id,\n                        tooltipPlacement: 'top'\n                    };\n\n                    let parentNode:TerraNodeInterface<CategoryTreeData>;\n\n                    // If the category has a parent, the parent node is created from the parentId in the category data\n                    if(!isNullOrUndefined(categoryData.parentCategoryId))\n                    {\n                        parentNode = this.categoryTreeConfig.findNodeById(categoryData.parentCategoryId);\n                    }\n\n                    // If the parentNode is still null it is tried to create the parent node out of the given id\n                    if(isNullOrUndefined(parentNode))\n                    {\n                        if(isNullOrUndefined(parentNodeId))\n                        {\n                            parentNode = null;\n                        }\n                        else\n                        {\n                            parentNode = this.categoryTreeConfig.findNodeById(parentNodeId);\n                        }\n                    }\n\n                    // If the category has children the lazy-loading method will be added to the parent node\n                    if(categoryData.hasChildren)\n                    {\n                        childNode.onLazyLoad = this.getCategoriesByParentId(childNode.id);\n                    }\n\n                    // The finished node is added to the node tree\n                    this.categoryTreeConfig.addNode(childNode, parentNode);\n                }\n            });\n        }\n        // Current List is updated\n        this._list = this.categoryTreeConfig.list;\n    }\n\n    private getCategoriesByParent(parentNode:TerraNodeInterface<CategoryTreeData>):void\n    {\n        let id:number | string = null;\n\n        if(!isNullOrUndefined(parentNode))\n        {\n            id = parentNode.id;\n        }\n\n        this.inputCategoryService.requestCategoryData(id).subscribe((data:CategoryPagerDataInterface) =>\n        {\n            if(isNullOrUndefined(parentNode))\n            {\n                this.addNodes(data, id);\n            }\n            else\n            {\n                this.addNodes(data, parentNode.id);\n            }\n        });\n    }\n\n    // Placeholders for the callbacks which are later provided\n    // by the Control Value Accessor\n    private onTouchedCallback:() => void = () => undefined;\n\n    private onChangeCallback:(_:any) => void = () => undefined;\n}\n"],"sourceRoot":"/source/"}