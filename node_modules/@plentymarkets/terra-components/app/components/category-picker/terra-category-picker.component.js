"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var angular_l10n_1 = require("angular-l10n");
var forms_1 = require("@angular/forms");
var terra_category_picker_base_service_1 = require("./service/terra-category-picker-base.service");
var category_tree_config_1 = require("./config/category-tree.config");
var util_1 = require("util");
var TerraCategoryPickerComponent = /** @class */ (function () {
    function TerraCategoryPickerComponent(translation, categoryTreeConfig) {
        this.translation = translation;
        this.categoryTreeConfig = categoryTreeConfig;
        this._value = 0;
        this._completeCategory = {
            id: null,
            isActive: null,
            isOpen: null,
            isVisible: null,
            name: '',
            tooltip: '',
            tooltipPlacement: '',
        };
        this._toggleTree = false;
        this._categoryInputValue = '';
        this._list = [];
        // Placeholders for the callbacks which are later provided
        // by the Control Value Accessor
        this.onTouchedCallback = function () { return undefined; };
        this.onChangeCallback = function () { return undefined; };
    }
    TerraCategoryPickerComponent_1 = TerraCategoryPickerComponent;
    TerraCategoryPickerComponent.prototype.ngAfterContentChecked = function () {
        if (this.categoryTreeConfig.list.length === 0 ||
            (this.categoryTreeConfig.list.length === 1 && this.categoryTreeConfig.list[0] === this.categoryTreeConfig.currentSelectedNode)) {
            this.categoryTreeConfig.list = this._list;
        }
    };
    TerraCategoryPickerComponent.prototype.ngOnInit = function () {
        if (util_1.isNullOrUndefined(this.inputName)) {
            this.inputName = this.translation.translate('terraCategoryPicker.category');
        }
        this.categoryTreeConfig.list = this._list;
        this.getCategoriesByParent(null);
    };
    TerraCategoryPickerComponent.prototype.getCompleteCategoryObject = function () {
        return this._completeCategory;
    };
    // From ControlValueAccessor interface
    TerraCategoryPickerComponent.prototype.writeValue = function (value) {
        var _this = this;
        if (!util_1.isNullOrUndefined(value)) {
            this.inputCategoryService.requestCategoryDataById(value).subscribe(function (data) {
                if (util_1.isNullOrUndefined(_this.categoryTreeConfig.findNodeById(value))) {
                    _this.addNodes(data, null);
                }
                var nodeToSelect = _this.categoryTreeConfig.findNodeById(value);
                if (!util_1.isNullOrUndefined(nodeToSelect)) {
                    _this.categoryTreeConfig.currentSelectedNode = nodeToSelect;
                }
                if (!util_1.isNullOrUndefined(_this.categoryTreeConfig.currentSelectedNode)) {
                    _this._categoryInputValue = _this.categoryTreeConfig.currentSelectedNode.name;
                }
                _this._value = value;
                //this.updateCompleteCategory(value);
                _this.onTouchedCallback();
                _this.onChangeCallback(_this._value);
            });
        }
    };
    // Set touched on blur
    TerraCategoryPickerComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
    };
    // From ControlValueAccessor interface
    TerraCategoryPickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    TerraCategoryPickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    TerraCategoryPickerComponent.prototype.showTree = function () {
        this._toggleTree = !this._toggleTree;
    };
    TerraCategoryPickerComponent.prototype.onSelectNode = function () {
        if (!util_1.isNullOrUndefined(this.categoryTreeConfig.currentSelectedNode)) {
            this._categoryInputValue = this.categoryTreeConfig.currentSelectedNode.name;
            this.writeValue(this.categoryTreeConfig.currentSelectedNode.id);
        }
        this._toggleTree = !this._toggleTree;
    };
    TerraCategoryPickerComponent.prototype.reset = function () {
        this.categoryTreeConfig.currentSelectedNode = {
            id: null,
            isActive: null,
            isOpen: null,
            isVisible: null,
            name: '',
            tooltip: '',
        };
        this._categoryInputValue = '';
        this._value = 0;
        this.onTouchedCallback();
        this.onChangeCallback(this._value);
    };
    //private updateCompleteCategory(category:number):void
    //{
    //    this._completeCategory.id = category.id;
    //    this._completeCategory.isActive = category.isActive;
    //    this._completeCategory.isOpen = category.isOpen;
    //    this._completeCategory.isVisible = category.isVisible;
    //    this._completeCategory.name = category.name;
    //    this._completeCategory.tooltip = category.tooltip;
    //    this._completeCategory.tooltipPlacement = category.tooltipPlacement;
    //}
    TerraCategoryPickerComponent.prototype.getCategoriesByParentId = function (parentId) {
        var _this = this;
        return function () { return _this.getCategories(parentId); };
    };
    TerraCategoryPickerComponent.prototype.getCategories = function (parentId) {
        var _this = this;
        var obs = this.inputCategoryService.requestCategoryData(parentId);
        obs.subscribe(function (data) {
            _this.addNodes(data, parentId);
        });
        return obs;
    };
    TerraCategoryPickerComponent.prototype.addNodes = function (data, parentNodeId) {
        var _this = this;
        var entries = data.entries;
        if (this.categoryTreeConfig.list.length === 1 && this.categoryTreeConfig.list[0] === this.categoryTreeConfig.currentSelectedNode) {
            this.categoryTreeConfig.removeNodeById(this.categoryTreeConfig.currentSelectedNode.id);
            this.categoryTreeConfig.list = [];
        }
        if (!util_1.isNullOrUndefined(entries)) {
            entries.forEach(function (entry) {
                var categoryData = entry;
                var categoryDetail = null;
                if (util_1.isNullOrUndefined(_this.categoryTreeConfig.findNodeById(categoryData.id))) {
                    if (categoryData.type === 'container') {
                        return;
                    }
                    else {
                        categoryDetail = categoryData.details[0];
                    }
                    var childNode = {
                        id: categoryData.id,
                        name: categoryDetail.name,
                        isVisible: true,
                        tooltip: 'ID: ' + categoryData.id,
                    };
                    var parentNode = void 0;
                    if (!util_1.isNullOrUndefined(categoryData.parentCategoryId)) {
                        parentNode = _this.categoryTreeConfig.findNodeById(categoryData.parentCategoryId);
                    }
                    if (util_1.isNullOrUndefined(parentNode)) {
                        if (util_1.isNullOrUndefined(parentNodeId)) {
                            parentNode = null;
                        }
                        else {
                            parentNode = _this.categoryTreeConfig.findNodeById(parentNodeId);
                        }
                    }
                    if (categoryData.hasChildren) {
                        childNode.onLazyLoad = _this.getCategoriesByParentId(childNode.id);
                    }
                    _this.categoryTreeConfig.addNode(childNode, parentNode);
                }
            });
        }
        this._list = this.categoryTreeConfig.list;
    };
    TerraCategoryPickerComponent.prototype.getCategoriesByParent = function (parentNode) {
        var _this = this;
        var id = null;
        if (!util_1.isNullOrUndefined(parentNode)) {
            id = parentNode.id;
        }
        this.inputCategoryService.requestCategoryData(id).subscribe(function (data) {
            if (util_1.isNullOrUndefined(parentNode)) {
                _this.addNodes(data, id);
            }
            else {
                _this.addNodes(data, parentNode.id);
            }
        });
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", terra_category_picker_base_service_1.TerraCategoryPickerBaseService)
    ], TerraCategoryPickerComponent.prototype, "inputCategoryService", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraCategoryPickerComponent.prototype, "inputIsDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraCategoryPickerComponent.prototype, "inputName", void 0);
    TerraCategoryPickerComponent = TerraCategoryPickerComponent_1 = __decorate([
        core_1.Component({
            selector: 'terra-category-picker',
            template: require('./terra-category-picker.component.html'),
            styles: [require('./terra-category-picker.component.scss')],
            providers: [{
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return TerraCategoryPickerComponent_1; }),
                    multi: true
                },
                category_tree_config_1.CategoryTreeConfig]
        }),
        __metadata("design:paramtypes", [angular_l10n_1.TranslationService,
            category_tree_config_1.CategoryTreeConfig])
    ], TerraCategoryPickerComponent);
    return TerraCategoryPickerComponent;
    var TerraCategoryPickerComponent_1;
}());
exports.TerraCategoryPickerComponent = TerraCategoryPickerComponent;

//# sourceMappingURL=terra-category-picker.component.js.map
