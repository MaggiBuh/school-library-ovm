{"version":3,"sources":["app/components/forms/checkbox/terra-checkbox.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAMuB;AACvB,wCAGwB;AACxB,6BAAyC;AAEzC,IAAI,MAAM,GAAU,CAAC,CAAC;AActB;IA0CI;QAtBU,gBAAW,GAAyB,IAAI,mBAAY,EAAW,CAAC;QAO1E,yBAAyB;QACjB,gBAAW,GAAW,KAAK,CAAC;QAC5B,qBAAgB,GAAW,KAAK,CAAC;QAClC,YAAO,GAAW,IAAI,CAAC;QAE9B,yDAAyD;QACzD,+BAA+B;QACvB,sBAAiB,GAAc;QAEvC,CAAC,CAAC;QAEM,qBAAgB,GAAmB,UAAC,CAAC;QAE7C,CAAC,CAAC;QAIE,wCAAwC;QACxC,IAAI,CAAC,GAAG,GAAG,eAAa,MAAM,EAAI,CAAC;IACvC,CAAC;+BA9CQ,sBAAsB;IAiD/B,sBAAW,yCAAK;QADhB,cAAc;aACd;YAEI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;QAED,mDAAmD;aAEnD,UAAiB,CAAS;YAEtB,EAAE,CAAA,CAAC,CAAC,wBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,CACnD,CAAC;gBACG,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBAC9B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;gBACrB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC;;;OAZA;IAAA,CAAC;IAcF,yCAAQ,GAAR,UAAS,KAAa;QAElB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,qCAAqC;IACrC,2CAAU,GAAV,UAAW,KAAa;QAEpB,EAAE,CAAA,CAAC,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,CAC9B,CAAC;YACG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,CAAC;IACL,CAAC;IAED,qCAAqC;IACrC,iDAAgB,GAAhB,UAAiB,EAAM;QAEnB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC/B,CAAC;IAED,qCAAqC;IACrC,kDAAiB,GAAjB,UAAkB,EAAM;QAEpB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED,sBAAW,mDAAe;aAA1B;YAEI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;aAGD,UAA2B,KAAa;YAEpC,EAAE,CAAA,CAAC,KAAK,CAAC,CACT,CAAC;gBACG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAC5B,CAAC;YACD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAClC,CAAC;;;OAVA;IA1FQ;QAAR,YAAK,EAAE;;mEAAyB;IAIxB;QAAR,YAAK,EAAE;;gEAAqB;IAIpB;QAAR,YAAK,EAAE;;6DAAkB;IAKjB;QAAR,YAAK,EAAE;;2DAAgB;IAEd;QAAT,aAAM,EAAE;kCAAa,mBAAY;+DAAwC;IAoC1E;QADC,YAAK,EAAE;;;uDASP;IAkCD;QADC,YAAK,EAAE;;;iEAQP;IAzGQ,sBAAsB;QAZlC,gBAAS,CAAC;YACP,QAAQ,EAAG,gBAAgB;YAC3B,MAAM,EAAK,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;YACvD,QAAQ,EAAG,OAAO,CAAC,iCAAiC,CAAC;YACrD,SAAS,EAAE;gBACP;oBACI,OAAO,EAAM,yBAAiB;oBAC9B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,wBAAsB,EAAtB,CAAsB,CAAC;oBACrD,KAAK,EAAQ,IAAI;iBACpB;aACJ;SACJ,CAAC;;OACW,sBAAsB,CA0GlC;IAAD,6BAAC;;CA1GD,AA0GC,IAAA;AA1GY,wDAAsB","file":"app/components/forms/checkbox/terra-checkbox.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport { isNullOrUndefined } from 'util';\n\nlet nextId:number = 0;\n\n@Component({\n    selector:  'terra-checkbox',\n    styles:    [require('./terra-checkbox.component.scss')],\n    template:  require('./terra-checkbox.component.html'),\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraCheckboxComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraCheckboxComponent implements ControlValueAccessor\n{\n    /**\n     * @description If true, the check box will be disabled. Default false.\n     * */\n    @Input() inputIsDisabled:boolean;\n    /**\n     * @description Set the caption.\n     * */\n    @Input() inputCaption:string;\n    /**\n     * @description Set an icon (e.g. icon-save).\n     * */\n    @Input() inputIcon:string;\n    /**\n     * @description Set the id.\n     * @deprecated inputId will be removed in next major release.\n     * */\n    @Input() inputId:string;\n\n    @Output() valueChange:EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     * @description a unique string identifier for the specific input instance.\n     */\n    private _id:string;\n\n    //The internal data model\n    private _innerValue:boolean = false;\n    private _isIndeterminate:boolean = false;\n    public isValid:boolean = true;\n\n    //Placeholders for the callbacks which are later provided\n    //by the Control Value Accessor\n    private onTouchedCallback:() => void = () =>\n    {\n    };\n\n    private onChangeCallback:(_:any) => void = (_) =>\n    {\n    };\n\n    constructor()\n    {\n        // generate the id of the input instance\n        this._id = `checkbox_#${nextId++}`;\n    }\n\n    //get accessor\n    public get value():boolean\n    {\n        return this._innerValue;\n    };\n\n    //set accessor including call the onchange callback\n    @Input()\n    public set value(v:boolean)\n    {\n        if(!isNullOrUndefined(v) && v !== this._innerValue)\n        {\n            this._isIndeterminate = false;\n            this._innerValue = v;\n            this.onChangeCallback(v);\n        }\n    }\n\n    onChange(event:boolean)\n    {\n        this.valueChange.emit(event);\n    }\n\n    //From ControlValueAccessor interface\n    writeValue(value:boolean)\n    {\n        if(value !== this._innerValue)\n        {\n            this.value = value;\n        }\n    }\n\n    //From ControlValueAccessor interface\n    registerOnChange(fn:any)\n    {\n        this.onChangeCallback = fn;\n    }\n\n    //From ControlValueAccessor interface\n    registerOnTouched(fn:any)\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    public get isIndeterminate():boolean\n    {\n        return this._isIndeterminate;\n    }\n\n    @Input()\n    public set isIndeterminate(value:boolean)\n    {\n        if(value)\n        {\n            this._innerValue = null;\n        }\n        this._isIndeterminate = value;\n    }\n}\n"],"sourceRoot":"/source/"}