"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var util_1 = require("util");
var _1 = require("../../../../");
var MAX_LASTLY_USED_ENTRIES = 5;
var TerraSuggestionBoxComponent = /** @class */ (function () {
    function TerraSuggestionBoxComponent(_elementRef) {
        this._elementRef = _elementRef;
        this.outputValueChanged = new core_1.EventEmitter();
        this.outputClicked = new core_1.EventEmitter();
        this._displayListBoxValues = [];
        this.onTouchedCallback = function () { return undefined; };
        this.onChangeCallback = function (_) { return undefined; };
    }
    TerraSuggestionBoxComponent_1 = TerraSuggestionBoxComponent;
    TerraSuggestionBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clickListener = function (event) {
            _this.clickedOutside(event);
        };
        this.inputTooltipPlacement = _1.TerraPlacementEnum.TOP;
        this.selectedValue =
            {
                value: '',
                caption: ''
            };
        this._tmpSelectedValue = null;
        this.isValid = true;
        this._toggleOpen = false;
        this._hasLabel = !util_1.isNull(this.inputName);
        this._lastSelectedValues = [];
        this._listBoxHeadingKey = '';
        this._noEntriesTextKey = this.inputWithRecentlyUsed ? 'terraSuggestionBox.noRecentlyUsed' : 'terraSuggestionBox.noSuggestions';
        if (!this.inputWithRecentlyUsed) {
            // initialize the displayed list with all possible values
            this._displayListBoxValues = this.inputListBoxValues;
        }
    };
    TerraSuggestionBoxComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes['inputListBoxValues']
            && changes['inputListBoxValues'].currentValue.length > 0
            && !this.inputListBoxValues.find(function (x) { return _this.selectedValue === x; })) {
            this.select(this.inputListBoxValues[0]);
        }
        if (changes['inputListBoxValues']) {
            this._displayListBoxValues = this.inputListBoxValues;
        }
    };
    TerraSuggestionBoxComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    TerraSuggestionBoxComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    TerraSuggestionBoxComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    Object.defineProperty(TerraSuggestionBoxComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            if (!util_1.isNullOrUndefined(value)) {
                var selectedValue = this.inputListBoxValues.find(function (item) { return item.value === value; });
                if (selectedValue) {
                    this.selectedValue = {
                        caption: selectedValue.caption,
                        value: selectedValue.value
                    };
                }
            }
            else {
                this.selectedValue = {
                    caption: this.inputListBoxValues[0].caption,
                    value: this.inputListBoxValues[0].value
                };
            }
            this._tmpSelectedValue = this.selectedValue;
        },
        enumerable: true,
        configurable: true
    });
    TerraSuggestionBoxComponent.prototype.onClick = function (evt) {
        evt.stopPropagation(); // prevents the click listener on the document to be fired right after
        this.toggleOpen = !this.toggleOpen;
    };
    Object.defineProperty(TerraSuggestionBoxComponent.prototype, "toggleOpen", {
        get: function () {
            return this._toggleOpen;
        },
        set: function (value) {
            if (this._toggleOpen !== value && value === true) {
                document.addEventListener('click', this.clickListener);
                this.focusSelectedElement();
            }
            else if (this._toggleOpen !== value && value === false) {
                document.removeEventListener('click', this.clickListener);
            }
            this._toggleOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    TerraSuggestionBoxComponent.prototype.clickedOutside = function (event) {
        if (!this._elementRef.nativeElement.contains(event.target)) {
            this.toggleOpen = false;
        }
    };
    TerraSuggestionBoxComponent.prototype.select = function (value) {
        // check if value is available
        if (!this._displayListBoxValues.find(function (elem) { return elem === value; })) {
            return;
        }
        // update selected value
        this.selectedValue = {
            caption: value.caption,
            value: value.value
        };
        // update last selected values
        if (this.inputWithRecentlyUsed) {
            this.updateLastSelectedValues();
        }
        // update temp selected value
        this._tmpSelectedValue = this.selectedValue;
        // execute callback functions
        this.onTouchedCallback();
        this.onChangeCallback(value.value);
        this.outputValueChanged.emit(value);
    };
    TerraSuggestionBoxComponent.prototype.updateLastSelectedValues = function () {
        var _this = this;
        // check if newly selected value has been selected lastly
        var valueSelected = this._lastSelectedValues.find(function (value) {
            return value.caption === _this.selectedValue.caption &&
                value.value === _this.selectedValue.value;
        });
        // add value to the last selected values, if it is not already added
        if (util_1.isNullOrUndefined(valueSelected)) {
            var length_1 = this._lastSelectedValues.unshift({
                caption: this.selectedValue.caption,
                value: this.selectedValue.value
            });
            // check if length of the array exceeds the maximum amount of "lastly used" entries
            if (length_1 > MAX_LASTLY_USED_ENTRIES) {
                // remove last element of the array
                this._lastSelectedValues.pop();
            }
        }
    };
    TerraSuggestionBoxComponent.prototype.onChange = function () {
        var searchString = this.selectedValue.caption;
        this.toggleOpen = true;
        if (searchString.length >= 3) {
            this._listBoxHeadingKey = 'terraSuggestionBox.suggestions';
            this._noEntriesTextKey = 'terraSuggestionBox.noSuggestions';
            this._displayListBoxValues = this.inputListBoxValues.filter(function (value) {
                // check if search string has a full match
                if (value.caption.toUpperCase().includes(searchString.toUpperCase())) {
                    return true;
                }
                // search for partial strings
                var searchStringIncluded = true;
                searchString.split(' ').forEach(function (word) {
                    searchStringIncluded = searchStringIncluded && value.caption.toUpperCase().includes(word.toUpperCase());
                });
                return searchStringIncluded;
            });
        }
        else if (this.inputWithRecentlyUsed) {
            this._listBoxHeadingKey = 'terraSuggestionBox.recentlyUsed';
            this._noEntriesTextKey = 'terraSuggestionBox.noRecentlyUsed';
            this._displayListBoxValues = this._lastSelectedValues;
        }
        else {
            this._displayListBoxValues = this.inputListBoxValues;
        }
        this.value = this.selectedValue.value;
    };
    TerraSuggestionBoxComponent.prototype.resetComponentValue = function () {
        this.value = null;
        this.selectedValue =
            {
                value: '',
                caption: ''
            };
        this._tmpSelectedValue = null;
    };
    TerraSuggestionBoxComponent.prototype.onKeyDown = function (event) {
        var _this = this;
        // check if one of the dedicated keys has been pressed
        if (!(event.key === 'ArrowDown' || event.key === 'ArrowUp' || event.key === 'Enter' || event.key === 'Escape')) {
            return;
        }
        // check if there is any selected value yet
        if (util_1.isNullOrUndefined(this._tmpSelectedValue)) {
            this._tmpSelectedValue = this._displayListBoxValues[0];
        }
        else {
            // get the array index of the selected value
            var index = this._displayListBoxValues.findIndex(function (item) {
                return item.value === _this._tmpSelectedValue.value;
            });
            // check if element has been found
            if (index >= 0) {
                // determine the key, that has been pressed
                switch (event.key) {
                    case 'ArrowDown':// mark the succeeding list element
                        if (index + 1 < this._displayListBoxValues.length) {
                            // open dropdown if not already opened
                            if (!this.toggleOpen) {
                                this.toggleOpen = true;
                            }
                            // mark next element for selection
                            this._tmpSelectedValue = this._displayListBoxValues[index + 1];
                            // adjust scrolling viewport
                            this.focusSelectedElement();
                        }
                        break;
                    case 'ArrowUp':// mark the preceding list element
                        if (index - 1 >= 0) {
                            // open dropdown if not already opened
                            if (!this.toggleOpen) {
                                this.toggleOpen = true;
                            }
                            // mark previous element for selection
                            this._tmpSelectedValue = this._displayListBoxValues[index - 1];
                            // adjust scrolling viewport
                            this.focusSelectedElement();
                        }
                        break;
                    case 'Enter':// select the marked element
                        // check if element is really available
                        if (this._displayListBoxValues.find(function (item) { return item === _this._tmpSelectedValue; })) {
                            this.select(this._tmpSelectedValue); // select the chosen element
                            this.toggleOpen = false; // close the dropdown
                        }
                        break;
                    case 'Escape':// close the dropdown
                        this.toggleOpen = false; // close the dropdown
                        break;
                }
            }
            else {
                this._tmpSelectedValue = this._displayListBoxValues[0];
            }
        }
        // stop event bubbling
        event.stopPropagation();
    };
    TerraSuggestionBoxComponent.prototype.focusSelectedElement = function () {
        // get the temporary selected DOM element
        var selectedElement = $('.select-box-dropdown > span.selected').get().pop();
        // check if the element has been found
        if (selectedElement) {
            // scroll to the selected element
            selectedElement.parentElement.scrollTop = selectedElement.offsetTop - selectedElement.parentElement.offsetTop;
        }
    };
    /**
     * workaround to prevent calling the select() method on the label click
     * @param event
     */
    TerraSuggestionBoxComponent.prototype.onInputClick = function (event) {
        this.outputClicked.emit(event);
        // check if the input has been clicked
        if (event.target.nodeName === 'INPUT') {
            // select the input text <-> mark all
            event.target.select();
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraSuggestionBoxComponent.prototype, "inputName", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSuggestionBoxComponent.prototype, "inputIsRequired", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSuggestionBoxComponent.prototype, "inputIsDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraSuggestionBoxComponent.prototype, "inputTooltipText", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraSuggestionBoxComponent.prototype, "inputTooltipPlacement", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraSuggestionBoxComponent.prototype, "inputListBoxValues", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSuggestionBoxComponent.prototype, "inputWithRecentlyUsed", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSuggestionBoxComponent.prototype, "outputValueChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSuggestionBoxComponent.prototype, "outputClicked", void 0);
    TerraSuggestionBoxComponent = TerraSuggestionBoxComponent_1 = __decorate([
        core_1.Component({
            selector: 'terra-suggestion-box',
            styles: [require('./terra-suggestion-box.component.scss')],
            template: require('./terra-suggestion-box.component.html'),
            providers: [
                {
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return TerraSuggestionBoxComponent_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], TerraSuggestionBoxComponent);
    return TerraSuggestionBoxComponent;
    var TerraSuggestionBoxComponent_1;
}());
exports.TerraSuggestionBoxComponent = TerraSuggestionBoxComponent;

//# sourceMappingURL=terra-suggestion-box.component.js.map
