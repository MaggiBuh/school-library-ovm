{"version":3,"sources":["app/components/forms/suggestion-box/terra-suggestion-box.component.ts"],"names":[],"mappings":"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","file":"app/components/forms/suggestion-box/terra-suggestion-box.component.js","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport { TerraSuggestionBoxValueInterface } from './data/terra-suggestion-box.interface';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    isNull,\n    isNullOrUndefined\n} from 'util';\nimport { TerraPlacementEnum } from '../../../../';\nimport { TerraBaseData } from '../../data/terra-base.data';\n\nconst MAX_LASTLY_USED_ENTRIES:number = 5;\n\n@Component({\n    selector:  'terra-suggestion-box',\n    styles:    [require('./terra-suggestion-box.component.scss')],\n    template:  require('./terra-suggestion-box.component.html'),\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraSuggestionBoxComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraSuggestionBoxComponent implements OnInit, OnChanges\n{\n    @Input()\n    public inputName:string;\n\n    @Input()\n    public inputIsRequired:boolean;\n\n    @Input()\n    public inputIsDisabled:boolean;\n\n    @Input()\n    public inputTooltipText:string;\n\n    @Input()\n    public inputTooltipPlacement:TerraPlacementEnum;\n\n    @Input()\n    public inputListBoxValues:Array<TerraSuggestionBoxValueInterface>;\n\n    @Input()\n    public inputWithRecentlyUsed:boolean;\n\n    @Output()\n    public outputValueChanged:EventEmitter<TerraSuggestionBoxValueInterface> = new EventEmitter<TerraSuggestionBoxValueInterface>();\n\n    @Output()\n    public outputClicked:EventEmitter<Event> = new EventEmitter<Event>();\n\n    public isValid:boolean;\n    public selectedValue:TerraSuggestionBoxValueInterface;\n\n    protected _displayListBoxValues:Array<TerraSuggestionBoxValueInterface> = [];\n    protected _lastSelectedValues:Array<TerraSuggestionBoxValueInterface>;\n    protected _listBoxHeadingKey:string;\n    protected _noEntriesTextKey:string;\n\n    private _tmpSelectedValue:TerraSuggestionBoxValueInterface;\n    private _toggleOpen:boolean;\n    private _hasLabel:boolean;\n    private _value:number | string | TerraBaseData;\n    private clickListener:(event:Event) => void;\n\n    constructor(private _elementRef:ElementRef)\n    {\n    }\n\n    public ngOnInit():void\n    {\n        this.clickListener = (event:Event):void =>\n        {\n            this.clickedOutside(event);\n        };\n\n        this.inputTooltipPlacement = TerraPlacementEnum.TOP;\n        this.selectedValue =\n            {\n                value:   '',\n                caption: ''\n            };\n        this._tmpSelectedValue = null;\n\n        this.isValid = true;\n        this._toggleOpen = false;\n        this._hasLabel = !isNull(this.inputName);\n        this._lastSelectedValues = [];\n        this._listBoxHeadingKey = '';\n        this._noEntriesTextKey = this.inputWithRecentlyUsed ? 'terraSuggestionBox.noRecentlyUsed' : 'terraSuggestionBox.noSuggestions';\n\n        if(!this.inputWithRecentlyUsed)\n        {\n            // initialize the displayed list with all possible values\n            this._displayListBoxValues = this.inputListBoxValues;\n        }\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes['inputListBoxValues']\n           && changes['inputListBoxValues'].currentValue.length > 0\n           && !this.inputListBoxValues.find((x:TerraSuggestionBoxValueInterface):boolean => this.selectedValue === x))\n        {\n            this.select(this.inputListBoxValues[0]);\n        }\n        if(changes['inputListBoxValues'])\n        {\n            this._displayListBoxValues = this.inputListBoxValues;\n        }\n    }\n\n    public registerOnChange(fn:(_:any) => void):void\n    {\n        this.onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn:() => void):void\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    private onTouchedCallback:() => void = ():void => undefined;\n\n    private onChangeCallback:(_:any) => void = (_:any):void => undefined;\n\n    public writeValue(value:any):void\n    {\n        this.value = value;\n    }\n\n    public get value():number | string | TerraBaseData\n    {\n        return this._value;\n    }\n\n    public set value(value:number | string | TerraBaseData)\n    {\n        this._value = value;\n\n        if(!isNullOrUndefined(value))\n        {\n            let selectedValue:TerraSuggestionBoxValueInterface =\n                this.inputListBoxValues.find((item:TerraSuggestionBoxValueInterface) => item.value === value);\n\n            if(selectedValue)\n            {\n                this.selectedValue = {\n                    caption: selectedValue.caption,\n                    value:   selectedValue.value\n                };\n            }\n        }\n        else\n        {\n            this.selectedValue = {\n                caption: this.inputListBoxValues[0].caption,\n                value:   this.inputListBoxValues[0].value\n            };\n        }\n\n        this._tmpSelectedValue = this.selectedValue;\n    }\n\n    private onClick(evt:Event):void\n    {\n        evt.stopPropagation(); // prevents the click listener on the document to be fired right after\n        this.toggleOpen = !this.toggleOpen;\n    }\n\n    public set toggleOpen(value:boolean)\n    {\n        if(this._toggleOpen !== value && value === true)\n        {\n            document.addEventListener('click', this.clickListener);\n            this.focusSelectedElement();\n        }\n        else if(this._toggleOpen !== value && value === false)\n        {\n            document.removeEventListener('click', this.clickListener);\n        }\n\n        this._toggleOpen = value;\n    }\n\n    public get toggleOpen():boolean\n    {\n        return this._toggleOpen;\n    }\n\n    private clickedOutside(event:Event):void\n    {\n        if(!this._elementRef.nativeElement.contains(event.target))\n        {\n            this.toggleOpen = false;\n        }\n    }\n\n    private select(value:TerraSuggestionBoxValueInterface):void\n    {\n        // check if value is available\n        if(!this._displayListBoxValues.find((elem:TerraSuggestionBoxValueInterface):boolean => elem === value))\n        {\n            return;\n        }\n\n        // update selected value\n        this.selectedValue = {\n            caption: value.caption,\n            value:   value.value\n        };\n\n        // update last selected values\n        if(this.inputWithRecentlyUsed)\n        {\n            this.updateLastSelectedValues();\n        }\n\n        // update temp selected value\n        this._tmpSelectedValue = this.selectedValue;\n\n        // execute callback functions\n        this.onTouchedCallback();\n        this.onChangeCallback(value.value);\n        this.outputValueChanged.emit(value);\n    }\n\n    private updateLastSelectedValues():void\n    {\n        // check if newly selected value has been selected lastly\n        let valueSelected:TerraSuggestionBoxValueInterface =\n            this._lastSelectedValues.find((value:TerraSuggestionBoxValueInterface) =>\n                value.caption === this.selectedValue.caption &&\n                value.value === this.selectedValue.value\n            );\n\n        // add value to the last selected values, if it is not already added\n        if(isNullOrUndefined(valueSelected))\n        {\n            let length:number = this._lastSelectedValues.unshift(\n                {\n                    caption: this.selectedValue.caption,\n                    value:   this.selectedValue.value\n                }\n            );\n\n            // check if length of the array exceeds the maximum amount of \"lastly used\" entries\n            if(length > MAX_LASTLY_USED_ENTRIES)\n            {\n                // remove last element of the array\n                this._lastSelectedValues.pop();\n            }\n        }\n    }\n\n    public onChange():void\n    {\n        let searchString:any = this.selectedValue.caption;\n        this.toggleOpen = true;\n\n        if(searchString.length >= 3)\n        {\n            this._listBoxHeadingKey = 'terraSuggestionBox.suggestions';\n            this._noEntriesTextKey = 'terraSuggestionBox.noSuggestions';\n            this._displayListBoxValues = this.inputListBoxValues.filter((value:TerraSuggestionBoxValueInterface) =>\n            {\n                // check if search string has a full match\n                if(value.caption.toUpperCase().includes(searchString.toUpperCase()))\n                {\n                    return true;\n                }\n\n                // search for partial strings\n                let searchStringIncluded:boolean = true;\n                searchString.split(' ').forEach((word:string) =>\n                {\n                    searchStringIncluded = searchStringIncluded && value.caption.toUpperCase().includes(word.toUpperCase());\n                });\n                return searchStringIncluded;\n            });\n        }\n        else if(this.inputWithRecentlyUsed)\n        {\n            this._listBoxHeadingKey = 'terraSuggestionBox.recentlyUsed';\n            this._noEntriesTextKey = 'terraSuggestionBox.noRecentlyUsed';\n            this._displayListBoxValues = this._lastSelectedValues;\n        }\n        else\n        {\n            this._displayListBoxValues = this.inputListBoxValues;\n        }\n\n        this.value = this.selectedValue.value;\n    }\n\n    public resetComponentValue():void\n    {\n        this.value = null;\n\n        this.selectedValue =\n            {\n                value:   '',\n                caption: ''\n            };\n\n        this._tmpSelectedValue = null;\n    }\n\n    private onKeyDown(event:KeyboardEvent):void\n    {\n        // check if one of the dedicated keys has been pressed\n        if(!(event.key === 'ArrowDown' || event.key === 'ArrowUp' || event.key === 'Enter' || event.key === 'Escape'))\n        {\n            return;\n        }\n\n        // check if there is any selected value yet\n        if(isNullOrUndefined(this._tmpSelectedValue))\n        {\n            this._tmpSelectedValue = this._displayListBoxValues[0];\n        }\n        else\n        {\n            // get the array index of the selected value\n            let index:number = this._displayListBoxValues.findIndex((item:TerraSuggestionBoxValueInterface) =>\n                item.value === this._tmpSelectedValue.value\n            );\n\n            // check if element has been found\n            if(index >= 0)\n            {\n                // determine the key, that has been pressed\n                switch(event.key)\n                {\n                    case 'ArrowDown': // mark the succeeding list element\n                        if(index + 1 < this._displayListBoxValues.length)\n                        {\n                            // open dropdown if not already opened\n                            if(!this.toggleOpen)\n                            {\n                                this.toggleOpen = true;\n                            }\n                            // mark next element for selection\n                            this._tmpSelectedValue = this._displayListBoxValues[index + 1];\n                            // adjust scrolling viewport\n                            this.focusSelectedElement();\n                        }\n                        break;\n                    case 'ArrowUp': // mark the preceding list element\n                        if(index - 1 >= 0)\n                        {\n                            // open dropdown if not already opened\n                            if(!this.toggleOpen)\n                            {\n                                this.toggleOpen = true;\n                            }\n                            // mark previous element for selection\n                            this._tmpSelectedValue = this._displayListBoxValues[index - 1];\n                            // adjust scrolling viewport\n                            this.focusSelectedElement();\n                        }\n                        break;\n                    case 'Enter': // select the marked element\n                        // check if element is really available\n                        if(this._displayListBoxValues.find((item:TerraSuggestionBoxValueInterface) => item === this._tmpSelectedValue))\n                        {\n                            this.select(this._tmpSelectedValue); // select the chosen element\n                            this.toggleOpen = false; // close the dropdown\n                        }\n                        break;\n                    case 'Escape': // close the dropdown\n                        this.toggleOpen = false; // close the dropdown\n                        break;\n                }\n            }\n            else\n            {\n                this._tmpSelectedValue = this._displayListBoxValues[0];\n            }\n        }\n\n        // stop event bubbling\n        event.stopPropagation();\n    }\n\n    private focusSelectedElement():void\n    {\n        // get the temporary selected DOM element\n        let selectedElement:HTMLElement = $('.select-box-dropdown > span.selected').get().pop();\n\n        // check if the element has been found\n        if(selectedElement)\n        {\n            // scroll to the selected element\n            selectedElement.parentElement.scrollTop = selectedElement.offsetTop - selectedElement.parentElement.offsetTop;\n        }\n    }\n\n    /**\n     * workaround to prevent calling the select() method on the label click\n     * @param event\n     */\n    private onInputClick(event:any):void\n    {\n        this.outputClicked.emit(event);\n\n        // check if the input has been clicked\n        if(event.target.nodeName === 'INPUT')\n        {\n            // select the input text <-> mark all\n            event.target.select();\n        }\n    }\n}\n"],"sourceRoot":"/source/"}