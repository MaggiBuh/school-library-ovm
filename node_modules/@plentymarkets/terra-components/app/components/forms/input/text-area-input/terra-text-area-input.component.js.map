{"version":3,"sources":["app/components/forms/input/text-area-input/terra-text-area-input.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAIuB;AACvB,kEAA+D;AAC/D,wCAAmD;AACnD,oCAA6C;AAE7C,IAAI,MAAM,GAAU,CAAC,CAAC;AActB;IAAiD,+CAAmB;IA+ChE;QAAA,YAEI,kBAAM,aAAU,CAAC,KAAK,CAAC,SAI1B;QAFG,wCAAwC;QACxC,KAAI,CAAC,GAAG,GAAG,sBAAoB,MAAM,EAAI,CAAC;;IAC9C,CAAC;oCArDQ,2BAA2B;IAapC,sBAAW,kDAAS;QALpB;;;WAGG;aAEH,UAAqB,CAAQ;YAEzB,OAAO,CAAC,IAAI,CAAC,mFAAmF,CAAC,CAAC;QACtG,CAAC;;;OAAA;IAOD,sBAAW,mDAAU;QALrB;;;WAGG;aAEH,UAAsB,CAAQ;YAE1B,OAAO,CAAC,IAAI,CAAC,2GAA2G,CAAC,CAAC;YAE1H,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACnB,CAAC;;;OAAA;IA2BD;;OAEG;IACI,sDAAgB,GAAvB;QAAA,iBAOC;QALG,UAAU,CAAC;YAEP,IAAI,KAAK,GAAuC,QAAQ,CAAC,cAAc,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC;YAClF,KAAK,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,uDAAiB,GAAxB;QAAA,iBAOC;QALG,UAAU,CAAC;YAEP,IAAI,KAAK,GAAuC,QAAQ,CAAC,cAAc,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC;YAClF,KAAK,CAAC,MAAM,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAvED;QADC,YAAK,EAAE;;wEACuB;IAO/B;QADC,YAAK,EAAE;;;gEAIP;IAOD;QADC,YAAK,EAAE;;;iEAMP;IAMD;QADC,YAAK,EAAE;;qEACmB;IAM3B;QADC,YAAK,EAAE;;qEACmB;IAxClB,2BAA2B;QAZvC,gBAAS,CAAC;YACP,QAAQ,EAAG,uBAAuB;YAClC,MAAM,EAAK,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;YAC9D,QAAQ,EAAG,OAAO,CAAC,wCAAwC,CAAC;YAC5D,SAAS,EAAE;gBACP;oBACI,OAAO,EAAM,yBAAiB;oBAC9B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,6BAA2B,EAA3B,CAA2B,CAAC;oBAC1D,KAAK,EAAQ,IAAI;iBACpB;aACJ;SACJ,CAAC;;OACW,2BAA2B,CA8EvC;IAAD,kCAAC;;CA9ED,AA8EC,CA9EgD,2CAAmB,GA8EnE;AA9EY,kEAA2B","file":"app/components/forms/input/text-area-input/terra-text-area-input.component.js","sourcesContent":["import {\n    Component,\n    forwardRef,\n    Input\n} from '@angular/core';\nimport { TerraInputComponent } from '../terra-input.component';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TerraRegex } from '../../../../../';\n\nlet nextId:number = 0;\n\n@Component({\n    selector:  'terra-text-area-input',\n    styles:    [require('./terra-text-area-input.component.scss')],\n    template:  require('./terra-text-area-input.component.html'),\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraTextAreaInputComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraTextAreaInputComponent extends TerraInputComponent\n{\n    /**\n     * @description If true, a * indicates that the value is required. Default false.\n     */\n    @Input()\n    public inputIsRequired:boolean;\n\n    /**\n     * @deprecated inputType is no longer used.  It will be removed in one of the upcoming releases.\n     * @param v\n     */\n    @Input()\n    public set inputType(v:string)\n    {\n        console.warn('inputType is no longer used.  It will be removed in one of the upcoming releases.');\n    }\n\n    /**\n     * @deprecated inputValue is deprecated. It will be removed in one of the upcoming releases. Please use ngModel instead.\n     * @param v\n     */\n    @Input()\n    public set inputValue(v:string)\n    {\n        console.warn('inputValue is deprecated. It will be removed in one of the upcoming releases. Please use ngModel instead.');\n\n        this.value = v;\n    }\n\n    /**\n     * @description Set the number of maximum rows.\n     */\n    @Input()\n    public inputMaxRows:number;\n\n    /**\n     * @deprecated Will be removed in an upcoming release.\n     */\n    @Input()\n    public inputMaxCols:number;\n\n    /**\n     * @description a unique string identifier for the specific input instance.\n     */\n    private _id:string;\n\n    constructor()\n    {\n        super(TerraRegex.MIXED);\n\n        // generate the id of the input instance\n        this._id = `text-area-input_#${nextId++}`;\n    }\n\n    /**\n     * Set the focus on the native input element.\n     */\n    public focusNativeInput():void\n    {\n        setTimeout(():void =>\n        {\n            let input:HTMLInputElement = <HTMLInputElement> document.getElementById(this._id);\n            input.focus();\n        });\n    }\n\n    /**\n     * Select the content of the native input element.\n     */\n    public selectNativeInput():void\n    {\n        setTimeout(():void =>\n        {\n            let input:HTMLInputElement = <HTMLInputElement> document.getElementById(this._id);\n            input.select();\n        });\n    }\n}\n"],"sourceRoot":"/source/"}