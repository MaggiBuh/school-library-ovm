{"version":3,"sources":["app/components/forms/input/terra-input.component.ts"],"names":[],"mappings":"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","file":"app/components/forms/input/terra-input.component.js","sourcesContent":["import { Input } from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl\n} from '@angular/forms';\nimport { TerraAlertComponent } from '../../alert/terra-alert.component';\nimport { isNullOrUndefined } from 'util';\n\nexport class TerraInputComponent implements ControlValueAccessor\n{\n    /**\n     * @description Set the label.\n     * */\n    @Input() public inputName:string;\n    /**\n     * @description If true, a * indicates that the value is required. Default false.\n     * */\n    @Input() public inputIsRequired:boolean;\n    @Input() public inputEmptyMessage:string;\n    @Input() public inputInvalidMessage:string;\n    /**\n     * @description Set the tooltip.\n     * */\n    @Input() public inputTooltipText:string;\n    /**\n     * @description If true, the button will be disabled. Default false.\n     * */\n    @Input() public inputIsDisabled:boolean;\n    /**\n     * @description Set the tooltip placement (bottom, top, left, right). Default top.\n     * */\n    @Input() public inputTooltipPlacement:string;\n    /**\n     * @description Set a maximum number of characters allowed.\n     * */\n    @Input() public inputMaxLength:number;\n    /**\n     * @description Set the maximum number value allowed.\n     * */\n    @Input() public inputMaxValue:number;\n    /**\n     * @description Set a minimum number of characters allowed.\n     * */\n    @Input() public inputMinLength:number;\n    /**\n     * @description Set the minimum number value allowed.\n     * */\n    @Input() public inputMinValue:number;\n    /**\n     * @deprecated inputPlaceholder is deprecated and will be removed in one of the upcoming releases. Use inputName instead.\n     * */\n    @Input() public inputPlaceholder:string;\n    /**\n     * @description If true, the button will be small. Default false.\n     * */\n    @Input() public inputIsSmall:boolean;\n\n    public isValid:boolean;\n    public regex:string;\n    private _alert:TerraAlertComponent = TerraAlertComponent.getInstance();\n\n    // The internal data model\n    private _innerValue:any;\n\n    constructor(private _inputRegex:string)\n    {\n        this.regex = _inputRegex;\n        this.isValid = true;\n        this.inputTooltipPlacement = 'top';\n        this.inputIsSmall = false;\n    }\n\n    public get isDisabled():boolean\n    {\n        return this.inputIsDisabled;\n    }\n\n    public set isDisabled(value:boolean)\n    {\n        this.inputIsDisabled = value;\n    }\n\n    // get accessor\n    public get value():any\n    {\n        return this._innerValue;\n    }\n\n    // set accessor including call the onchange callback\n    public set value(v:any)\n    {\n        if(v !== this._innerValue)\n        {\n            this._innerValue = v;\n            this.onChangeCallback(this._innerValue);\n        }\n    }\n\n    // Set touched on blur\n    public onBlur():void\n    {\n        this.onTouchedCallback();\n    }\n\n    // From ControlValueAccessor interface\n    public writeValue(value:any):void\n    {\n        if(value !== this._innerValue)\n        {\n            this._innerValue = value;\n        }\n    }\n\n    // From ControlValueAccessor interface\n    public registerOnChange(fn:any):void\n    {\n        this.onChangeCallback = fn;\n    }\n\n    // From ControlValueAccessor interface\n    public registerOnTouched(fn:any):void\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    public validate(formControl:FormControl):void\n    {\n        if(formControl.valid)\n        {\n            this.isValid = true;\n        }\n        else\n        {\n            if(!this.isDisabled)\n            {\n                this.isValid = false;\n\n                if(this.inputIsRequired && (isNullOrUndefined(this.value) || this.value.length === 0))\n                {\n                    let emptyMessage:string;\n\n                    if(!this.inputEmptyMessage || this.inputEmptyMessage.length === 0)\n                    {\n                        // TODO i18n\n                        // emptyMessage = 'Mach eine Eingabe!';\n\n                    }\n                    else\n                    {\n                        emptyMessage = this.inputEmptyMessage;\n\n                        this._alert.addAlert({\n                            msg:              emptyMessage,\n                            type:             'danger',\n                            dismissOnTimeout: 0\n                        });\n                    }\n                }\n                else if(!isNullOrUndefined(this.value) && this.value.length > 0)\n                {\n                    let invalidMessage:string;\n\n                    if(!this.inputInvalidMessage || this.inputInvalidMessage.length === 0)\n                    {\n                        // TODO i18n\n                        // invalidMessage = 'Eingabe ungÃ¼ltig!';\n                    }\n                    else\n                    {\n                        invalidMessage = this.inputInvalidMessage;\n\n                        this._alert.addAlert({\n                            msg:              invalidMessage,\n                            type:             'danger',\n                            dismissOnTimeout: 0\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    // Placeholders for the callbacks which are later provided\n    // by the Control Value Accessor\n    private onTouchedCallback:() => void = () =>\n    {\n        //\n    }\n\n    private onChangeCallback:(_:any) => void = (_) =>\n    {\n        //\n    }\n}\n"],"sourceRoot":"/source/"}