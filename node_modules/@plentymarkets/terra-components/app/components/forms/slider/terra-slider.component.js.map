{"version":3,"sources":["app/components/forms/slider/terra-slider.component.ts"],"names":[],"mappings":"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","file":"app/components/forms/slider/terra-slider.component.js","sourcesContent":["import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport { isNullOrUndefined } from 'util';\nimport { GridOptions } from '../../interactables/gridOptions.interface';\n\n@Component({\n    selector: 'terra-slider',\n    template: require('./terra-slider.component.html'),\n    styles:   [require('./terra-slider.component.scss')]\n})\nexport class TerraSliderComponent implements OnInit\n{\n\n    @Input()\n    public inputValue:number;\n\n    @Output()\n    public inputValueChange:EventEmitter<number> = new EventEmitter<number>();\n\n    @Input()\n    public inputName:string;\n\n    @Input()\n    public inputMin:number = 0;\n\n    @Input()\n    public inputMax:number = 1;\n\n    @Input()\n    public inputInterval:number = 0;\n\n    @Input()\n    public inputPrecision:number = null;\n\n    @Input()\n    public inputShowMinMax:boolean = false;\n\n    @Input()\n    public inputShowTicks:boolean = false;\n\n    @Input()\n    public inputIsDisabled:boolean = false;\n\n    @ViewChild('sliderBar', {read: ElementRef})\n    private sliderBarElement:ElementRef;\n\n    constructor(private element:ElementRef, private changeDetector:ChangeDetectorRef)\n    {\n    }\n\n    public get handlePosition():number\n    {\n        let sliderWidth:number = this.sliderBarElement.nativeElement.getBoundingClientRect().width;\n        let percentage:number = Math.abs(this.inputMin - this.inputValue) / Math.abs(this.inputMin - this.inputMax);\n        if(percentage < 0)\n        {\n            return 0;\n        }\n\n        if(percentage > 1)\n        {\n            return sliderWidth;\n        }\n\n        return sliderWidth * percentage;\n    }\n\n    public set handlePosition(value:number)\n    {\n        let sliderWidth:number = this.sliderBarElement.nativeElement.getBoundingClientRect().width;\n        let percentage:number = (value / sliderWidth) * 100;\n        let percentageValue:number = Math.abs(this.inputMin - this.inputMax) / 100;\n        // console.log( percentage + \"% * \" + percentageValue + \" = \" + percentage * percentageValue );\n        this.inputValue = this.inputMin + (percentage * percentageValue);\n\n        if(this.inputInterval > 0)\n        {\n            let diff = this.inputValue % this.inputInterval;\n            if(diff !== 0)\n            {\n                if(diff < this.inputInterval / 2)\n                {\n                    this.inputValue -= diff;\n                }\n                else\n                {\n                    this.inputValue += this.inputInterval - diff;\n                }\n            }\n        }\n\n\n        if(this.inputValue < this.inputMin)\n        {\n            this.inputValue = this.inputMin;\n        }\n\n        if(this.inputValue > this.inputMax)\n        {\n            this.inputValue = this.inputMax;\n        }\n\n        this.inputValueChange.emit(this.inputValue);\n\n        this.changeDetector.detectChanges();\n    }\n\n    private get grid():GridOptions\n    {\n        if(this.inputInterval > 0)\n        {\n            let stepSize:number = Math.abs(this.inputMin - this.inputMax) / this.inputInterval;\n\n            return {\n                x: this.element.nativeElement.getBoundingClientRect().width / stepSize,\n                y: 0\n            };\n        }\n\n        return null;\n    }\n\n    public ngOnInit():void\n    {\n        if(isNullOrUndefined(this.inputValue))\n        {\n            this.inputValue = this.inputMin + (Math.abs(this.inputMin - this.inputMax) / 2);\n        }\n\n        if(isNullOrUndefined(this.inputPrecision))\n        {\n            if(this.inputInterval > 0)\n            {\n                let numberOfSteps:number = Math.abs(this.inputMin - this.inputMax) / this.inputInterval;\n                let stepSize:number = Math.abs(this.inputMin - this.inputMax) / numberOfSteps;\n                let steps:number[] = [];\n                let current:number = this.inputMin;\n                while(current <= this.inputMax)\n                {\n                    steps.push(current);\n                    current += stepSize;\n                }\n\n                this.inputPrecision = Math.max(\n                    ...steps.map(step =>\n                    {\n                        let parts = (\"\" + step).split(\".\");\n                        if(!parts[1])\n                        {\n                            return 0;\n                        }\n                        else\n                        {\n                            let match = /[1-9]/g.exec(parts[1].substr(0, 3));\n                            if(match)\n                            {\n                                return match.index;\n                            }\n                            else\n                            {\n                                return 0;\n                            }\n                        }\n                    })\n                );\n            }\n            else\n            {\n                this.inputPrecision = 5 - Math.max((\"\" + this.inputMin).length, (\"\" + this.inputMax).length);\n            }\n\n        }\n\n        if(this.inputPrecision > 3)\n        {\n            this.inputPrecision = 3\n        }\n    }\n\n    public onDrag(event:Interact.InteractEvent)\n    {\n        this.moveToPosition(event.pageX);\n    }\n\n    public onBarClicked(event:MouseEvent)\n    {\n        this.moveToPosition(event.pageX);\n    }\n\n    private moveToPosition(position:number)\n    {\n        if(!this.inputIsDisabled)\n        {\n            let sliderRect = this.sliderBarElement.nativeElement.getBoundingClientRect();\n            this.handlePosition = position - sliderRect.left;\n        }\n    }\n\n    public getTicks()\n    {\n        let tickPositions:number[] = [];\n        if(this.inputInterval > 0)\n        {\n            let numberOfTicks:number = Math.abs(this.inputMin - this.inputMax) / this.inputInterval;\n            for(let i = 1; i < numberOfTicks; i++)\n            {\n                tickPositions.push(i * (100 / numberOfTicks));\n            }\n        }\n        else\n        {\n            tickPositions = [10,\n                             20,\n                             30,\n                             40,\n                             50,\n                             60,\n                             70,\n                             80,\n                             90]\n        }\n\n        return tickPositions.map((percentage:number) =>\n        {\n            return {\n                position: percentage,\n                caption:  this.inputMin + (Math.abs(this.inputMin - this.inputMax) * (percentage / 100))\n            };\n        });\n    }\n}"],"sourceRoot":"/source/"}