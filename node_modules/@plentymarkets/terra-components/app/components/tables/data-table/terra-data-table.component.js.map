{"version":3,"sources":["app/components/tables/data-table/terra-data-table.component.ts"],"names":[],"mappings":"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","file":"app/components/tables/data-table/terra-data-table.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { TerraDataTableHeaderCellInterface } from './cell/terra-data-table-header-cell.interface';\nimport { TerraDataTableRowInterface } from './row/terra-data-table-row.interface';\nimport { TerraDataTableContextMenuService } from './context-menu/service/terra-data-table-context-menu.service';\nimport { TerraDataTableCellInterface } from './cell/terra-data-table-cell.interface';\nimport {\n    isArray,\n    isNullOrUndefined\n} from 'util';\nimport {\n    TerraRefTypeEnum,\n    TerraRefTypeInterface\n} from './cell/terra-ref-type.interface';\nimport { TerraDataTableTextInterface } from './cell/terra-data-table-text.interface';\nimport {\n    animate,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\nimport {\n    TerraAlertComponent,\n    TerraBaseData,\n    TerraBaseService,\n    TerraButtonInterface,\n    TerraCheckboxComponent,\n    TerraPagerInterface,\n    TerraSelectBoxValueInterface,\n    TerraTagInterface\n} from '../../../../';\n\n@Component({\n    selector:   'terra-data-table',\n    template:   require('./terra-data-table.component.html'),\n    styles:     [require('./terra-data-table.component.scss')],\n    providers:  [TerraDataTableContextMenuService],\n    animations: [\n        trigger('collapsedState', [\n            state('hidden', style({\n                height:          '0',\n                overflow:        'hidden',\n                'margin-bottom': '0'\n            })),\n            state('collapsed', style({\n                height:          '*',\n                overflow:        'initial',\n                'margin-bottom': '6px'\n            })),\n            transition('hidden <=> collapsed', [\n                animate(300)\n\n            ])\n        ])\n    ]\n})\nexport class TerraDataTableComponent<S extends TerraBaseService, D extends TerraBaseData, I extends TerraPagerInterface> implements OnChanges\n{\n    @ViewChild('viewChildHeaderCheckbox') viewChildHeaderCheckbox:TerraCheckboxComponent;\n\n    @Input() inputService:S;\n    @Input() inputDataType:string;\n    @Input() inputHasCheckboxes:boolean;\n    @Input() inputHasPager:boolean;\n    @Input() inputHasInitialLoading:boolean;\n    @Input() inputNoResultTextPrimary:string;\n    @Input() inputNoResultTextSecondary:string;\n    @Input() inputNoResultButtons:Array<TerraButtonInterface>;\n    @Input() inputShowGroupFunctions:boolean = false;\n    @Input() inputGroupFunctionExecuteButtonIsDisabled:boolean = true;\n\n    @Output() outputDoPagingEvent = new EventEmitter<TerraPagerInterface>();\n    @Output() outputRowCheckBoxChanged:EventEmitter<TerraDataTableRowInterface<D>> = new EventEmitter();\n    @Output() outputGroupFunctionExecuteButtonClicked:EventEmitter<Array<TerraDataTableRowInterface<D>>> = new EventEmitter();\n\n    public headerList:Array<TerraDataTableHeaderCellInterface>;\n    public rowList:Array<TerraDataTableRowInterface<D>>;\n    public pagingData:TerraPagerInterface;\n    public pagingSize:Array<TerraSelectBoxValueInterface>;\n    public onSuccessFunction:(res) => void;\n    public defaultPagingSize:number;\n    private _selectedRowList:Array<TerraDataTableRowInterface<D>> = [];\n    private _isHeaderCheckboxChecked:boolean = false;\n    private _initialLoadingMessage:string;\n    private _alert:TerraAlertComponent = TerraAlertComponent.getInstance();\n    private _langPrefix:string = 'terraDataTable';\n    private _requestPending:boolean;\n    private _refTypeEnum = TerraRefTypeEnum;\n\n    /**\n     * @deprecated\n     */\n    @Input()\n    private _hasCheckboxes:boolean;\n\n    constructor()\n    {\n        this._hasCheckboxes = true;\n        this.inputHasCheckboxes = true;\n        this.inputHasInitialLoading = false;\n        this.inputHasPager = true;\n\n        this.rowList = [];\n    }\n\n    private get getCollapsedState():string\n    {\n        if(this.inputShowGroupFunctions)\n        {\n            return 'collapsed';\n        }\n        else\n        {\n            return 'hidden';\n        }\n    }\n\n    ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes['_hasCheckboxes'])\n        {\n            console.warn(\n                '_hasCheckboxes is deprecated. It will be removed in one of the upcoming releases. Please use inputHasCheckboxes instead.');\n            this.inputHasCheckboxes = changes['_hasCheckboxes'].currentValue;\n        }\n    }\n\n    private onHeaderCheckboxChange(isChecked:boolean):void\n    {\n        this._isHeaderCheckboxChecked = isChecked;\n\n        this.rowList.forEach((row) =>\n        {\n            if(!row.disabled)\n            {\n                this.changeRowState(isChecked, row);\n            }\n        });\n    }\n\n    private onRowCheckboxChange(isChecked:boolean, row:TerraDataTableRowInterface<D>):void\n    {\n        this.changeRowState(isChecked, row);\n        this.outputRowCheckBoxChanged.emit(row);\n\n        if(this.selectedRowList.length == 0)\n        {\n            this._isHeaderCheckboxChecked = false;\n        }\n        else if(this.selectedRowList.length > 0 && this.rowList.length == this.selectedRowList.length)\n        {\n            this._isHeaderCheckboxChecked = true;\n        }\n        else\n        {\n            this.viewChildHeaderCheckbox.isIndeterminate = true;\n        }\n    }\n\n    private checkTooltipPlacement(placement:string):string\n    {\n        if(!isNullOrUndefined(placement) && placement !== '')\n        {\n            return placement;\n        }\n\n        return 'top';\n    }\n\n    private changeRowState(isChecked:boolean, rowToChange:TerraDataTableRowInterface<D>):void\n    {\n        rowToChange.selected = isChecked;\n\n        let rowFound:boolean = false;\n\n        this.selectedRowList.forEach((row) =>\n        {\n            if(row == rowToChange)\n            {\n                rowFound = true;\n            }\n        });\n\n        if(rowToChange.selected)\n        {\n            if(!rowFound)\n            {\n                this.selectedRowList.push(rowToChange);\n            }\n        }\n        else\n        {\n            let index = this.selectedRowList.indexOf(rowToChange);\n\n            this.selectedRowList.splice(index, 1);\n        }\n    }\n\n    private rowClicked(cell:TerraDataTableCellInterface, row:TerraDataTableRowInterface<D>):void\n    {\n        if(!cell.buttonList && !row.disabled)\n        {\n            this.rowList.forEach((row) =>\n            {\n                row.isActive = false;\n            });\n\n            row.isActive = true;\n            row.clickFunction();\n        }\n    }\n\n    public deleteRow(rowToDelete:TerraDataTableRowInterface<D>):void\n    {\n        let index = this.rowList.indexOf(rowToDelete);\n\n        this.rowList.splice(index, 1);\n\n        let selectedIndex = this.selectedRowList.indexOf(rowToDelete);\n\n        // check if row exists in selectedRowList\n        if(selectedIndex != null)\n        {\n            this.selectedRowList.splice(selectedIndex, 1);\n        }\n    }\n\n    public get selectedRowList():Array<TerraDataTableRowInterface<D>>\n    {\n        return this._selectedRowList;\n    }\n\n    public doPaging(pagerData:TerraPagerInterface):void\n    {\n        this.outputDoPagingEvent.emit(pagerData);\n\n        this._isHeaderCheckboxChecked = false;\n\n        if(!isNullOrUndefined(this.rowList))\n        {\n            this.rowList.forEach((row:TerraDataTableRowInterface<D>) =>\n            {\n                this.changeRowState(false, row);\n            });\n        }\n    }\n\n    public doSearch(restCall:Observable<I>):void\n    {\n        if(isNullOrUndefined(restCall))\n        {\n            return;\n        }\n\n        this._requestPending = true;\n        restCall.subscribe(\n            (res:I) =>\n            {\n                this._selectedRowList = [];\n                this.onSuccessFunction(res);\n            },\n            (error:any) =>\n            {\n                if(error.status == 401 || error.status == 500)\n                {\n                    //TODO\n                    //alert(error.status);\n                }\n            },\n            () =>\n            {\n                this._requestPending = false;\n            }\n        );\n    }\n\n    public getTextAlign(item:TerraDataTableHeaderCellInterface):string\n    {\n        if(!isNullOrUndefined(item.textAlign))\n        {\n            return item.textAlign;\n        }\n        else\n        {\n            return 'left';\n        }\n    }\n\n    private getCellDataType(data:any):string\n    {\n        function isRefType(arg:any):arg is TerraRefTypeInterface\n        {\n            return arg\n                   && arg.type && typeof arg.type == 'string'\n                   && arg.value && typeof arg.value == 'string';\n        }\n\n        function isTextType(arg:any):arg is TerraDataTableTextInterface\n        {\n            return arg && arg.caption && typeof arg.caption == 'string';\n        }\n\n        function isTagArray(arg:any):arg is Array<TerraTagInterface>\n        {\n            // check if it is an array\n            if(!isArray(arg))\n            {\n                return false;\n            }\n\n            // check if every element of the array implements the tag interface\n            let implementsInterface:boolean = true;\n            arg.forEach((elem:any) =>\n            {\n                implementsInterface = implementsInterface && elem.badge && typeof elem.badge == 'string';\n            });\n\n            return arg && implementsInterface;\n        }\n\n        function isButtonArray(arg:any):arg is Array<TerraButtonInterface>\n        {\n            // check if it is an array\n            if(!isArray(arg))\n            {\n                return false;\n            }\n\n            // check if every element of the array implements the button interface\n            let implementsInterface:boolean = true;\n            arg.forEach((elem:any) =>\n            {\n                implementsInterface = implementsInterface && elem.clickFunction && typeof elem.clickFunction == 'function';\n            });\n\n            return arg && implementsInterface;\n        }\n\n        if(typeof data === 'object')\n        {\n            if(isRefType(data))\n            {\n                return 'TerraRefTypeInterface';\n            }\n            else if(isTextType(data))\n            {\n                return 'TerraDataTableTextInterface';\n            }\n            else if(isTagArray(data))\n            {\n                return 'tags';\n            }\n            else if(isButtonArray(data))\n            {\n                return 'buttons';\n            }\n        }\n        return typeof data;\n    }\n\n    private onGroupFunctionExecuteButtonClicked(event:Event):void\n    {\n        this.outputGroupFunctionExecuteButtonClicked.emit(this._selectedRowList);\n    }\n}\n"],"sourceRoot":"/source/"}