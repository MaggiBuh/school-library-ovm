import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { TerraDataTableHeaderCellInterface } from './cell/terra-data-table-header-cell.interface';
import { TerraDataTableRowInterface } from './row/terra-data-table-row.interface';
import { TerraBaseData, TerraBaseService, TerraButtonInterface, TerraCheckboxComponent, TerraPagerInterface, TerraSelectBoxValueInterface } from '../../../../';
export declare class TerraDataTableComponent<S extends TerraBaseService, D extends TerraBaseData, I extends TerraPagerInterface> implements OnChanges {
    viewChildHeaderCheckbox: TerraCheckboxComponent;
    inputService: S;
    inputDataType: string;
    inputHasCheckboxes: boolean;
    inputHasPager: boolean;
    inputHasInitialLoading: boolean;
    inputNoResultTextPrimary: string;
    inputNoResultTextSecondary: string;
    inputNoResultButtons: Array<TerraButtonInterface>;
    inputShowGroupFunctions: boolean;
    inputGroupFunctionExecuteButtonIsDisabled: boolean;
    outputDoPagingEvent: EventEmitter<TerraPagerInterface>;
    outputRowCheckBoxChanged: EventEmitter<TerraDataTableRowInterface<D>>;
    outputGroupFunctionExecuteButtonClicked: EventEmitter<Array<TerraDataTableRowInterface<D>>>;
    headerList: Array<TerraDataTableHeaderCellInterface>;
    rowList: Array<TerraDataTableRowInterface<D>>;
    pagingData: TerraPagerInterface;
    pagingSize: Array<TerraSelectBoxValueInterface>;
    onSuccessFunction: (res) => void;
    defaultPagingSize: number;
    private _selectedRowList;
    private _isHeaderCheckboxChecked;
    private _initialLoadingMessage;
    private _alert;
    private _langPrefix;
    private _requestPending;
    private _refTypeEnum;
    /**
     * @deprecated
     */
    private _hasCheckboxes;
    constructor();
    private readonly getCollapsedState;
    ngOnChanges(changes: SimpleChanges): void;
    private onHeaderCheckboxChange(isChecked);
    private onRowCheckboxChange(isChecked, row);
    private checkTooltipPlacement(placement);
    private changeRowState(isChecked, rowToChange);
    private rowClicked(cell, row);
    deleteRow(rowToDelete: TerraDataTableRowInterface<D>): void;
    readonly selectedRowList: Array<TerraDataTableRowInterface<D>>;
    doPaging(pagerData: TerraPagerInterface): void;
    doSearch(restCall: Observable<I>): void;
    getTextAlign(item: TerraDataTableHeaderCellInterface): string;
    private getCellDataType(data);
    private onGroupFunctionExecuteButtonClicked(event);
}
