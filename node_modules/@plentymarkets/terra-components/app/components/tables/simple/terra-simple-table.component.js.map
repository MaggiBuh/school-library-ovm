{"version":3,"sources":["app/components/tables/simple/terra-simple-table.component.ts"],"names":[],"mappings":"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","file":"app/components/tables/simple/terra-simple-table.component.js","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { TerraSimpleTableHeaderCellInterface } from './cell/terra-simple-table-header-cell.interface';\nimport { TerraSimpleTableRowInterface } from './row/terra-simple-table-row.interface';\nimport { TerraCheckboxComponent } from '../../forms/checkbox/terra-checkbox.component';\nimport { Key } from 'ts-keycode-enum';\n\n@Component({\n    selector: 'terra-simple-table',\n    styles:   [require('./terra-simple-table.component.scss')],\n    template: require('./terra-simple-table.component.html')\n})\nexport class TerraSimpleTableComponent<D> implements OnChanges\n{\n    @Input() inputHeaderList:Array<TerraSimpleTableHeaderCellInterface>;\n    @Input() inputRowList:Array<TerraSimpleTableRowInterface<D>>;\n    @Input() inputUseHighlighting:boolean = false;\n    @Input() inputIsStriped:boolean = false;\n    @Input() inputHasCheckboxes:boolean = false;\n    @Input() inputEnableHotkeys:boolean = false;\n    @Input() inputHighlightedRow:TerraSimpleTableRowInterface<D>;\n\n    @Output() outputHeaderCheckBoxChanged:EventEmitter<boolean> = new EventEmitter();\n    @Output() outputRowCheckBoxChanged:EventEmitter<TerraSimpleTableRowInterface<D>> = new EventEmitter();\n    @Output() outputRowClicked:EventEmitter<TerraSimpleTableRowInterface<D>> = new EventEmitter();\n    @Output() outputHighlightedRowChange:EventEmitter<TerraSimpleTableRowInterface<D>> = new EventEmitter();\n    @Output() outputSelectedRowsChange:EventEmitter<Array<TerraSimpleTableRowInterface<D>>> = new EventEmitter();\n\n    @ViewChild('viewChildHeaderCheckbox') viewChildHeaderCheckbox:TerraCheckboxComponent;\n\n    @ViewChild('scrollContainer', {read: ElementRef}) scrollContainer:ElementRef;\n\n    private _headerCheckbox:{ checked:boolean, isIndeterminate:boolean };\n    private _selectedRowList:Array<TerraSimpleTableRowInterface<D>> = [];\n\n    public onRowListChange:EventEmitter<void> = new EventEmitter();\n\n    constructor(private _elementRef:ElementRef)\n    {\n        this._headerCheckbox = {\n            checked:         false,\n            isIndeterminate: false\n        };\n        this._selectedRowList = [];\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes.hasOwnProperty(\"inputRowList\"))\n        {\n            this.resetSelectedRows();\n            this.onRowListChange.emit();\n        }\n    }\n\n    /**\n     * @deprecated\n     *\n     * @returns {Array<TerraSimpleTableHeaderCellInterface>}\n     */\n    public get headerList():Array<TerraSimpleTableHeaderCellInterface>\n    {\n        return this.inputHeaderList;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @param value\n     */\n    public set headerList(value:Array<TerraSimpleTableHeaderCellInterface>)\n    {\n        this.inputHeaderList = value;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @returns {Array<TerraSimpleTableRowInterface>}\n     */\n    public get rowList():Array<TerraSimpleTableRowInterface<D>>\n    {\n        return this.inputRowList;\n    }\n\n    public set rowList(value:Array<TerraSimpleTableRowInterface<D>>)\n    {\n        this.inputRowList = value;\n    }\n\n    private checkTooltipPlacement(placement:string):string\n    {\n        if(placement != null && placement != '')\n        {\n            return placement;\n        }\n\n        return 'top';\n    }\n\n    private onHeaderCheckboxChange():void\n    {\n        this.outputHeaderCheckBoxChanged.emit(!this._headerCheckbox.checked);\n\n        if(this._headerCheckbox.checked)\n        {\n            this.resetSelectedRows();\n        }\n        else\n        {\n            this.selectAllRows();\n        }\n    }\n\n    private onRowCheckboxChange(row:TerraSimpleTableRowInterface<D>):void\n    {\n        // notify component user\n        this.outputRowCheckBoxChanged.emit(row);\n\n        // update row selection\n        if(this.isSelectedRow(row))\n        {\n            this.deselectRow(row);\n        }\n        else\n        {\n            this.selectRow(row);\n        }\n\n        // update header checkbox state\n        this.updateHeaderCheckboxState();\n\n        // notify user\n        this.outputSelectedRowsChange.emit(this._selectedRowList);\n    }\n\n    private checkHeaderCheckbox():void\n    {\n        this._headerCheckbox.checked = true;\n        this._headerCheckbox.isIndeterminate = false;\n    }\n\n    private uncheckHeaderCheckbox():void\n    {\n        this._headerCheckbox.checked = false;\n        this._headerCheckbox.isIndeterminate = false;\n    }\n\n    private setHeaderCheckboxIndeterminate():void\n    {\n        this._headerCheckbox.checked = false;\n        this._headerCheckbox.isIndeterminate = true;\n    }\n\n    private updateHeaderCheckboxState()\n    {\n        if(this._selectedRowList.length === 0) // anything selected?\n        {\n            this.uncheckHeaderCheckbox();\n        }\n        else if(this._selectedRowList.length > 0 && this.inputRowList.filter(r => !r.disabled).length === this._selectedRowList.length) // all selected?\n        {\n            this.checkHeaderCheckbox();\n        }\n        else // some rows selected -> indeterminate\n        {\n            this.setHeaderCheckboxIndeterminate();\n        }\n    }\n\n    private selectRow(row:TerraSimpleTableRowInterface<D>):void\n    {\n        // check if row is already selected\n        if(this._selectedRowList.find((r:TerraSimpleTableRowInterface<D>) => r === row))\n        {\n            return;\n        }\n\n        // add row to selected row list\n        this._selectedRowList.push(row);\n\n        // notify user that selection has changed\n        this.outputSelectedRowsChange.emit(this._selectedRowList);\n    }\n\n    private deselectRow(row:TerraSimpleTableRowInterface<D>):void\n    {\n        // get index of the row in the selected row list\n        let rowIndex:number = this._selectedRowList.indexOf(row);\n\n        // check if selected row list contains the given row\n        if(rowIndex >= 0)\n        {\n            // remove row from selected row list\n            this._selectedRowList.splice(rowIndex, 1);\n        }\n\n        // notify user that selection has changed\n        this.outputSelectedRowsChange.emit(this._selectedRowList);\n    }\n\n    private selectAllRows():void\n    {\n        this.checkHeaderCheckbox();\n\n        this.inputRowList.forEach((row) =>\n        {\n            if(!row.disabled)\n            {\n                this.selectRow(row);\n            }\n        });\n    }\n\n    private resetSelectedRows():void\n    {\n        this.uncheckHeaderCheckbox();\n\n        // reset selected row list\n        this._selectedRowList = [];\n\n        // notify user that selection has been reset\n        this.outputSelectedRowsChange.emit(this._selectedRowList);\n    }\n\n    private isSelectedRow(row:TerraSimpleTableRowInterface<D>):boolean\n    {\n        return this._selectedRowList.indexOf(row) >= 0;\n    }\n\n    private onCheckboxClick(event:Event):void\n    {\n        // do not emit 'outputRowClicked' when toggling checkbox\n        event.stopPropagation();\n    }\n\n    private onRowClick(row:TerraSimpleTableRowInterface<D>):void\n    {\n        if(this.inputUseHighlighting && !row.disabled)\n        {\n            this.inputHighlightedRow = row;\n            this.outputHighlightedRowChange.emit(this.inputHighlightedRow);\n        }\n        this.outputRowClicked.emit(row);\n    }\n\n    private onKeydown(event:KeyboardEvent):void\n    {\n        if(this.inputEnableHotkeys && this.inputUseHighlighting && this.inputHighlightedRow)\n        {\n            if(event.which === Key.DownArrow || event.which === Key.UpArrow)\n            {\n                this.highlightSiblingRow(event.which === Key.DownArrow)\n            }\n\n            if(event.which === Key.Space && this.inputHasCheckboxes)\n            {\n                if(event.ctrlKey || event.metaKey)\n                {\n                    this._headerCheckbox.checked = !this._headerCheckbox.checked;\n                    this.onHeaderCheckboxChange();\n                }\n                else\n                {\n                    this.onRowCheckboxChange(this.inputHighlightedRow);\n                }\n            }\n\n            if(event.which === Key.Enter)\n            {\n                this.outputRowClicked.emit(this.inputHighlightedRow);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    private highlightSiblingRow(nextSibling:boolean)\n    {\n        if(this.inputHighlightedRow)\n        {\n            let i:number = nextSibling ? 1 : -1;\n            let highlightIndex:number = this.inputRowList.indexOf(this.inputHighlightedRow) + i;\n\n            while(highlightIndex >= 0 && highlightIndex < this.inputRowList.length)\n            {\n                if(!this.inputRowList[highlightIndex].disabled)\n                {\n                    this.inputHighlightedRow = this.inputRowList[highlightIndex];\n                    this.outputHighlightedRowChange.emit(this.inputHighlightedRow);\n                    break;\n                }\n                highlightIndex += i;\n            }\n\n            if(highlightIndex >= 0 && highlightIndex < this.inputRowList.length)\n            {\n                let activeRow:HTMLElement = this._elementRef.nativeElement.querySelector('table tbody tr:nth-child(' + (highlightIndex + 1) + ')');\n                let viewport:ClientRect = this.scrollContainer.nativeElement.getBoundingClientRect();\n                let activeRowPosition:ClientRect = activeRow.getBoundingClientRect();\n\n                if(viewport.bottom < activeRowPosition.bottom)\n                {\n                    this.scrollContainer.nativeElement.scrollTop += (activeRowPosition.bottom - viewport.bottom);\n                }\n                else if(viewport.top > activeRowPosition.top)\n                {\n                    this.scrollContainer.nativeElement.scrollTop -= (viewport.top - activeRowPosition.top);\n                }\n            }\n\n\n        }\n    }\n}\n"],"sourceRoot":"/source/"}