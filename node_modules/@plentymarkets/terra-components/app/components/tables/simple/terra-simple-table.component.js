"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_checkbox_component_1 = require("../../forms/checkbox/terra-checkbox.component");
var ts_keycode_enum_1 = require("ts-keycode-enum");
var TerraSimpleTableComponent = /** @class */ (function () {
    function TerraSimpleTableComponent(_elementRef) {
        this._elementRef = _elementRef;
        this.inputUseHighlighting = false;
        this.inputIsStriped = false;
        this.inputHasCheckboxes = false;
        this.inputEnableHotkeys = false;
        this.outputHeaderCheckBoxChanged = new core_1.EventEmitter();
        this.outputRowCheckBoxChanged = new core_1.EventEmitter();
        this.outputRowClicked = new core_1.EventEmitter();
        this.outputHighlightedRowChange = new core_1.EventEmitter();
        this.outputSelectedRowsChange = new core_1.EventEmitter();
        this._selectedRowList = [];
        this.onRowListChange = new core_1.EventEmitter();
        this._headerCheckbox = {
            checked: false,
            isIndeterminate: false
        };
        this._selectedRowList = [];
    }
    TerraSimpleTableComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty("inputRowList")) {
            this.resetSelectedRows();
            this.onRowListChange.emit();
        }
    };
    Object.defineProperty(TerraSimpleTableComponent.prototype, "headerList", {
        /**
         * @deprecated
         *
         * @returns {Array<TerraSimpleTableHeaderCellInterface>}
         */
        get: function () {
            return this.inputHeaderList;
        },
        /**
         * @deprecated
         *
         * @param value
         */
        set: function (value) {
            this.inputHeaderList = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraSimpleTableComponent.prototype, "rowList", {
        /**
         * @deprecated
         *
         * @returns {Array<TerraSimpleTableRowInterface>}
         */
        get: function () {
            return this.inputRowList;
        },
        set: function (value) {
            this.inputRowList = value;
        },
        enumerable: true,
        configurable: true
    });
    TerraSimpleTableComponent.prototype.checkTooltipPlacement = function (placement) {
        if (placement != null && placement != '') {
            return placement;
        }
        return 'top';
    };
    TerraSimpleTableComponent.prototype.onHeaderCheckboxChange = function () {
        this.outputHeaderCheckBoxChanged.emit(!this._headerCheckbox.checked);
        if (this._headerCheckbox.checked) {
            this.resetSelectedRows();
        }
        else {
            this.selectAllRows();
        }
    };
    TerraSimpleTableComponent.prototype.onRowCheckboxChange = function (row) {
        // notify component user
        this.outputRowCheckBoxChanged.emit(row);
        // update row selection
        if (this.isSelectedRow(row)) {
            this.deselectRow(row);
        }
        else {
            this.selectRow(row);
        }
        // update header checkbox state
        this.updateHeaderCheckboxState();
        // notify user
        this.outputSelectedRowsChange.emit(this._selectedRowList);
    };
    TerraSimpleTableComponent.prototype.checkHeaderCheckbox = function () {
        this._headerCheckbox.checked = true;
        this._headerCheckbox.isIndeterminate = false;
    };
    TerraSimpleTableComponent.prototype.uncheckHeaderCheckbox = function () {
        this._headerCheckbox.checked = false;
        this._headerCheckbox.isIndeterminate = false;
    };
    TerraSimpleTableComponent.prototype.setHeaderCheckboxIndeterminate = function () {
        this._headerCheckbox.checked = false;
        this._headerCheckbox.isIndeterminate = true;
    };
    TerraSimpleTableComponent.prototype.updateHeaderCheckboxState = function () {
        if (this._selectedRowList.length === 0) {
            this.uncheckHeaderCheckbox();
        }
        else if (this._selectedRowList.length > 0 && this.inputRowList.filter(function (r) { return !r.disabled; }).length === this._selectedRowList.length) {
            this.checkHeaderCheckbox();
        }
        else {
            this.setHeaderCheckboxIndeterminate();
        }
    };
    TerraSimpleTableComponent.prototype.selectRow = function (row) {
        // check if row is already selected
        if (this._selectedRowList.find(function (r) { return r === row; })) {
            return;
        }
        // add row to selected row list
        this._selectedRowList.push(row);
        // notify user that selection has changed
        this.outputSelectedRowsChange.emit(this._selectedRowList);
    };
    TerraSimpleTableComponent.prototype.deselectRow = function (row) {
        // get index of the row in the selected row list
        var rowIndex = this._selectedRowList.indexOf(row);
        // check if selected row list contains the given row
        if (rowIndex >= 0) {
            // remove row from selected row list
            this._selectedRowList.splice(rowIndex, 1);
        }
        // notify user that selection has changed
        this.outputSelectedRowsChange.emit(this._selectedRowList);
    };
    TerraSimpleTableComponent.prototype.selectAllRows = function () {
        var _this = this;
        this.checkHeaderCheckbox();
        this.inputRowList.forEach(function (row) {
            if (!row.disabled) {
                _this.selectRow(row);
            }
        });
    };
    TerraSimpleTableComponent.prototype.resetSelectedRows = function () {
        this.uncheckHeaderCheckbox();
        // reset selected row list
        this._selectedRowList = [];
        // notify user that selection has been reset
        this.outputSelectedRowsChange.emit(this._selectedRowList);
    };
    TerraSimpleTableComponent.prototype.isSelectedRow = function (row) {
        return this._selectedRowList.indexOf(row) >= 0;
    };
    TerraSimpleTableComponent.prototype.onCheckboxClick = function (event) {
        // do not emit 'outputRowClicked' when toggling checkbox
        event.stopPropagation();
    };
    TerraSimpleTableComponent.prototype.onRowClick = function (row) {
        if (this.inputUseHighlighting && !row.disabled) {
            this.inputHighlightedRow = row;
            this.outputHighlightedRowChange.emit(this.inputHighlightedRow);
        }
        this.outputRowClicked.emit(row);
    };
    TerraSimpleTableComponent.prototype.onKeydown = function (event) {
        if (this.inputEnableHotkeys && this.inputUseHighlighting && this.inputHighlightedRow) {
            if (event.which === ts_keycode_enum_1.Key.DownArrow || event.which === ts_keycode_enum_1.Key.UpArrow) {
                this.highlightSiblingRow(event.which === ts_keycode_enum_1.Key.DownArrow);
            }
            if (event.which === ts_keycode_enum_1.Key.Space && this.inputHasCheckboxes) {
                if (event.ctrlKey || event.metaKey) {
                    this._headerCheckbox.checked = !this._headerCheckbox.checked;
                    this.onHeaderCheckboxChange();
                }
                else {
                    this.onRowCheckboxChange(this.inputHighlightedRow);
                }
            }
            if (event.which === ts_keycode_enum_1.Key.Enter) {
                this.outputRowClicked.emit(this.inputHighlightedRow);
            }
            event.preventDefault();
        }
    };
    TerraSimpleTableComponent.prototype.highlightSiblingRow = function (nextSibling) {
        if (this.inputHighlightedRow) {
            var i = nextSibling ? 1 : -1;
            var highlightIndex = this.inputRowList.indexOf(this.inputHighlightedRow) + i;
            while (highlightIndex >= 0 && highlightIndex < this.inputRowList.length) {
                if (!this.inputRowList[highlightIndex].disabled) {
                    this.inputHighlightedRow = this.inputRowList[highlightIndex];
                    this.outputHighlightedRowChange.emit(this.inputHighlightedRow);
                    break;
                }
                highlightIndex += i;
            }
            if (highlightIndex >= 0 && highlightIndex < this.inputRowList.length) {
                var activeRow = this._elementRef.nativeElement.querySelector('table tbody tr:nth-child(' + (highlightIndex + 1) + ')');
                var viewport = this.scrollContainer.nativeElement.getBoundingClientRect();
                var activeRowPosition = activeRow.getBoundingClientRect();
                if (viewport.bottom < activeRowPosition.bottom) {
                    this.scrollContainer.nativeElement.scrollTop += (activeRowPosition.bottom - viewport.bottom);
                }
                else if (viewport.top > activeRowPosition.top) {
                    this.scrollContainer.nativeElement.scrollTop -= (viewport.top - activeRowPosition.top);
                }
            }
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraSimpleTableComponent.prototype, "inputHeaderList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraSimpleTableComponent.prototype, "inputRowList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSimpleTableComponent.prototype, "inputUseHighlighting", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSimpleTableComponent.prototype, "inputIsStriped", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSimpleTableComponent.prototype, "inputHasCheckboxes", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSimpleTableComponent.prototype, "inputEnableHotkeys", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], TerraSimpleTableComponent.prototype, "inputHighlightedRow", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSimpleTableComponent.prototype, "outputHeaderCheckBoxChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSimpleTableComponent.prototype, "outputRowCheckBoxChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSimpleTableComponent.prototype, "outputRowClicked", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSimpleTableComponent.prototype, "outputHighlightedRowChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSimpleTableComponent.prototype, "outputSelectedRowsChange", void 0);
    __decorate([
        core_1.ViewChild('viewChildHeaderCheckbox'),
        __metadata("design:type", terra_checkbox_component_1.TerraCheckboxComponent)
    ], TerraSimpleTableComponent.prototype, "viewChildHeaderCheckbox", void 0);
    __decorate([
        core_1.ViewChild('scrollContainer', { read: core_1.ElementRef }),
        __metadata("design:type", core_1.ElementRef)
    ], TerraSimpleTableComponent.prototype, "scrollContainer", void 0);
    TerraSimpleTableComponent = __decorate([
        core_1.Component({
            selector: 'terra-simple-table',
            styles: [require('./terra-simple-table.component.scss')],
            template: require('./terra-simple-table.component.html')
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], TerraSimpleTableComponent);
    return TerraSimpleTableComponent;
}());
exports.TerraSimpleTableComponent = TerraSimpleTableComponent;

//# sourceMappingURL=terra-simple-table.component.js.map
