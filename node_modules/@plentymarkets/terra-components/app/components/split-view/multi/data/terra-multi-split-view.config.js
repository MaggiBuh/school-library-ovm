"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("util");
var TerraMultiSplitViewConfig = /** @class */ (function () {
    function TerraMultiSplitViewConfig() {
        this.resizeViewEventEmitter = new core_1.EventEmitter();
        this._views = [];
        this._addViewEventEmitter = new core_1.EventEmitter();
        this._deleteViewEventEmitter = new core_1.EventEmitter();
        this._selectBreadcrumbEventEmitter = new core_1.EventEmitter();
        this._setSelectedViewEventEmitter = new core_1.EventEmitter();
    }
    TerraMultiSplitViewConfig.prototype.addView = function (view, parent) {
        var _this = this;
        if (view.parameter) {
            console.warn('Property \'parameter\' is deprecated. It will be removed in one of the upcoming releases. Please use \'inputs\' instead.');
        }
        // TODO: setTimeout can be removed, if it is guaranteed that change detection is fired when adding a new view
        setTimeout(function () {
            if (util_1.isNullOrUndefined(view.isBackgroundColorGrey)) {
                view.isBackgroundColorGrey = false;
            }
            if (util_1.isNullOrUndefined(parent)) {
                if (util_1.isNullOrUndefined(_this.currentSelectedView)) {
                    _this.currentSelectedView = view;
                    _this._views.push(view);
                }
                else {
                    parent = _this.currentSelectedView;
                }
            }
            if (parent) {
                view.parent = parent;
                if (util_1.isNullOrUndefined(parent.children)) {
                    parent.children = [view];
                }
                else {
                    var viewExist = false;
                    for (var _i = 0, _a = parent.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        // TODO very ugly way, maybe add an option to use an id?
                        var hasSameParameter = (child.parameter && view.parameter && JSON.stringify(child.parameter) === JSON.stringify(view.parameter)) ||
                            (child.inputs && view.inputs && JSON.stringify(child.inputs) === JSON.stringify(view.inputs)) ||
                            (child.name === view.name);
                        if (hasSameParameter && child.module.ngModule == view.module.ngModule) {
                            view = child;
                            viewExist = true;
                            break;
                        }
                    }
                    if (!viewExist) {
                        parent.children.push(view);
                    }
                }
            }
            _this.addViewEventEmitter.next(view);
        });
    };
    TerraMultiSplitViewConfig.prototype.removeView = function (view) {
        if (util_1.isNullOrUndefined(view)) {
            return;
        }
        var parent = view.parent;
        var viewIndex = parent.children.findIndex(function (elem) { return elem === view; });
        if (viewIndex >= 0) {
            parent.children.splice(viewIndex, 1);
            this.deleteViewEventEmitter.next(view);
        }
    };
    TerraMultiSplitViewConfig.prototype.resizeView = function (view, width) {
        view.defaultWidth = width;
        this.resizeViewEventEmitter.next(view);
    };
    TerraMultiSplitViewConfig.prototype.setSelectedView = function (view) {
        this._setSelectedViewEventEmitter.next(view);
    };
    TerraMultiSplitViewConfig.prototype.reset = function () {
        this._views = [];
        this.currentSelectedView = null;
        this._addViewEventEmitter.unsubscribe();
        this._addViewEventEmitter = new core_1.EventEmitter();
        this._deleteViewEventEmitter.unsubscribe();
        this._deleteViewEventEmitter = new core_1.EventEmitter();
        this.resizeViewEventEmitter.unsubscribe();
        this.resizeViewEventEmitter = new core_1.EventEmitter();
        this._selectBreadcrumbEventEmitter.unsubscribe();
        this._selectBreadcrumbEventEmitter = new core_1.EventEmitter();
        this._setSelectedViewEventEmitter.unsubscribe();
        this._setSelectedViewEventEmitter = new core_1.EventEmitter();
    };
    Object.defineProperty(TerraMultiSplitViewConfig.prototype, "deleteViewEventEmitter", {
        get: function () {
            return this._deleteViewEventEmitter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraMultiSplitViewConfig.prototype, "addViewEventEmitter", {
        get: function () {
            return this._addViewEventEmitter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraMultiSplitViewConfig.prototype, "selectBreadcrumbEventEmitter", {
        get: function () {
            return this._selectBreadcrumbEventEmitter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraMultiSplitViewConfig.prototype, "setSelectedViewEventEmitter", {
        get: function () {
            return this._setSelectedViewEventEmitter;
        },
        enumerable: true,
        configurable: true
    });
    TerraMultiSplitViewConfig = __decorate([
        core_1.Injectable()
    ], TerraMultiSplitViewConfig);
    return TerraMultiSplitViewConfig;
}());
exports.TerraMultiSplitViewConfig = TerraMultiSplitViewConfig;

//# sourceMappingURL=terra-multi-split-view.config.js.map
