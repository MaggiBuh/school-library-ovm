{"version":3,"sources":["app/components/tile/panel/terra-tile-box-panel.component.ts"],"names":[],"mappings":"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","file":"app/components/tile/panel/terra-tile-box-panel.component.js","sourcesContent":["import {\n    Component,\n    Input\n} from '@angular/core';\nimport { TerraTileBoxInterface } from '../box/data/terra-tile-box.interface';\n\n/**\n * @author mkunze\n */\n@Component({\n    selector: 'terra-tile-box-panel',\n    styles:   [require('./terra-tile-box-panel.component.scss')],\n    template: require('./terra-tile-box-panel.component.html')\n})\nexport class TerraTileBoxPanelComponent\n{\n    @Input()\n    public inputTileBoxList:Array<TerraTileBoxInterface>;\n\n    @Input()\n    public inputIsViewToggleable:boolean;\n\n    public selectedTileBoxList:Array<TerraTileBoxInterface> = [];\n    public viewStyle:boolean = false;\n\n    private _draggedIndex:number;\n\n    constructor()\n    {\n        this.inputIsViewToggleable = false;\n    }\n\n    private onBoxClick(event:Event, tile:TerraTileBoxInterface):void\n    {\n        tile.isSelected = !tile.isSelected;\n\n        let index:number = this.selectedTileBoxList.indexOf(tile);\n\n        if(tile.isSelected && index === -1)\n        {\n            this.selectedTileBoxList.push(tile);\n        }\n        else if(!tile.isSelected && index !== -1)\n        {\n            this.selectedTileBoxList.splice(index, 1);\n        }\n    }\n\n    private onDragStart(event:DragEvent, draggingTile:TerraTileBoxInterface):void\n    {\n        this._draggedIndex = this.inputTileBoxList.indexOf(draggingTile);\n        draggingTile.isDragging = true;\n\n        for(let tile of this.inputTileBoxList)\n        {\n            if(tile !== draggingTile)\n            {\n                tile.isDropTarget = true;\n            }\n        }\n\n        // awesome hack for firefox! it rocks!!!\n        event.dataTransfer.setData('text', 'anything');\n    }\n\n    private onDragEnd(event:DragEvent, draggingTile:TerraTileBoxInterface):void\n    {\n        event.preventDefault();\n\n        draggingTile.isDragging = false;\n\n        for(let tile of this.inputTileBoxList)\n        {\n            tile.isDropTarget = false;\n            tile.isHover = false;\n        }\n    }\n\n    private onDragLeave(event:DragEvent, hoverTile:TerraTileBoxInterface):void\n    {\n        event.preventDefault();\n\n        if(!hoverTile.isDragging)\n        {\n            hoverTile.isHover = false;\n        }\n    }\n\n    private onDrop(event:Event, droppedTile:TerraTileBoxInterface):void\n    {\n        event.preventDefault();\n\n        let draggedTile:TerraTileBoxInterface = this.inputTileBoxList[this._draggedIndex];\n        draggedTile.isDragging = false;\n\n        for(let tile of this.inputTileBoxList)\n        {\n            tile.isDropTarget = false;\n            tile.isHover = false;\n        }\n\n        let droppedIndex:number = this.inputTileBoxList.indexOf(droppedTile);\n\n        this.inputTileBoxList.splice(this._draggedIndex, 1);\n        this.inputTileBoxList.splice(droppedIndex, 0, draggedTile);\n    }\n\n    private onDragOver(event:Event, hoverTile:TerraTileBoxInterface):void\n    {\n        event.preventDefault();\n\n        if(!hoverTile.isDragging)\n        {\n            hoverTile.isHover = true;\n\n            for(let tile of this.inputTileBoxList)\n            {\n                if(tile !== hoverTile)\n                {\n                    tile.isHover = false;\n                }\n            }\n        }\n    }\n\n    private toggleView():void\n    {\n        this.viewStyle = !this.viewStyle;\n    }\n}\n"],"sourceRoot":"/source/"}