{"version":3,"sources":["app/components/loading-spinner/service/terra-loading-spinner.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAGuB;AACvB,6BAGc;AAEd;;GAEG;AAEH;IAOI,oCAAoB,IAAW;QAA/B,iBAMC;QANmB,SAAI,GAAJ,IAAI,CAAO;QALvB,cAAS,GAAW,KAAK,CAAC;QAO9B,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAU,CAAU,UAAC,UAA8B;YAErE,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,0CAAK,GAAZ;QAEI,yEAAyE;QACzE,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CACvC,CAAC;YACG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,CAAC;IACL,CAAC;IAEM,yCAAI,GAAX;QAAA,iBAyBC;QAvBG,qEAAqE;QACrE,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,CACtC,CAAC;YACG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAEvB,oEAAoE;YACpE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAEpB,6FAA6F;gBAC7F,UAAU,CAAC;oBAEP,EAAE,CAAA,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CACnB,CAAC;wBACG,oEAAoE;wBACpE,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;4BAEV,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;wBAC1C,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,EAAE,GAAG,CAAC,CAAC;YACZ,CAAC,CACJ,CAAA;QACL,CAAC;IACL,CAAC;IAlDQ,0BAA0B;QADtC,iBAAU,EAAE;yCAQgB,aAAM;OAPtB,0BAA0B,CAmDtC;IAAD,iCAAC;CAnDD,AAmDC,IAAA;AAnDY,gEAA0B","file":"app/components/loading-spinner/service/terra-loading-spinner.service.js","sourcesContent":["import {\n    Injectable,\n    NgZone\n} from '@angular/core';\nimport {\n    Observable,\n    Subscriber\n} from 'rxjs';\n\n/**\n * @author mscharf\n */\n@Injectable()\nexport class TerraLoadingSpinnerService\n{\n    private isLoading:boolean = false;\n    public observable:Observable<boolean>;\n\n    private _subscriber:Subscriber<boolean>;\n\n    constructor(private zone:NgZone)\n    {\n        this.observable = new Observable<boolean>((subscriber:Subscriber<boolean>) =>\n        {\n            this._subscriber = subscriber;\n        });\n    }\n\n    public start():void\n    {\n        // check if currently not loading to reduce unnecessary change detections\n        if(this._subscriber && !this.isLoading)\n        {\n            this.isLoading = true;\n            this._subscriber.next(this.isLoading);\n        }\n    }\n\n    public stop():void\n    {\n        // check if currently loading to reduce unnecessary change detections\n        if(this._subscriber && this.isLoading)\n        {\n            this.isLoading = false;\n\n            // to send no change detection run the setTimeout outside of angular\n            this.zone.runOutsideAngular(() =>\n                {\n                    // set timeout to stop the loading-spinner from blinking because of sequential started events\n                    setTimeout(() =>\n                    {\n                        if(!this.isLoading)\n                        {\n                            // run inside angular zone to detect changes from isLoading to false\n                            this.zone.run(() =>\n                            {\n                                this._subscriber.next(this.isLoading);\n                            });\n                        }\n                    }, 100);\n                }\n            )\n        }\n    }\n}\n"],"sourceRoot":"/source/"}