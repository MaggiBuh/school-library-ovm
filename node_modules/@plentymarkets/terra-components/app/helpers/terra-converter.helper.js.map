{"version":3,"sources":["app/helpers/terra-converter.helper.ts"],"names":[],"mappings":";;;;;;;;AAAA,0CAA8C;AAE9C,sCAA2C;AAG3C;IAAA;IAyCA,CAAC;IAvCG;;;;;OAKG;IACI,mDAAoB,GAA3B,UAA4B,QAAe,EAAE,aAA2B;QAEpE,IAAI,oBAAoB,GAAU,UAAU,CAAC;QAC7C,IAAI,oBAAoB,GAAU,OAAO,CAAC;QAC1C,IAAI,oBAAoB,GAAU,IAAI,CAAC;QAEvC,EAAE,CAAA,CAAC,QAAQ,IAAI,oBAAoB,CAAC,CACpC,CAAC;YACG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,GAAG,oBAAoB,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;QAC9F,CAAC;QACD,IAAI,CAAC,EAAE,CAAA,CAAC,QAAQ,IAAI,oBAAoB,CAAC,CACzC,CAAC;YACG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,GAAG,oBAAoB,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;QAC9F,CAAC;QACD,IAAI,CAAC,EAAE,CAAA,CAAC,QAAQ,IAAI,oBAAoB,CAAC,CACzC,CAAC;YACG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,GAAG,oBAAoB,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;QAC9F,CAAC;QACD,IAAI,CACJ,CAAC;YACG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,aAAa,CAAC,GAAG,IAAI,CAAC;QACtE,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,oDAAqB,GAA5B,UAA6B,MAAa,EAAE,MAAoB;QAE5D,IAAI,IAAI,GAAG,IAAI,oBAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;QACtD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAA,+BAA+B;IAC1E,CAAC;IAxCQ,oBAAoB;QADhC,iBAAU,EAAE;OACA,oBAAoB,CAyChC;IAAD,2BAAC;CAzCD,AAyCC,IAAA;AAzCY,oDAAoB","file":"app/helpers/terra-converter.helper.js","sourcesContent":["import { DecimalPipe } from \"@angular/common\";\nimport { LocaleService } from 'angular-l10n';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class TerraConverterHelper\n{\n    /**\n     * Automatically change the byte size to the corresponding range with the appropriate unit\n     * @param {number} byteSize\n     * @param {LocaleService} localeService\n     * @returns {string}\n     */\n    public convertAndFormatSize(byteSize:number, localeService:LocaleService):string\n    {\n        let GB_CONVERSION_FACTOR:number = 1073741824;\n        let MB_CONVERSION_FACTOR:number = 1048576;\n        let KB_CONVERSION_FACTOR:number = 1024;\n\n        if(byteSize >= GB_CONVERSION_FACTOR)\n        {\n            return this.getLocaleDecimalValue(byteSize / GB_CONVERSION_FACTOR, localeService) + ' GB';\n        }\n        else if(byteSize >= MB_CONVERSION_FACTOR)\n        {\n            return this.getLocaleDecimalValue(byteSize / MB_CONVERSION_FACTOR, localeService) + ' MB';\n        }\n        else if(byteSize >= KB_CONVERSION_FACTOR)\n        {\n            return this.getLocaleDecimalValue(byteSize / KB_CONVERSION_FACTOR, localeService) + ' KB';\n        }\n        else\n        {\n            return this.getLocaleDecimalValue(byteSize, localeService) + ' B';\n        }\n    }\n\n    /**\n     * @param {number} number\n     * @returns {string}\n     */\n    public getLocaleDecimalValue(number:number, locale:LocaleService):string\n    {\n        let pipe = new DecimalPipe(locale.getDefaultLocale());\n        return pipe.transform(number, '1.0-2');// max 2 digits after the comma\n    }\n}\n"],"sourceRoot":"/source/"}