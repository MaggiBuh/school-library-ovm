"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var TerraConverterHelper = /** @class */ (function () {
    function TerraConverterHelper() {
    }
    /**
     * Automatically change the byte size to the corresponding range with the appropriate unit
     * @param {number} byteSize
     * @param {LocaleService} localeService
     * @returns {string}
     */
    TerraConverterHelper.prototype.convertAndFormatSize = function (byteSize, localeService) {
        var GB_CONVERSION_FACTOR = 1073741824;
        var MB_CONVERSION_FACTOR = 1048576;
        var KB_CONVERSION_FACTOR = 1024;
        if (byteSize >= GB_CONVERSION_FACTOR) {
            return this.getLocaleDecimalValue(byteSize / GB_CONVERSION_FACTOR, localeService) + ' GB';
        }
        else if (byteSize >= MB_CONVERSION_FACTOR) {
            return this.getLocaleDecimalValue(byteSize / MB_CONVERSION_FACTOR, localeService) + ' MB';
        }
        else if (byteSize >= KB_CONVERSION_FACTOR) {
            return this.getLocaleDecimalValue(byteSize / KB_CONVERSION_FACTOR, localeService) + ' KB';
        }
        else {
            return this.getLocaleDecimalValue(byteSize, localeService) + ' B';
        }
    };
    /**
     * @param {number} number
     * @returns {string}
     */
    TerraConverterHelper.prototype.getLocaleDecimalValue = function (number, locale) {
        var pipe = new common_1.DecimalPipe(locale.getDefaultLocale());
        return pipe.transform(number, '1.0-2'); // max 2 digits after the comma
    };
    TerraConverterHelper = __decorate([
        core_1.Injectable()
    ], TerraConverterHelper);
    return TerraConverterHelper;
}());
exports.TerraConverterHelper = TerraConverterHelper;

//# sourceMappingURL=terra-converter.helper.js.map
