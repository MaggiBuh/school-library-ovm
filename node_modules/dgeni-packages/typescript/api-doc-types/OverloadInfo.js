"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var getDeclarationTypeText_1 = require("../services/TsParser/getDeclarationTypeText");
var getParameters_1 = require("../services/TsParser/getParameters");
var ExportDoc_1 = require("./ExportDoc");
/**
 * This represents a single overload of an exported function.
 * There will be a FunctionExportDoc that contains these overloads
 */
var OverloadInfo = (function (_super) {
    __extends(OverloadInfo, _super);
    function OverloadInfo(functionDoc, declaration, typeChecker) {
        var _this = _super.call(this, functionDoc.moduleDoc, functionDoc.symbol, declaration, functionDoc.basePath, typeChecker, functionDoc.namespacesToInclude) || this;
        _this.functionDoc = functionDoc;
        _this.docType = 'function-overload';
        _this.parameters = getParameters_1.getParameters(_this.declaration, _this.namespacesToInclude);
        _this.type = getDeclarationTypeText_1.getDeclarationTypeText(_this.declaration, _this.namespacesToInclude);
        // Give this overload doc a more specific id and aliases than it's container doc
        var paramString = "(" + _this.parameters.join(', ') + ")";
        _this.id += paramString;
        _this.aliases = _this.aliases.map(function (alias) { return alias + paramString; });
        return _this;
    }
    return OverloadInfo;
}(ExportDoc_1.ExportDoc));
exports.OverloadInfo = OverloadInfo;
//# sourceMappingURL=OverloadInfo.js.map