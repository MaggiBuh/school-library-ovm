"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-bitwise */
var typescript_1 = require("typescript");
var ClassLikeExportDoc_1 = require("../api-doc-types/ClassLikeExportDoc");
var MethodMemberDoc_1 = require("../api-doc-types/MethodMemberDoc");
/**
 * Classes are Class-like but also can contain static members
 * and cannot have multiple declarations
 */
var ClassExportDoc = (function (_super) {
    __extends(ClassExportDoc, _super);
    function ClassExportDoc(moduleDoc, symbol, basePath, typeChecker, hidePrivateMembers, namespacesToInclude) {
        var _this = _super.call(this, moduleDoc, symbol, symbol.valueDeclaration, basePath, typeChecker, namespacesToInclude) || this;
        _this.docType = 'class';
        _this.statics = [];
        if (symbol.exports) {
            _this.statics = _this.getMemberDocs(symbol.exports, hidePrivateMembers, true);
        }
        if (symbol.members) {
            // Get the constructor
            var constructorSymbol = symbol.members.get('__constructor');
            if (constructorSymbol && constructorSymbol.getFlags() & typescript_1.SymbolFlags.Constructor) {
                _this.constructorDoc = _this.getConstructorDoc(constructorSymbol);
            }
            // Get the instance members
            _this.members = _this.getMemberDocs(symbol.members, hidePrivateMembers, false);
        }
        return _this;
    }
    ClassExportDoc.prototype.getConstructorDoc = function (constructorSymbol) {
        var _this = this;
        var constructorDoc = null;
        var overloads = [];
        constructorSymbol.getDeclarations().forEach(function (declaration) {
            if (declaration.body) {
                // This is the "real" declaration of the method
                constructorDoc = new MethodMemberDoc_1.MethodMemberDoc(_this, constructorSymbol, declaration, _this.basePath, _this.namespacesToInclude, false, overloads);
            }
            else {
                // This is an overload signature of the method
                overloads.push(new MethodMemberDoc_1.MethodMemberDoc(_this, constructorSymbol, declaration, _this.basePath, _this.namespacesToInclude, false, overloads));
            }
        });
        return constructorDoc || overloads.shift();
    };
    return ClassExportDoc;
}(ClassLikeExportDoc_1.ClassLikeExportDoc));
exports.ClassExportDoc = ClassExportDoc;
//# sourceMappingURL=ClassExportDoc.js.map