"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require('canonical-path');
var TsParser_1 = require("../../services/TsParser");
var ClassExportDoc_1 = require("../../api-doc-types/ClassExportDoc");
var ConstExportDoc_1 = require("../../api-doc-types/ConstExportDoc");
var EnumExportDoc_1 = require("../../api-doc-types/EnumExportDoc");
var FunctionExportDoc_1 = require("../../api-doc-types/FunctionExportDoc");
var InterfaceExportDoc_1 = require("../../api-doc-types/InterfaceExportDoc");
var MethodMemberDoc_1 = require("../../api-doc-types/MethodMemberDoc");
var ModuleDoc_1 = require("../../api-doc-types/ModuleDoc");
var TypeAliasExportDoc_1 = require("../../api-doc-types/TypeAliasExportDoc");
var SourcePattern_1 = require("./SourcePattern");
function readTypeScriptModules(tsParser, modules, namespacesToInclude, exportSymbolsToDocsMap, createDocMessage, log) {
    return new ReadTypeScriptModules(tsParser, modules, namespacesToInclude, exportSymbolsToDocsMap, createDocMessage, log);
}
exports.readTypeScriptModules = readTypeScriptModules;
var ReadTypeScriptModules = (function () {
    function ReadTypeScriptModules(tsParser, modules, namespacesToInclude, exportSymbolsToDocsMap, createDocMessage, log) {
        this.tsParser = tsParser;
        this.modules = modules;
        this.namespacesToInclude = namespacesToInclude;
        this.exportSymbolsToDocsMap = exportSymbolsToDocsMap;
        this.createDocMessage = createDocMessage;
        this.log = log;
        this.$runAfter = ['files-read'];
        this.$runBefore = ['parsing-tags'];
        this.$validate = {
            basePath: { presence: true },
            hidePrivateMembers: { inclusion: [true, false] },
            ignoreExportsMatching: {},
            sortClassMembers: { inclusion: [true, false] },
            sourceFiles: { presence: true },
        };
        // A collection of globs that identify those modules for which we should create docs
        this.sourceFiles = [];
        // The base path from which to load the source files
        this.basePath = '.';
        // We can ignore members of classes that are private
        this.hidePrivateMembers = true;
        // We leave class members sorted in order of declaration
        this.sortClassMembers = false;
        // We can provide a collection of strings or regexes to ignore exports whose export names match
        this.ignoreExportsMatching = ['___esModule'];
    }
    ReadTypeScriptModules.prototype.$process = function (docs) {
        // Convert ignoreExportsMatching to an array of regexes
        this.ignoreExportsRegexes = convertToRegexCollection(this.ignoreExportsMatching);
        // Extract the modules from source files via the TypeScript parser
        var basePath = path.resolve(this.basePath);
        var filesPaths = SourcePattern_1.expandSourceFiles(this.sourceFiles, basePath);
        var parseInfo = this.tsParser.parse(filesPaths, this.basePath);
        this.addModuleDocs(docs, parseInfo.moduleSymbols, basePath);
    };
    ReadTypeScriptModules.prototype.addModuleDocs = function (docs, moduleSymbols, basePath) {
        var _this = this;
        // Iterate through each of the modules to generate module docs, export docs and member docs.
        moduleSymbols.forEach(function (moduleSymbol) {
            // Create a doc for this module and add it to the module lookup collection and the docs collection
            var moduleDoc = new ModuleDoc_1.ModuleDoc(moduleSymbol, basePath);
            _this.modules[moduleDoc.id] = moduleDoc;
            docs.push(moduleDoc);
            _this.addExportDocs(docs, moduleDoc, moduleSymbols.typeChecker);
        });
    };
    ReadTypeScriptModules.prototype.addExportDocs = function (docs, moduleDoc, typeChecker) {
        var _this = this;
        // Iterate through this module's exports and generate a doc for each
        moduleDoc.symbol.exportArray.forEach(function (exportSymbol) {
            // Ignore exports that match the configured regular expressions
            if (anyMatches(_this.ignoreExportsRegexes, exportSymbol.name))
                return;
            // If the symbol is an alias (e.g. re-exported from another module) then get the original resolved symbol
            var resolvedExport = exportSymbol.resolvedSymbol || exportSymbol;
            // If the resolved symbol contains no declarations then it is invalid (perhaps an abstract class?)
            // For the moment we are just going to ignore such exports (:scream:)
            // TODO: find a way of generating docs for them
            if (!resolvedExport.declarations) {
                _this.log.info("Export has no declarations: " + resolvedExport.name);
                return;
            }
            switch (TsParser_1.getExportDocType(resolvedExport)) {
                case 'class':
                    var classDoc = new ClassExportDoc_1.ClassExportDoc(moduleDoc, resolvedExport, _this.basePath, typeChecker, _this.hidePrivateMembers, _this.namespacesToInclude);
                    _this.addMemberDocs(docs, classDoc.members);
                    _this.addMemberDocs(docs, classDoc.statics);
                    if (classDoc.constructorDoc)
                        _this.addMemberDocs(docs, [classDoc.constructorDoc]);
                    _this.addExportDoc(docs, moduleDoc, classDoc);
                    break;
                case 'interface':
                    var interfaceDoc = new InterfaceExportDoc_1.InterfaceExportDoc(moduleDoc, resolvedExport, _this.basePath, typeChecker, _this.namespacesToInclude);
                    _this.addMemberDocs(docs, interfaceDoc.members);
                    _this.addExportDoc(docs, moduleDoc, interfaceDoc);
                    break;
                case 'enum':
                    var enumDoc = new EnumExportDoc_1.EnumExportDoc(moduleDoc, resolvedExport, _this.basePath, typeChecker, _this.namespacesToInclude);
                    enumDoc.members.forEach(function (doc) { return docs.push(doc); });
                    _this.addExportDoc(docs, moduleDoc, enumDoc);
                    break;
                case 'const':
                case 'let':
                case 'var':
                    _this.addExportDoc(docs, moduleDoc, new ConstExportDoc_1.ConstExportDoc(moduleDoc, resolvedExport, _this.basePath, typeChecker, _this.namespacesToInclude));
                    break;
                case 'type-alias':
                    _this.addExportDoc(docs, moduleDoc, new TypeAliasExportDoc_1.TypeAliasExportDoc(moduleDoc, resolvedExport, _this.basePath, typeChecker, _this.namespacesToInclude));
                    break;
                case 'function':
                    var functionDoc = new FunctionExportDoc_1.FunctionExportDoc(moduleDoc, resolvedExport, _this.basePath, typeChecker, _this.namespacesToInclude);
                    _this.addExportDoc(docs, moduleDoc, functionDoc);
                    functionDoc.overloads.forEach(function (doc) { return docs.push(doc); });
                    break;
                default:
                    _this.log.error("Don't know how to create export document for " + resolvedExport.name);
                    break;
            }
        });
    };
    ReadTypeScriptModules.prototype.addExportDoc = function (docs, moduleDoc, exportDoc) {
        this.log.debug('>>>> EXPORT: ' + exportDoc.name + ' (' + exportDoc.docType + ') from ' + moduleDoc.id);
        moduleDoc.exports.push(exportDoc);
        docs.push(exportDoc);
        this.exportSymbolsToDocsMap.set(exportDoc.symbol, exportDoc);
    };
    ReadTypeScriptModules.prototype.addMemberDocs = function (docs, members) {
        members.forEach(function (member) {
            docs.push(member);
            if (member instanceof MethodMemberDoc_1.MethodMemberDoc)
                member.overloads.forEach(function (overloadDoc) { return docs.push(overloadDoc); });
        });
    };
    return ReadTypeScriptModules;
}());
exports.ReadTypeScriptModules = ReadTypeScriptModules;
function convertToRegexCollection(items) {
    if (!items)
        return [];
    // Must be an array
    if (!Array.isArray(items))
        items = [items];
    // Convert string to exact matching regexes
    return items.map(function (item) { return item instanceof RegExp ? item : new RegExp('^' + item + '$'); });
}
function anyMatches(regexes, item) {
    for (var _i = 0, regexes_1 = regexes; _i < regexes_1.length; _i++) {
        var regex = regexes_1[_i];
        if (item.match(regex)) {
            return true;
        }
    }
    return false;
}
//# sourceMappingURL=index.js.map