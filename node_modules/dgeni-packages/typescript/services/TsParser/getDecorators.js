"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
function getDecorators(declaration) {
    if (declaration.decorators) {
        return declaration.decorators.map(function (decorator) {
            var callExpression = getCallExpression(decorator);
            if (callExpression) {
                var printer_1 = typescript_1.createPrinter({ removeComments: true });
                return {
                    argumentInfo: callExpression.arguments.map(function (argument) { return parseArgument(argument); }),
                    arguments: callExpression.arguments.map(function (argument) { return printer_1.printNode(typescript_1.EmitHint.Expression, argument, declaration.getSourceFile()); }),
                    expression: decorator,
                    isCallExpression: true,
                    name: callExpression.expression.getText(),
                };
            }
            else {
                return {
                    expression: decorator,
                    isCallExpression: false,
                    name: decorator.expression.getText(),
                };
            }
        });
    }
}
exports.getDecorators = getDecorators;
function getCallExpression(decorator) {
    if (decorator.expression.kind === typescript_1.SyntaxKind.CallExpression) {
        return decorator.expression;
    }
}
function parseProperties(properties) {
    var result = {};
    properties.forEach(function (property) {
        if (property.kind === typescript_1.SyntaxKind.PropertyAssignment) {
            result[property.name.getText()] = parseArgument(property.initializer);
        }
    });
    return result;
}
function parseArgument(argument) {
    if (argument.kind === typescript_1.SyntaxKind.ObjectLiteralExpression) {
        return parseProperties(argument.properties);
    }
    if (argument.kind === typescript_1.SyntaxKind.ArrayLiteralExpression) {
        return argument.elements.map(function (element) { return element.getText(); });
    }
    return argument.getText();
}
//# sourceMappingURL=getDecorators.js.map